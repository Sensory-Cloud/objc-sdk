// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/audio/audio.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class SENGAAudioConfig;
@class SENGAAudioModel;
@class SENGAAudioRequestPostProcessingAction;
@class SENGAAudioResponsePostProcessingAction;
@class SENGAAuthenticateConfig;
@class SENGACreateEnrollmentConfig;
@class SENGACreateEnrollmentEventConfig;
@class SENGACustomVocabularyWords;
@class SENGASoundIdTopNResponse;
@class SENGATranscribeConfig;
@class SENGATranscribeEventConfig;
@class SENGATranscribeWord;
@class SENGATranscribeWordResponse;
@class SENGAValidateEnrolledEventConfig;
@class SENGAValidateEventConfig;
@class SENGAVoiceSynthesisConfig;
@class SENGEnrollmentToken;
@class SENGTokenResponse;
GPB_ENUM_FWD_DECLARE(SENGModelType);
GPB_ENUM_FWD_DECLARE(SENGTechnologyType);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SENGAAudioPostProcessingAction

typedef GPB_ENUM(SENGAAudioPostProcessingAction) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENGAAudioPostProcessingAction_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Default value to perform no action */
  SENGAAudioPostProcessingAction_NotSet = 0,

  /** Request the audio engine to flush its buffers. */
  SENGAAudioPostProcessingAction_Flush = 1,

  /** Request the audio engine reset itself. */
  SENGAAudioPostProcessingAction_Reset = 2,

  /** Indicates this message is the final message. The audio engine will create a final result, return it to the client, and close the stream. */
  SENGAAudioPostProcessingAction_Final = 3,
};

GPBEnumDescriptor *SENGAAudioPostProcessingAction_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENGAAudioPostProcessingAction_IsValidValue(int32_t value);

#pragma mark - Enum SENGAWordState

typedef GPB_ENUM(SENGAWordState) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENGAWordState_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Default state is PENDING which indicates that the speech system may decide to change the word in the future given additional audio data */
  SENGAWordState_WordstatePending = 0,

  /** Final state FINAL indicates that the word has moved out of the active logit buffer and can no longer be updated given additional information */
  SENGAWordState_WordstateFinal = 1,
};

GPBEnumDescriptor *SENGAWordState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENGAWordState_IsValidValue(int32_t value);

#pragma mark - Enum SENGAThresholdSensitivity

/** Specifies how sensitive the event threshold of the model should be */
typedef GPB_ENUM(SENGAThresholdSensitivity) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENGAThresholdSensitivity_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /**
   * Expects about 32 False Accepts per day for Fixed-Trigger models,
   * and about 10 False Accepts per day for SoundID models
   **/
  SENGAThresholdSensitivity_Lowest = 0,

  /**
   * Expects about 16 False Accepts per day for Fixed-Trigger models,
   * and about 5 False Accepts per day for SoundID models
   **/
  SENGAThresholdSensitivity_Low = 1,

  /**
   * Expects about 8 False Accepts per day for Fixed-Trigger models,
   * and about 3 False Accepts per day for SoundID models
   **/
  SENGAThresholdSensitivity_Medium = 2,

  /**
   * Expects about 3 False Accepts per day for Fixed-Trigger models,
   * and about 2 False Accepts per day for SoundID models
   **/
  SENGAThresholdSensitivity_High = 3,

  /**
   * Expects about 2 False Accepts per day for Fixed-Trigger models,
   * and about 1 False Accept per day for SoundID models
   **/
  SENGAThresholdSensitivity_Highest = 4,
};

GPBEnumDescriptor *SENGAThresholdSensitivity_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENGAThresholdSensitivity_IsValidValue(int32_t value);

#pragma mark - Enum SENGAAuthenticateConfig_ThresholdSecurity

/** Specifies the authentication security mode */
typedef GPB_ENUM(SENGAAuthenticateConfig_ThresholdSecurity) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENGAAuthenticateConfig_ThresholdSecurity_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /**
   * Default  Setting.  Targets  low  Imposter  Accept  (IA).  Recommended  when  TSSV  is  used  solely  for
   * biometric authentication. Generally this mode assumes the user will produce the voice password in
   * isolation (rather than part of a voice-query) and over short listening windows (e.g., 7 seconds or
   * less).  This  provides  the  ultimate  rejection  of  imposter  voices  at  the  expense  of  false-rejects,
   * particularly in high-noise environments 5 dB SNR and below.
   **/
  SENGAAuthenticateConfig_ThresholdSecurity_High = 0,

  /**
   * Targets low False Reject (FR). Recommended to achieve low false reject or for applications where
   * errors in imposter accept are not considered severe. Provides reduced rejection in extremely noisy
   * environments. This mode is typically selected when TSSV is used in conjunction with a front-end
   * fixed-trigger or part of a combined solution for voice-triggering in which the goal may be to gently
   * reduce  voice-trigger  false  accepts  in  the  presence  of  noise,  or  to  reduce  the  chances  that  non-
   * enrollees who say the wake word might accidentally cause an always-listening device to false-fire.
   **/
  SENGAAuthenticateConfig_ThresholdSecurity_Low = 1,
};

GPBEnumDescriptor *SENGAAuthenticateConfig_ThresholdSecurity_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENGAAuthenticateConfig_ThresholdSecurity_IsValidValue(int32_t value);

#pragma mark - Enum SENGAAudioConfig_AudioEncoding

/** The encoding of the audio data sent in the request. */
typedef GPB_ENUM(SENGAAudioConfig_AudioEncoding) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENGAAudioConfig_AudioEncoding_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Uncompressed 16-bit signed little-endian samples (Linear PCM). */
  SENGAAudioConfig_AudioEncoding_Linear16 = 0,

  /**
   * `FLAC` (Free Lossless Audio
   * Codec) is the recommended encoding because it is
   * lossless--therefore recognition is not compromised--and
   * requires only about half the bandwidth of `LINEAR16`.
   **/
  SENGAAudioConfig_AudioEncoding_Flac = 1,

  /** 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law. */
  SENGAAudioConfig_AudioEncoding_Mulaw = 2,
};

GPBEnumDescriptor *SENGAAudioConfig_AudioEncoding_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENGAAudioConfig_AudioEncoding_IsValidValue(int32_t value);

#pragma mark - SENGAAudioRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface SENGAAudioRoot : GPBRootObject
@end

#pragma mark - SENGAGetModelsRequest

/**
 * Request to get a list of the available models
 **/
GPB_FINAL @interface SENGAGetModelsRequest : GPBMessage

@end

#pragma mark - SENGAAudioModel

typedef GPB_ENUM(SENGAAudioModel_FieldNumber) {
  SENGAAudioModel_FieldNumber_Name = 1,
  SENGAAudioModel_FieldNumber_IsEnrollable = 2,
  SENGAAudioModel_FieldNumber_ModelType = 3,
  SENGAAudioModel_FieldNumber_FixedPhrase = 4,
  SENGAAudioModel_FieldNumber_SampleRate = 5,
  SENGAAudioModel_FieldNumber_VersionsArray = 6,
  SENGAAudioModel_FieldNumber_Technology = 7,
  SENGAAudioModel_FieldNumber_IsLivenessSupported = 8,
};

/**
 * A model that is available for use
 **/
GPB_FINAL @interface SENGAAudioModel : GPBMessage

/** The name of the model */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** Boolean representing if a model can be used in enrollment */
@property(nonatomic, readwrite) BOOL isEnrollable;

/** Model type */
@property(nonatomic, readwrite) enum SENGModelType modelType;

/** Specific phrase used for enrollment (if applicable) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fixedPhrase;

/** Required sampling rate for the data */
@property(nonatomic, readwrite) int32_t sampleRate;

/** List of versions available for this model */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *versionsArray;
/** The number of items in @c versionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger versionsArray_Count;

/** The technology backing this model */
@property(nonatomic, readwrite) enum SENGTechnologyType technology;

/** Indicates if liveness is supported by this model */
@property(nonatomic, readwrite) BOOL isLivenessSupported;

@end

/**
 * Fetches the raw value of a @c SENGAAudioModel's @c modelType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGAAudioModel_ModelType_RawValue(SENGAAudioModel *message);
/**
 * Sets the raw value of an @c SENGAAudioModel's @c modelType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGAAudioModel_ModelType_RawValue(SENGAAudioModel *message, int32_t value);

/**
 * Fetches the raw value of a @c SENGAAudioModel's @c technology property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGAAudioModel_Technology_RawValue(SENGAAudioModel *message);
/**
 * Sets the raw value of an @c SENGAAudioModel's @c technology property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGAAudioModel_Technology_RawValue(SENGAAudioModel *message, int32_t value);

#pragma mark - SENGAAudioRequestPostProcessingAction

typedef GPB_ENUM(SENGAAudioRequestPostProcessingAction_FieldNumber) {
  SENGAAudioRequestPostProcessingAction_FieldNumber_ActionId = 1,
  SENGAAudioRequestPostProcessingAction_FieldNumber_Action = 2,
};

/**
 * Action that can be passed along with any audio data. This message instructs the audio engine to
 * perfrom some kind of action after the data is processed.
 **/
GPB_FINAL @interface SENGAAudioRequestPostProcessingAction : GPBMessage

/**
 * ID that can be set by the client. If a flush or reset is requested,
 * this ID will be returned to the client upon a successful flush or reset.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *actionId;

/** The specific action that is being requested. */
@property(nonatomic, readwrite) SENGAAudioPostProcessingAction action;

@end

/**
 * Fetches the raw value of a @c SENGAAudioRequestPostProcessingAction's @c action property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGAAudioRequestPostProcessingAction_Action_RawValue(SENGAAudioRequestPostProcessingAction *message);
/**
 * Sets the raw value of an @c SENGAAudioRequestPostProcessingAction's @c action property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGAAudioRequestPostProcessingAction_Action_RawValue(SENGAAudioRequestPostProcessingAction *message, int32_t value);

#pragma mark - SENGAAudioResponsePostProcessingAction

typedef GPB_ENUM(SENGAAudioResponsePostProcessingAction_FieldNumber) {
  SENGAAudioResponsePostProcessingAction_FieldNumber_ActionId = 1,
  SENGAAudioResponsePostProcessingAction_FieldNumber_Action = 2,
};

/**
 * Metadata that can be passed along with any audio response indicating
 **/
GPB_FINAL @interface SENGAAudioResponsePostProcessingAction : GPBMessage

/** ID that was optionally set by the client with the metadata request. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *actionId;

/** The specific action that was completed. */
@property(nonatomic, readwrite) SENGAAudioPostProcessingAction action;

@end

/**
 * Fetches the raw value of a @c SENGAAudioResponsePostProcessingAction's @c action property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGAAudioResponsePostProcessingAction_Action_RawValue(SENGAAudioResponsePostProcessingAction *message);
/**
 * Sets the raw value of an @c SENGAAudioResponsePostProcessingAction's @c action property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGAAudioResponsePostProcessingAction_Action_RawValue(SENGAAudioResponsePostProcessingAction *message, int32_t value);

#pragma mark - SENGAGetModelsResponse

typedef GPB_ENUM(SENGAGetModelsResponse_FieldNumber) {
  SENGAGetModelsResponse_FieldNumber_ModelsArray = 1,
};

/**
 * Response containing the models currently available
 **/
GPB_FINAL @interface SENGAGetModelsResponse : GPBMessage

/** List of supported models */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SENGAAudioModel*> *modelsArray;
/** The number of items in @c modelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger modelsArray_Count;

@end

#pragma mark - SENGACreateEnrollmentRequest

typedef GPB_ENUM(SENGACreateEnrollmentRequest_FieldNumber) {
  SENGACreateEnrollmentRequest_FieldNumber_Config = 1,
  SENGACreateEnrollmentRequest_FieldNumber_AudioContent = 2,
};

typedef GPB_ENUM(SENGACreateEnrollmentRequest_StreamingRequest_OneOfCase) {
  SENGACreateEnrollmentRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENGACreateEnrollmentRequest_StreamingRequest_OneOfCase_Config = 1,
  SENGACreateEnrollmentRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `CreateEnrollment` method.
 * Multiple `CreateEnrollmentRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENGACreateEnrollmentRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENGACreateEnrollmentRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `CreateEnrollmentRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGACreateEnrollmentConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `CreateEnrollmentRequest` messages. The first
 * `CreateEnrollmentRequest` message must not contain `audioContent` data
 * and all subsequent `CreateEnrollmentRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `AudioConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENGACreateEnrollmentRequest_ClearStreamingRequestOneOfCase(SENGACreateEnrollmentRequest *message);

#pragma mark - SENGAAuthenticateRequest

typedef GPB_ENUM(SENGAAuthenticateRequest_FieldNumber) {
  SENGAAuthenticateRequest_FieldNumber_Config = 1,
  SENGAAuthenticateRequest_FieldNumber_AudioContent = 2,
};

typedef GPB_ENUM(SENGAAuthenticateRequest_StreamingRequest_OneOfCase) {
  SENGAAuthenticateRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENGAAuthenticateRequest_StreamingRequest_OneOfCase_Config = 1,
  SENGAAuthenticateRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `Authenticate` method.
 * Multiple `AuthenticateRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENGAAuthenticateRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENGAAuthenticateRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `AuthenticateRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGAAuthenticateConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `AuthenticateRequest` messages. The first
 * `AuthenticateRequest` message must not contain `audioContent` data
 * and all subsequent `AuthenticateRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `AuthenticateConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENGAAuthenticateRequest_ClearStreamingRequestOneOfCase(SENGAAuthenticateRequest *message);

#pragma mark - SENGAValidateEventRequest

typedef GPB_ENUM(SENGAValidateEventRequest_FieldNumber) {
  SENGAValidateEventRequest_FieldNumber_Config = 1,
  SENGAValidateEventRequest_FieldNumber_AudioContent = 2,
  SENGAValidateEventRequest_FieldNumber_PostProcessingAction = 10,
};

typedef GPB_ENUM(SENGAValidateEventRequest_StreamingRequest_OneOfCase) {
  SENGAValidateEventRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENGAValidateEventRequest_StreamingRequest_OneOfCase_Config = 1,
  SENGAValidateEventRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `ValidateEvent` method.
 * Multiple `ValidateEventRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENGAValidateEventRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENGAValidateEventRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `ValidateEventRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGAValidateEventConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `ValidateEventRequest` messages. The first
 * `ValidateEventRequest` message must not contain `audioContent` data
 * and all subsequent `ValidateEventRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `ValidateEventConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

/** Message used to instruct the audio recognition engine to flush or reset. */
@property(nonatomic, readwrite, strong, null_resettable) SENGAAudioRequestPostProcessingAction *postProcessingAction;
/** Test to see if @c postProcessingAction has been set. */
@property(nonatomic, readwrite) BOOL hasPostProcessingAction;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENGAValidateEventRequest_ClearStreamingRequestOneOfCase(SENGAValidateEventRequest *message);

#pragma mark - SENGACreateEnrolledEventRequest

typedef GPB_ENUM(SENGACreateEnrolledEventRequest_FieldNumber) {
  SENGACreateEnrolledEventRequest_FieldNumber_Config = 1,
  SENGACreateEnrolledEventRequest_FieldNumber_AudioContent = 2,
};

typedef GPB_ENUM(SENGACreateEnrolledEventRequest_StreamingRequest_OneOfCase) {
  SENGACreateEnrolledEventRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENGACreateEnrolledEventRequest_StreamingRequest_OneOfCase_Config = 1,
  SENGACreateEnrolledEventRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `CreateEnrolledEvent` method.
 * Multiple `CreateEnrolledEventRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENGACreateEnrolledEventRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENGACreateEnrolledEventRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `CreateEnrolledEventRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGACreateEnrollmentEventConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `CreateEnrolledEventRequest` messages. The first
 * `CreateEnrolledEventRequest` message must not contain `audioContent` data
 * and all subsequent `CreateEnrolledEventRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `AudioConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENGACreateEnrolledEventRequest_ClearStreamingRequestOneOfCase(SENGACreateEnrolledEventRequest *message);

#pragma mark - SENGAValidateEnrolledEventRequest

typedef GPB_ENUM(SENGAValidateEnrolledEventRequest_FieldNumber) {
  SENGAValidateEnrolledEventRequest_FieldNumber_Config = 1,
  SENGAValidateEnrolledEventRequest_FieldNumber_AudioContent = 2,
};

typedef GPB_ENUM(SENGAValidateEnrolledEventRequest_StreamingRequest_OneOfCase) {
  SENGAValidateEnrolledEventRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENGAValidateEnrolledEventRequest_StreamingRequest_OneOfCase_Config = 1,
  SENGAValidateEnrolledEventRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `ValidateEnrolledEvent` method.
 * Multiple `ValidateEnrolledEventRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENGAValidateEnrolledEventRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENGAValidateEnrolledEventRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `ValidateEnrolledEventRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGAValidateEnrolledEventConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `ValidateEnrolledEventRequest` messages. The first
 * `ValidateEnrolledEventRequest` message must not contain `audioContent` data
 * and all subsequent `ValidateEnrolledEventRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `ValidateEnrolledEventConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENGAValidateEnrolledEventRequest_ClearStreamingRequestOneOfCase(SENGAValidateEnrolledEventRequest *message);

#pragma mark - SENGATranscribeRequest

typedef GPB_ENUM(SENGATranscribeRequest_FieldNumber) {
  SENGATranscribeRequest_FieldNumber_Config = 1,
  SENGATranscribeRequest_FieldNumber_AudioContent = 2,
  SENGATranscribeRequest_FieldNumber_PostProcessingAction = 10,
};

typedef GPB_ENUM(SENGATranscribeRequest_StreamingRequest_OneOfCase) {
  SENGATranscribeRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENGATranscribeRequest_StreamingRequest_OneOfCase_Config = 1,
  SENGATranscribeRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `Transcribe` method.
 * Multiple `TranscribeRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENGATranscribeRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENGATranscribeRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `TranscribeRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGATranscribeConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `TranscribeRequest` messages. The first
 * `TranscribeRequest` message must not contain `audioContent` data
 * and all subsequent `TranscribeRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `TranscribeConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

/** Message used to instruct the audio recognition engine to flush or reset. */
@property(nonatomic, readwrite, strong, null_resettable) SENGAAudioRequestPostProcessingAction *postProcessingAction;
/** Test to see if @c postProcessingAction has been set. */
@property(nonatomic, readwrite) BOOL hasPostProcessingAction;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENGATranscribeRequest_ClearStreamingRequestOneOfCase(SENGATranscribeRequest *message);

#pragma mark - SENGASynthesizeSpeechRequest

typedef GPB_ENUM(SENGASynthesizeSpeechRequest_FieldNumber) {
  SENGASynthesizeSpeechRequest_FieldNumber_Phrase = 1,
  SENGASynthesizeSpeechRequest_FieldNumber_Config = 2,
};

/**
 * The top-level message sent by the client for the `SynthesizeSpeech` method.
 **/
GPB_FINAL @interface SENGASynthesizeSpeechRequest : GPBMessage

/** The raw text to create voice synthesis for */
@property(nonatomic, readwrite, copy, null_resettable) NSString *phrase;

/** Configurations for the synthesized voice */
@property(nonatomic, readwrite, strong, null_resettable) SENGAVoiceSynthesisConfig *config;
/** Test to see if @c config has been set. */
@property(nonatomic, readwrite) BOOL hasConfig;

@end

#pragma mark - SENGACreateEnrollmentResponse

typedef GPB_ENUM(SENGACreateEnrollmentResponse_FieldNumber) {
  SENGACreateEnrollmentResponse_FieldNumber_PercentComplete = 1,
  SENGACreateEnrollmentResponse_FieldNumber_AudioEnergy = 2,
  SENGACreateEnrollmentResponse_FieldNumber_EnrollmentId = 3,
  SENGACreateEnrollmentResponse_FieldNumber_ModelName = 4,
  SENGACreateEnrollmentResponse_FieldNumber_ModelVersion = 5,
  SENGACreateEnrollmentResponse_FieldNumber_ModelPrompt = 6,
  SENGACreateEnrollmentResponse_FieldNumber_PercentSegmentComplete = 7,
  SENGACreateEnrollmentResponse_FieldNumber_EnrollmentToken = 8,
};

/**
 * Response to an enrollment request
 **/
GPB_FINAL @interface SENGACreateEnrollmentResponse : GPBMessage

/** Percent Complete as values between 0 and 100 */
@property(nonatomic, readwrite) int64_t percentComplete;

/** Relative energy of the processed audio as a value between 0 and 1 */
@property(nonatomic, readwrite) float audioEnergy;

/** If enrollment is successful, this value will be the unique Enrollment ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentId;

/** Model used for enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/** Model version used for enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelVersion;

/** Model prompt instructs the user to say something during enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelPrompt;

/**
 * Percent complete as values between 0 and 100 indicating the progress of the current enrollment segment.
 * This is relevent in liveness enrollment where multiple groups of numbers must be spoken.
 **/
@property(nonatomic, readwrite) int64_t percentSegmentComplete;

/**
 * Encrypted enrollment token, this token should be included in authentication requests
 * If the server is configured to store enrollments server side, this will be left empty
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGEnrollmentToken *enrollmentToken;
/** Test to see if @c enrollmentToken has been set. */
@property(nonatomic, readwrite) BOOL hasEnrollmentToken;

@end

#pragma mark - SENGAAuthenticateResponse

typedef GPB_ENUM(SENGAAuthenticateResponse_FieldNumber) {
  SENGAAuthenticateResponse_FieldNumber_AudioEnergy = 1,
  SENGAAuthenticateResponse_FieldNumber_Success = 2,
  SENGAAuthenticateResponse_FieldNumber_Token = 3,
  SENGAAuthenticateResponse_FieldNumber_UserId = 4,
  SENGAAuthenticateResponse_FieldNumber_EnrollmentId = 5,
  SENGAAuthenticateResponse_FieldNumber_ModelPrompt = 6,
  SENGAAuthenticateResponse_FieldNumber_PercentSegmentComplete = 7,
};

/**
 * Response to an authentication request
 **/
GPB_FINAL @interface SENGAAuthenticateResponse : GPBMessage

/** Relative energy of the processed audio as a value between 0 and 1 */
@property(nonatomic, readwrite) float audioEnergy;

/** Success / Failure bit */
@property(nonatomic, readwrite) BOOL success;

/** Optional token that will be returned upon a successful authentication if doIncludeToken is set to true in the AuthenticateConfig */
@property(nonatomic, readwrite, strong, null_resettable) SENGTokenResponse *token;
/** Test to see if @c token has been set. */
@property(nonatomic, readwrite) BOOL hasToken;

/**
 * The userID of the authenticated user
 * Useful when evaluating enrollment groups
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/**
 * The enrollmentID of the authenticated enrollment
 * Useful when evaluating enrollment groups
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentId;

/** Model prompt instructs the user to say something during authentication */
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelPrompt;

/**
 * Percent complete as values between 0 and 100 indicating the progress of the current authentication segment.
 * This is relevent in liveness enrollment where multiple numbers must be spoken.
 **/
@property(nonatomic, readwrite) int64_t percentSegmentComplete;

@end

#pragma mark - SENGASoundIdTopNResponse

typedef GPB_ENUM(SENGASoundIdTopNResponse_FieldNumber) {
  SENGASoundIdTopNResponse_FieldNumber_ResultId = 1,
  SENGASoundIdTopNResponse_FieldNumber_LogitScore = 2,
  SENGASoundIdTopNResponse_FieldNumber_ProbabilityScore = 3,
};

GPB_FINAL @interface SENGASoundIdTopNResponse : GPBMessage

/**
 * Indicates the id of the particular sound that was recognized.
 * Useful for combined models where multiple sound events can be recognized by the same model.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *resultId;

/** Logit value for the given result */
@property(nonatomic, readwrite) float logitScore;

/** Probability value for the given result */
@property(nonatomic, readwrite) float probabilityScore;

@end

#pragma mark - SENGAValidateEventResponse

typedef GPB_ENUM(SENGAValidateEventResponse_FieldNumber) {
  SENGAValidateEventResponse_FieldNumber_AudioEnergy = 1,
  SENGAValidateEventResponse_FieldNumber_Success = 2,
  SENGAValidateEventResponse_FieldNumber_ResultId = 3,
  SENGAValidateEventResponse_FieldNumber_Score = 4,
  SENGAValidateEventResponse_FieldNumber_TopNresponseArray = 5,
  SENGAValidateEventResponse_FieldNumber_ResultStartTime = 6,
  SENGAValidateEventResponse_FieldNumber_ResultEndTime = 7,
  SENGAValidateEventResponse_FieldNumber_PostProcessingAction = 10,
};

/**
 * Response from a ValidateEventRequest
 **/
GPB_FINAL @interface SENGAValidateEventResponse : GPBMessage

/** Relative energy of the processed audio as a value between 0 and 1 */
@property(nonatomic, readwrite) float audioEnergy;

/** Success / Failure bit */
@property(nonatomic, readwrite) BOOL success;

/**
 * Indicates the id of the particular sound that was recognized.
 * Useful for combined models where multiple sound events can be recognized by the same model.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *resultId;

/** The score of the event between -100 to +100. Smaller values typically indicate an invalid sound while larger values would generally indicate a detected sound. */
@property(nonatomic, readwrite) float score;

/** Array of the top N most likely results */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SENGASoundIdTopNResponse*> *topNresponseArray;
/** The number of items in @c topNresponseArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger topNresponseArray_Count;

/**
 * If a post processing audio action was requested, this will be populated with the specific
 * action that was completed along with the actionId optionally set by the client.
 **/
@property(nonatomic, readwrite) float resultStartTime;

@property(nonatomic, readwrite) float resultEndTime;

@property(nonatomic, readwrite, strong, null_resettable) SENGAAudioResponsePostProcessingAction *postProcessingAction;
/** Test to see if @c postProcessingAction has been set. */
@property(nonatomic, readwrite) BOOL hasPostProcessingAction;

@end

#pragma mark - SENGAValidateEnrolledEventResponse

typedef GPB_ENUM(SENGAValidateEnrolledEventResponse_FieldNumber) {
  SENGAValidateEnrolledEventResponse_FieldNumber_AudioEnergy = 1,
  SENGAValidateEnrolledEventResponse_FieldNumber_Success = 2,
  SENGAValidateEnrolledEventResponse_FieldNumber_EnrollmentId = 3,
  SENGAValidateEnrolledEventResponse_FieldNumber_UserId = 4,
  SENGAValidateEnrolledEventResponse_FieldNumber_ModelPrompt = 5,
};

/**
 * Response from a ValidateEventRequest
 **/
GPB_FINAL @interface SENGAValidateEnrolledEventResponse : GPBMessage

/** Relative energy of the processed audio as a value between 0 and 1 */
@property(nonatomic, readwrite) float audioEnergy;

/** Success / Failure bit */
@property(nonatomic, readwrite) BOOL success;

/**
 * The enrollmentID of the authenticated user
 * Useful when evaluating enrollment groups
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentId;

/**
 * The userID of the authenticated user
 * Useful when evaluating enrollment groups
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** Model prompt instructs the user to say something during authentication */
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelPrompt;

@end

#pragma mark - SENGATranscribeWord

typedef GPB_ENUM(SENGATranscribeWord_FieldNumber) {
  SENGATranscribeWord_FieldNumber_BegintimeMs = 1,
  SENGATranscribeWord_FieldNumber_EndtimeMs = 2,
  SENGATranscribeWord_FieldNumber_Confidence = 3,
  SENGATranscribeWord_FieldNumber_WordState = 4,
  SENGATranscribeWord_FieldNumber_WordIndex = 5,
  SENGATranscribeWord_FieldNumber_Word = 6,
};

GPB_FINAL @interface SENGATranscribeWord : GPBMessage

/** The time in the transcript where the word begins */
@property(nonatomic, readwrite) uint64_t begintimeMs;

/** The time in the transcript where the word ends */
@property(nonatomic, readwrite) uint64_t endtimeMs;

/** The confidence score [0.0,1.0] that this word is correctly predicted */
@property(nonatomic, readwrite) float confidence;

/** indicates the state of the word with respect to additional updates -- FINAL indicate the word will no longer change */
@property(nonatomic, readwrite) SENGAWordState wordState;

/** The Positional index within the session where this word appeared */
@property(nonatomic, readwrite) uint64_t wordIndex;

/** The actual word that was predicted */
@property(nonatomic, readwrite, copy, null_resettable) NSString *word;

@end

/**
 * Fetches the raw value of a @c SENGATranscribeWord's @c wordState property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGATranscribeWord_WordState_RawValue(SENGATranscribeWord *message);
/**
 * Sets the raw value of an @c SENGATranscribeWord's @c wordState property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGATranscribeWord_WordState_RawValue(SENGATranscribeWord *message, int32_t value);

#pragma mark - SENGATranscribeWordResponse

typedef GPB_ENUM(SENGATranscribeWordResponse_FieldNumber) {
  SENGATranscribeWordResponse_FieldNumber_WordsArray = 1,
  SENGATranscribeWordResponse_FieldNumber_FirstWordIndex = 2,
  SENGATranscribeWordResponse_FieldNumber_LastWordIndex = 3,
};

/**
 * Word Level Transcription Data
 **/
GPB_FINAL @interface SENGATranscribeWordResponse : GPBMessage

/** An array of TranscribeWords */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SENGATranscribeWord*> *wordsArray;
/** The number of items in @c wordsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger wordsArray_Count;

/** Lowest index of the words in wordList */
@property(nonatomic, readwrite) uint64_t firstWordIndex;

/** Highest index of the words in wordList */
@property(nonatomic, readwrite) uint64_t lastWordIndex;

@end

#pragma mark - SENGATranscribeResponse

typedef GPB_ENUM(SENGATranscribeResponse_FieldNumber) {
  SENGATranscribeResponse_FieldNumber_AudioEnergy = 1,
  SENGATranscribeResponse_FieldNumber_WordList = 4,
  SENGATranscribeResponse_FieldNumber_HasVoiceActivity = 5,
  SENGATranscribeResponse_FieldNumber_PostProcessingAction = 10,
};

/**
 * Response from a TranscribeRequest
 **/
GPB_FINAL @interface SENGATranscribeResponse : GPBMessage

/** Relative energy of the processed audio as a value between 0 and 1 */
@property(nonatomic, readwrite) float audioEnergy;

/** A response including word metadata */
@property(nonatomic, readwrite, strong, null_resettable) SENGATranscribeWordResponse *wordList;
/** Test to see if @c wordList has been set. */
@property(nonatomic, readwrite) BOOL hasWordList;

/** Tells if any voice activity was detected for the most recently proccessed audio segment */
@property(nonatomic, readwrite) BOOL hasVoiceActivity;

/**
 * If a post processing audio action was requested, this will be populated with the specific
 * action that was completed along with the actionId optionally set by the client.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGAAudioResponsePostProcessingAction *postProcessingAction;
/** Test to see if @c postProcessingAction has been set. */
@property(nonatomic, readwrite) BOOL hasPostProcessingAction;

@end

#pragma mark - SENGASynthesizeSpeechResponse

typedef GPB_ENUM(SENGASynthesizeSpeechResponse_FieldNumber) {
  SENGASynthesizeSpeechResponse_FieldNumber_Config = 1,
  SENGASynthesizeSpeechResponse_FieldNumber_AudioContent = 2,
};

typedef GPB_ENUM(SENGASynthesizeSpeechResponse_StreamingResponse_OneOfCase) {
  SENGASynthesizeSpeechResponse_StreamingResponse_OneOfCase_GPBUnsetOneOfCase = 0,
  SENGASynthesizeSpeechResponse_StreamingResponse_OneOfCase_Config = 1,
  SENGASynthesizeSpeechResponse_StreamingResponse_OneOfCase_AudioContent = 2,
};

/**
 * The response to a speech synthesis request
 **/
GPB_FINAL @interface SENGASynthesizeSpeechResponse : GPBMessage

@property(nonatomic, readonly) SENGASynthesizeSpeechResponse_StreamingResponse_OneOfCase streamingResponseOneOfCase;

/**
 * Provides information that specifies how the audio has been formatted.
 * The first `SpeechSynthesisResponse` message will contain a `config` message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGAAudioConfig *config;

/**
 * The synthesized audio data. Sequential chunks of audio data are sent in
 * sequential `SpeechSynthesisResponse` messages. The first `SpeechSynthesisResponse`
 * message will only contain `config` data and all supsequent `SpeechSynthesisResponse`
 * messages will contain `audioContent` data.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

@end

/**
 * Clears whatever value was set for the oneof 'streamingResponse'.
 **/
void SENGASynthesizeSpeechResponse_ClearStreamingResponseOneOfCase(SENGASynthesizeSpeechResponse *message);

#pragma mark - SENGACreateEnrollmentConfig

typedef GPB_ENUM(SENGACreateEnrollmentConfig_FieldNumber) {
  SENGACreateEnrollmentConfig_FieldNumber_Audio = 1,
  SENGACreateEnrollmentConfig_FieldNumber_UserId = 2,
  SENGACreateEnrollmentConfig_FieldNumber_DeviceId = 3,
  SENGACreateEnrollmentConfig_FieldNumber_ModelName = 4,
  SENGACreateEnrollmentConfig_FieldNumber_Description_p = 5,
  SENGACreateEnrollmentConfig_FieldNumber_IsLivenessEnabled = 6,
  SENGACreateEnrollmentConfig_FieldNumber_EnrollmentNumUtterances = 7,
  SENGACreateEnrollmentConfig_FieldNumber_EnrollmentDuration = 8,
  SENGACreateEnrollmentConfig_FieldNumber_ReferenceId = 9,
  SENGACreateEnrollmentConfig_FieldNumber_DisableServerEnrollmentTemplateStorage = 10,
};

typedef GPB_ENUM(SENGACreateEnrollmentConfig_EnrollLength_OneOfCase) {
  SENGACreateEnrollmentConfig_EnrollLength_OneOfCase_GPBUnsetOneOfCase = 0,
  SENGACreateEnrollmentConfig_EnrollLength_OneOfCase_EnrollmentNumUtterances = 7,
  SENGACreateEnrollmentConfig_EnrollLength_OneOfCase_EnrollmentDuration = 8,
};

/**
 * Provides information for an audio-based enrollment
 **/
GPB_FINAL @interface SENGACreateEnrollmentConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/** The unique user Identifer. This value should be a unique email address or username known by the user. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/**
 * The unique device Identifer. This value should be something retrieved by the devie prior to enrollment (like MAC Address)
 * this value is used to identify a device uniquely across multiple enrollments
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceId;

/**
 * Name of background model to be enrolled in
 * Background models can be retrieved from the GetModels() gRPC call
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/**
 * Description of the enrollment as entered by the user.
 * Max length is 1023 characters
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/** Enable liveness if supported by the audio model */
@property(nonatomic, readwrite) BOOL isLivenessEnabled;

/**
 * Optional: Controls the allowed length of enrollment. Longer enrollments are generally more accurate, but take more time to perform.
 * For text-independent enrollments, enrollmentDuration may be set. For any other enrollment, enrollmentNumUtterances may be set.
 **/
@property(nonatomic, readonly) SENGACreateEnrollmentConfig_EnrollLength_OneOfCase enrollLengthOneOfCase;

/**
 * The number of times a specific phrase should be uttered during an enrollment.
 * The default value is 4.
 **/
@property(nonatomic, readwrite) uint32_t enrollmentNumUtterances;

/**
 * The allowed length of text-independent enrollments (such as digit liveness)
 * The default value is 12.5 seconds without liveness and 8 seconds with liveness.
 **/
@property(nonatomic, readwrite) float enrollmentDuration;

/**
 * Reference Id allows clients to assign their own identifier to enrollments for various purposes
 * such as tying an audio and video enrollment together.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *referenceId;

/** Prevent the server from storing the enrollment template. The template will be returned to the client for storage. */
@property(nonatomic, readwrite) BOOL disableServerEnrollmentTemplateStorage;

@end

/**
 * Clears whatever value was set for the oneof 'enrollLength'.
 **/
void SENGACreateEnrollmentConfig_ClearEnrollLengthOneOfCase(SENGACreateEnrollmentConfig *message);

#pragma mark - SENGAAuthenticateConfig

typedef GPB_ENUM(SENGAAuthenticateConfig_FieldNumber) {
  SENGAAuthenticateConfig_FieldNumber_Audio = 1,
  SENGAAuthenticateConfig_FieldNumber_EnrollmentId = 2,
  SENGAAuthenticateConfig_FieldNumber_EnrollmentGroupId = 3,
  SENGAAuthenticateConfig_FieldNumber_DoIncludeToken = 4,
  SENGAAuthenticateConfig_FieldNumber_Sensitivity = 5,
  SENGAAuthenticateConfig_FieldNumber_Security = 6,
  SENGAAuthenticateConfig_FieldNumber_IsLivenessEnabled = 7,
  SENGAAuthenticateConfig_FieldNumber_EnrollmentToken = 8,
};

typedef GPB_ENUM(SENGAAuthenticateConfig_AuthId_OneOfCase) {
  SENGAAuthenticateConfig_AuthId_OneOfCase_GPBUnsetOneOfCase = 0,
  SENGAAuthenticateConfig_AuthId_OneOfCase_EnrollmentId = 2,
  SENGAAuthenticateConfig_AuthId_OneOfCase_EnrollmentGroupId = 3,
};

/**
 * Provides information for an audio-based authentication
 **/
GPB_FINAL @interface SENGAAuthenticateConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/** An identifier for what to authenticate against, either an individual enrollment or a group of enrollments */
@property(nonatomic, readonly) SENGAAuthenticateConfig_AuthId_OneOfCase authIdOneOfCase;

/** Unique identifier created at enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentId;

/** Unique identifier for an enrollment group */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentGroupId;

/**
 * A boolean indicating if the response should include an OAuth token for the user associated with the enrollmentId
 * The OAuth token will only be returned if the authentication is successful.
 * It's important to note there will be a minor performance hit to authentication, as OAuth token generation is a semi-expensive operation.
 **/
@property(nonatomic, readwrite) BOOL doIncludeToken;

/** The model sensitivity */
@property(nonatomic, readwrite) SENGAThresholdSensitivity sensitivity;

/** The model security */
@property(nonatomic, readwrite) SENGAAuthenticateConfig_ThresholdSecurity security;

/** Enable liveness if supported by the audio model */
@property(nonatomic, readwrite) BOOL isLivenessEnabled;

/**
 * Encrypted enrollment token that was provided on enrollment creation
 * If the server is configured to store enrollments server side, this may be left blank
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *enrollmentToken;

@end

/**
 * Fetches the raw value of a @c SENGAAuthenticateConfig's @c sensitivity property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGAAuthenticateConfig_Sensitivity_RawValue(SENGAAuthenticateConfig *message);
/**
 * Sets the raw value of an @c SENGAAuthenticateConfig's @c sensitivity property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGAAuthenticateConfig_Sensitivity_RawValue(SENGAAuthenticateConfig *message, int32_t value);

/**
 * Fetches the raw value of a @c SENGAAuthenticateConfig's @c security property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGAAuthenticateConfig_Security_RawValue(SENGAAuthenticateConfig *message);
/**
 * Sets the raw value of an @c SENGAAuthenticateConfig's @c security property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGAAuthenticateConfig_Security_RawValue(SENGAAuthenticateConfig *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'authId'.
 **/
void SENGAAuthenticateConfig_ClearAuthIdOneOfCase(SENGAAuthenticateConfig *message);

#pragma mark - SENGAValidateEventConfig

typedef GPB_ENUM(SENGAValidateEventConfig_FieldNumber) {
  SENGAValidateEventConfig_FieldNumber_Audio = 1,
  SENGAValidateEventConfig_FieldNumber_ModelName = 2,
  SENGAValidateEventConfig_FieldNumber_UserId = 3,
  SENGAValidateEventConfig_FieldNumber_Sensitivity = 4,
  SENGAValidateEventConfig_FieldNumber_TopN = 5,
};

/**
 * Provides information for an audio-based event recognition
 **/
GPB_FINAL @interface SENGAValidateEventConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/**
 * Name of model to validate against
 * Models can be retrieved from the GetModels() gRPC call
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/** The unique user Identifer */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** The model sensitivity */
@property(nonatomic, readwrite) SENGAThresholdSensitivity sensitivity;

/**
 * TopN is for the sound_id_topn model and dictates the top N most likely
 * results to return
 **/
@property(nonatomic, readwrite) int32_t topN;

@end

/**
 * Fetches the raw value of a @c SENGAValidateEventConfig's @c sensitivity property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGAValidateEventConfig_Sensitivity_RawValue(SENGAValidateEventConfig *message);
/**
 * Sets the raw value of an @c SENGAValidateEventConfig's @c sensitivity property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGAValidateEventConfig_Sensitivity_RawValue(SENGAValidateEventConfig *message, int32_t value);

#pragma mark - SENGACreateEnrollmentEventConfig

typedef GPB_ENUM(SENGACreateEnrollmentEventConfig_FieldNumber) {
  SENGACreateEnrollmentEventConfig_FieldNumber_Audio = 1,
  SENGACreateEnrollmentEventConfig_FieldNumber_UserId = 2,
  SENGACreateEnrollmentEventConfig_FieldNumber_ModelName = 3,
  SENGACreateEnrollmentEventConfig_FieldNumber_Description_p = 4,
  SENGACreateEnrollmentEventConfig_FieldNumber_EnrollmentNumUtterances = 5,
  SENGACreateEnrollmentEventConfig_FieldNumber_EnrollmentDuration = 6,
  SENGACreateEnrollmentEventConfig_FieldNumber_ReferenceId = 7,
};

typedef GPB_ENUM(SENGACreateEnrollmentEventConfig_EnrollLength_OneOfCase) {
  SENGACreateEnrollmentEventConfig_EnrollLength_OneOfCase_GPBUnsetOneOfCase = 0,
  SENGACreateEnrollmentEventConfig_EnrollLength_OneOfCase_EnrollmentNumUtterances = 5,
  SENGACreateEnrollmentEventConfig_EnrollLength_OneOfCase_EnrollmentDuration = 6,
};

GPB_FINAL @interface SENGACreateEnrollmentEventConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/** The unique user Identifer. This value should be a unique email address or username known by the user. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/**
 * Name of background model to be enrolled in
 * Background models can be retrieved from the GetModels() gRPC call
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/**
 * Description of the enrollment as entered by the user.
 * Max length is 1023 characters
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/**
 * Optional: Controls the allowed length of enrollment. Longer enrollments are generally more accurate, but take more time to perform.
 * For text-independent enrollments, enrollmentDuration may be set. For any other enrollment, enrollmentNumUtterances may be set.
 **/
@property(nonatomic, readonly) SENGACreateEnrollmentEventConfig_EnrollLength_OneOfCase enrollLengthOneOfCase;

/**
 * The number of times a specific phrase should be uttered during an enrollment.
 * The default value is 4.
 **/
@property(nonatomic, readwrite) uint32_t enrollmentNumUtterances;

/**
 * The allowed length of text-independent enrollments (such as digit liveness)
 * The default value is 12.5 seconds without liveness and 8 seconds with liveness.
 **/
@property(nonatomic, readwrite) float enrollmentDuration;

/**
 * Reference Id allows clients to assign their own identifier to enrollments for various purposes
 * such as tying an audio and video enrollment together.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *referenceId;

@end

/**
 * Clears whatever value was set for the oneof 'enrollLength'.
 **/
void SENGACreateEnrollmentEventConfig_ClearEnrollLengthOneOfCase(SENGACreateEnrollmentEventConfig *message);

#pragma mark - SENGAValidateEnrolledEventConfig

typedef GPB_ENUM(SENGAValidateEnrolledEventConfig_FieldNumber) {
  SENGAValidateEnrolledEventConfig_FieldNumber_Audio = 1,
  SENGAValidateEnrolledEventConfig_FieldNumber_EnrollmentId = 2,
  SENGAValidateEnrolledEventConfig_FieldNumber_EnrollmentGroupId = 3,
  SENGAValidateEnrolledEventConfig_FieldNumber_Sensitivity = 4,
  SENGAValidateEnrolledEventConfig_FieldNumber_EnrollmentToken = 5,
};

typedef GPB_ENUM(SENGAValidateEnrolledEventConfig_AuthId_OneOfCase) {
  SENGAValidateEnrolledEventConfig_AuthId_OneOfCase_GPBUnsetOneOfCase = 0,
  SENGAValidateEnrolledEventConfig_AuthId_OneOfCase_EnrollmentId = 2,
  SENGAValidateEnrolledEventConfig_AuthId_OneOfCase_EnrollmentGroupId = 3,
};

/**
 * Provides information for an audio-based event validation
 **/
GPB_FINAL @interface SENGAValidateEnrolledEventConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/** An identifier for what to authenticate against, either an individual enrollment or a group of enrollments */
@property(nonatomic, readonly) SENGAValidateEnrolledEventConfig_AuthId_OneOfCase authIdOneOfCase;

/** Unique identifier created at enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentId;

/** Unique identifier for an enrollment group */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentGroupId;

/** The model sensitivity */
@property(nonatomic, readwrite) SENGAThresholdSensitivity sensitivity;

/**
 * Encrypted enrollment token that was provided on enrollment creation
 * If the server is configured to store enrollments server side, this may be left blank
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *enrollmentToken;

@end

/**
 * Fetches the raw value of a @c SENGAValidateEnrolledEventConfig's @c sensitivity property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGAValidateEnrolledEventConfig_Sensitivity_RawValue(SENGAValidateEnrolledEventConfig *message);
/**
 * Sets the raw value of an @c SENGAValidateEnrolledEventConfig's @c sensitivity property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGAValidateEnrolledEventConfig_Sensitivity_RawValue(SENGAValidateEnrolledEventConfig *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'authId'.
 **/
void SENGAValidateEnrolledEventConfig_ClearAuthIdOneOfCase(SENGAValidateEnrolledEventConfig *message);

#pragma mark - SENGACustomVocabularyWords

typedef GPB_ENUM(SENGACustomVocabularyWords_FieldNumber) {
  SENGACustomVocabularyWords_FieldNumber_WordsArray = 1,
};

GPB_FINAL @interface SENGACustomVocabularyWords : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *wordsArray;
/** The number of items in @c wordsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger wordsArray_Count;

@end

#pragma mark - SENGATranscribeEventConfig

typedef GPB_ENUM(SENGATranscribeEventConfig_FieldNumber) {
  SENGATranscribeEventConfig_FieldNumber_ModelName = 1,
  SENGATranscribeEventConfig_FieldNumber_Sensitivity = 2,
};

/**
 * Provides information for an audio-based event recognition
 **/
GPB_FINAL @interface SENGATranscribeEventConfig : GPBMessage

/**
 * Name of model to validate against
 * Models can be retrieved from the GetModels() gRPC call
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/** The model sensitivity */
@property(nonatomic, readwrite) SENGAThresholdSensitivity sensitivity;

@end

/**
 * Fetches the raw value of a @c SENGATranscribeEventConfig's @c sensitivity property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGATranscribeEventConfig_Sensitivity_RawValue(SENGATranscribeEventConfig *message);
/**
 * Sets the raw value of an @c SENGATranscribeEventConfig's @c sensitivity property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGATranscribeEventConfig_Sensitivity_RawValue(SENGATranscribeEventConfig *message, int32_t value);

#pragma mark - SENGATranscribeConfig

typedef GPB_ENUM(SENGATranscribeConfig_FieldNumber) {
  SENGATranscribeConfig_FieldNumber_Audio = 1,
  SENGATranscribeConfig_FieldNumber_ModelName = 2,
  SENGATranscribeConfig_FieldNumber_UserId = 3,
  SENGATranscribeConfig_FieldNumber_EnablePunctuationCapitalization = 4,
  SENGATranscribeConfig_FieldNumber_DoSingleUtterance = 5,
  SENGATranscribeConfig_FieldNumber_VadSensitivity = 6,
  SENGATranscribeConfig_FieldNumber_VadDuration = 7,
  SENGATranscribeConfig_FieldNumber_CustomVocabRewardThreshold = 8,
  SENGATranscribeConfig_FieldNumber_CustomVocabularyId = 9,
  SENGATranscribeConfig_FieldNumber_CustomWordList = 10,
  SENGATranscribeConfig_FieldNumber_DoOfflineMode = 11,
  SENGATranscribeConfig_FieldNumber_WakeWordConfig = 12,
};

/**
 * Provides information for an audio-based transcription
 **/
GPB_FINAL @interface SENGATranscribeConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENGAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/**
 * Name of model to validate against
 * Models can be retrieved from the GetModels() gRPC call
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/** The unique user Identifer */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** A flag indicating if the transcription session should use punctuation and capitalization support */
@property(nonatomic, readwrite) BOOL enablePunctuationCapitalization;

/** If enabled, the server will automatically close the stream once the user has stopped speaking */
@property(nonatomic, readwrite) BOOL doSingleUtterance;

/**
 * How sensitive the voice activiy detector should be when single utterance mode is enabled
 * LOW is the recommended sensitivity to use
 **/
@property(nonatomic, readwrite) SENGAThresholdSensitivity vadSensitivity;

/**
 * The number of seconds of silence to detect before automatically ending the stream when single utterance mode is enabled
 * If not specified, 1 second is used by default
 **/
@property(nonatomic, readwrite) float vadDuration;

/** Custom vocabulary reward threshold */
@property(nonatomic, readwrite) SENGAThresholdSensitivity customVocabRewardThreshold;

/** the name of a custom vocabulary list stored on the server to use for this session */
@property(nonatomic, readwrite, copy, null_resettable) NSString *customVocabularyId;

/** A list of up to 100 custom vocabulary words in the form <word>, <pronunciation alternative 0>, <alternative 1> etc... */
@property(nonatomic, readwrite, strong, null_resettable) SENGACustomVocabularyWords *customWordList;
/** Test to see if @c customWordList has been set. */
@property(nonatomic, readwrite) BOOL hasCustomWordList;

/**
 * Offline mode is faster at processing large transcripts, but increases the latency in individual transcription responses.
 * This mode is not recommended when streaming audio from a microphone, and should only be used for processing audio files.
 **/
@property(nonatomic, readwrite) BOOL doOfflineMode;

/** A wakeword that must be recognized before transcription will be returned. */
@property(nonatomic, readwrite, strong, null_resettable) SENGATranscribeEventConfig *wakeWordConfig;
/** Test to see if @c wakeWordConfig has been set. */
@property(nonatomic, readwrite) BOOL hasWakeWordConfig;

@end

/**
 * Fetches the raw value of a @c SENGATranscribeConfig's @c vadSensitivity property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGATranscribeConfig_VadSensitivity_RawValue(SENGATranscribeConfig *message);
/**
 * Sets the raw value of an @c SENGATranscribeConfig's @c vadSensitivity property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGATranscribeConfig_VadSensitivity_RawValue(SENGATranscribeConfig *message, int32_t value);

/**
 * Fetches the raw value of a @c SENGATranscribeConfig's @c customVocabRewardThreshold property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGATranscribeConfig_CustomVocabRewardThreshold_RawValue(SENGATranscribeConfig *message);
/**
 * Sets the raw value of an @c SENGATranscribeConfig's @c customVocabRewardThreshold property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGATranscribeConfig_CustomVocabRewardThreshold_RawValue(SENGATranscribeConfig *message, int32_t value);

#pragma mark - SENGAAudioConfig

typedef GPB_ENUM(SENGAAudioConfig_FieldNumber) {
  SENGAAudioConfig_FieldNumber_Encoding = 1,
  SENGAAudioConfig_FieldNumber_SampleRateHertz = 2,
  SENGAAudioConfig_FieldNumber_AudioChannelCount = 3,
  SENGAAudioConfig_FieldNumber_LanguageCode = 4,
};

/**
 * Provides audio configuration information that specifies how to process the request.
 **/
GPB_FINAL @interface SENGAAudioConfig : GPBMessage

/** Encoding of all sent audio data. */
@property(nonatomic, readwrite) SENGAAudioConfig_AudioEncoding encoding;

/** Sample rate in Hertz of the audio data sent in all messages. 16000Hz is optimal. */
@property(nonatomic, readwrite) int32_t sampleRateHertz;

/** The number of channels in the input audio data. */
@property(nonatomic, readwrite) int32_t audioChannelCount;

/**
 * Required. The language of the supplied audio as a
 * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
 * Example: "en-US".
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *languageCode;

@end

/**
 * Fetches the raw value of a @c SENGAAudioConfig's @c encoding property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENGAAudioConfig_Encoding_RawValue(SENGAAudioConfig *message);
/**
 * Sets the raw value of an @c SENGAAudioConfig's @c encoding property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENGAAudioConfig_Encoding_RawValue(SENGAAudioConfig *message, int32_t value);

#pragma mark - SENGAVoiceSynthesisConfig

typedef GPB_ENUM(SENGAVoiceSynthesisConfig_FieldNumber) {
  SENGAVoiceSynthesisConfig_FieldNumber_ModelName = 2,
  SENGAVoiceSynthesisConfig_FieldNumber_SampleRateHertz = 3,
};

/**
 * Configurations for the voice synthesis model
 **/
GPB_FINAL @interface SENGAVoiceSynthesisConfig : GPBMessage

/**
 * Name of model to use for voice synthesis
 * Model can be retrieved from the GetModels() gRPC call
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/** The sample rate of the output audio file. Value should be between 8000Hz and 96000Hz */
@property(nonatomic, readwrite) int32_t sampleRateHertz;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
