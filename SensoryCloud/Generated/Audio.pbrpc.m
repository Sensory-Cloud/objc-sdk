// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: v1/audio/audio.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "Audio.pbrpc.h"
#import "Audio.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"

@implementation SENGAAudioModels

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.audio"
                 serviceName:@"AudioModels"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.audio"
                 serviceName:@"AudioModels"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark GetModels(GetModelsRequest) returns (GetModelsResponse)

/**
 * Get available models for enrollment and authentication
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getModelsWithRequest:(SENGAGetModelsRequest *)request handler:(void(^)(SENGAGetModelsResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetModelsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Get available models for enrollment and authentication
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetModelsWithRequest:(SENGAGetModelsRequest *)request handler:(void(^)(SENGAGetModelsResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetModels"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENGAGetModelsResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Get available models for enrollment and authentication
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)getModelsWithMessage:(SENGAGetModelsRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetModels"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGAGetModelsResponse class]];
}

@end
@implementation SENGAAudioBiometrics

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.audio"
                 serviceName:@"AudioBiometrics"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.audio"
                 serviceName:@"AudioBiometrics"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark CreateEnrollment(stream CreateEnrollmentRequest) returns (stream CreateEnrollmentResponse)

/**
 * Enrolls a user with a stream of audio. Streams a CreateEnrollmentResponse as the audio is processed.
 * CreateEnrollment only supports biometric-enabled models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)createEnrollmentWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGACreateEnrollmentResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToCreateEnrollmentWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Enrolls a user with a stream of audio. Streams a CreateEnrollmentResponse as the audio is processed.
 * CreateEnrollment only supports biometric-enabled models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToCreateEnrollmentWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGACreateEnrollmentResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"CreateEnrollment"
            requestsWriter:requestWriter
             responseClass:[SENGACreateEnrollmentResponse class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Enrolls a user with a stream of audio. Streams a CreateEnrollmentResponse as the audio is processed.
 * CreateEnrollment only supports biometric-enabled models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCStreamingProtoCall *)createEnrollmentWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"CreateEnrollment"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGACreateEnrollmentResponse class]];
}

#pragma mark Authenticate(stream AuthenticateRequest) returns (stream AuthenticateResponse)

/**
 * Authenticates a user with a stream of audio against an existing enrollment.
 * Streams an AuthenticateResponse as the audio is processed.
 * Authenticate only supports biometric-enabled models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)authenticateWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGAAuthenticateResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToAuthenticateWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Authenticates a user with a stream of audio against an existing enrollment.
 * Streams an AuthenticateResponse as the audio is processed.
 * Authenticate only supports biometric-enabled models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToAuthenticateWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGAAuthenticateResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"Authenticate"
            requestsWriter:requestWriter
             responseClass:[SENGAAuthenticateResponse class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Authenticates a user with a stream of audio against an existing enrollment.
 * Streams an AuthenticateResponse as the audio is processed.
 * Authenticate only supports biometric-enabled models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCStreamingProtoCall *)authenticateWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Authenticate"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGAAuthenticateResponse class]];
}

@end
@implementation SENGAAudioEvents

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.audio"
                 serviceName:@"AudioEvents"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.audio"
                 serviceName:@"AudioEvents"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark ValidateEvent(stream ValidateEventRequest) returns (stream ValidateEventResponse)

/**
 * Validates a phrase or sound with a stream of audio.
 * Streams a ValidateEventResponse as the audio is processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)validateEventWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGAValidateEventResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToValidateEventWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Validates a phrase or sound with a stream of audio.
 * Streams a ValidateEventResponse as the audio is processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToValidateEventWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGAValidateEventResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"ValidateEvent"
            requestsWriter:requestWriter
             responseClass:[SENGAValidateEventResponse class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Validates a phrase or sound with a stream of audio.
 * Streams a ValidateEventResponse as the audio is processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCStreamingProtoCall *)validateEventWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ValidateEvent"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGAValidateEventResponse class]];
}

#pragma mark CreateEnrolledEvent(stream CreateEnrolledEventRequest) returns (stream CreateEnrollmentResponse)

/**
 * Enrolls a sound or voice. Streams a CreateEnrollmentResponse as the audio is processed.
 * CreateEnrollment supports all enrollable models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)createEnrolledEventWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGACreateEnrollmentResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToCreateEnrolledEventWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Enrolls a sound or voice. Streams a CreateEnrollmentResponse as the audio is processed.
 * CreateEnrollment supports all enrollable models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToCreateEnrolledEventWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGACreateEnrollmentResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"CreateEnrolledEvent"
            requestsWriter:requestWriter
             responseClass:[SENGACreateEnrollmentResponse class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Enrolls a sound or voice. Streams a CreateEnrollmentResponse as the audio is processed.
 * CreateEnrollment supports all enrollable models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCStreamingProtoCall *)createEnrolledEventWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"CreateEnrolledEvent"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGACreateEnrollmentResponse class]];
}

#pragma mark ValidateEnrolledEvent(stream ValidateEnrolledEventRequest) returns (stream ValidateEnrolledEventResponse)

/**
 * Authenticates a sound or voice. Streams a ValidateEventResponse as the audio is processed.
 * ValidateEnrolledEvent supports all enrollable models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)validateEnrolledEventWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGAValidateEnrolledEventResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToValidateEnrolledEventWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Authenticates a sound or voice. Streams a ValidateEventResponse as the audio is processed.
 * ValidateEnrolledEvent supports all enrollable models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToValidateEnrolledEventWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGAValidateEnrolledEventResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"ValidateEnrolledEvent"
            requestsWriter:requestWriter
             responseClass:[SENGAValidateEnrolledEventResponse class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Authenticates a sound or voice. Streams a ValidateEventResponse as the audio is processed.
 * ValidateEnrolledEvent supports all enrollable models
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCStreamingProtoCall *)validateEnrolledEventWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ValidateEnrolledEvent"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGAValidateEnrolledEventResponse class]];
}

@end
@implementation SENGAAudioTranscriptions

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.audio"
                 serviceName:@"AudioTranscriptions"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.audio"
                 serviceName:@"AudioTranscriptions"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark Transcribe(stream TranscribeRequest) returns (stream TranscribeResponse)

/**
 * Transcribes voice into text.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)transcribeWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGATranscribeResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToTranscribeWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Transcribes voice into text.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToTranscribeWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGATranscribeResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"Transcribe"
            requestsWriter:requestWriter
             responseClass:[SENGATranscribeResponse class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Transcribes voice into text.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCStreamingProtoCall *)transcribeWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Transcribe"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGATranscribeResponse class]];
}

@end
@implementation SENGAAudioSynthesis

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.audio"
                 serviceName:@"AudioSynthesis"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.audio"
                 serviceName:@"AudioSynthesis"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark SynthesizeSpeech(SynthesizeSpeechRequest) returns (stream SynthesizeSpeechResponse)

/**
 * Synthesizes speech from text
 * Authorization metadata is required {"authorization": "Bearer <TOKNE>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)synthesizeSpeechWithRequest:(SENGASynthesizeSpeechRequest *)request eventHandler:(void(^)(BOOL done, SENGASynthesizeSpeechResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToSynthesizeSpeechWithRequest:request eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Synthesizes speech from text
 * Authorization metadata is required {"authorization": "Bearer <TOKNE>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToSynthesizeSpeechWithRequest:(SENGASynthesizeSpeechRequest *)request eventHandler:(void(^)(BOOL done, SENGASynthesizeSpeechResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"SynthesizeSpeech"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENGASynthesizeSpeechResponse class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Synthesizes speech from text
 * Authorization metadata is required {"authorization": "Bearer <TOKNE>"}
 */
- (GRPCUnaryProtoCall *)synthesizeSpeechWithMessage:(SENGASynthesizeSpeechRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"SynthesizeSpeech"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGASynthesizeSpeechResponse class]];
}

@end
#endif
