// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/video/video.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Video.pbobjc.h"
#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(SENGCompressionConfiguration);
GPBObjCClassDeclaration(SENGEnrollmentToken);
GPBObjCClassDeclaration(SENGTokenResponse);
GPBObjCClassDeclaration(SENGVAuthenticateConfig);
GPBObjCClassDeclaration(SENGVCreateEnrollmentConfig);
GPBObjCClassDeclaration(SENGVValidateRecognitionConfig);
GPBObjCClassDeclaration(SENGVVideoModel);

#pragma mark - SENGVVideoRoot

@implementation SENGVVideoRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[ValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SENGVVideoRoot_FileDescriptor

static GPBFileDescriptor *SENGVVideoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sensory.api.v1.video"
                                                 objcPrefix:@"SENGV"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SENGVRecognitionThreshold

GPBEnumDescriptor *SENGVRecognitionThreshold_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Low\000Medium\000High\000Highest\000";
    static const int32_t values[] = {
        SENGVRecognitionThreshold_Low,
        SENGVRecognitionThreshold_Medium,
        SENGVRecognitionThreshold_High,
        SENGVRecognitionThreshold_Highest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENGVRecognitionThreshold)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENGVRecognitionThreshold_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENGVRecognitionThreshold_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENGVRecognitionThreshold_Low:
    case SENGVRecognitionThreshold_Medium:
    case SENGVRecognitionThreshold_High:
    case SENGVRecognitionThreshold_Highest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENGVVideoModel

@implementation SENGVVideoModel

@dynamic name;
@dynamic isEnrollable;
@dynamic modelType;
@dynamic fixedObject;
@dynamic versionsArray, versionsArray_Count;
@dynamic technology;
@dynamic isLivenessSupported;

typedef struct SENGVVideoModel__storage_ {
  uint32_t _has_storage_[1];
  SENGModelType modelType;
  SENGTechnologyType technology;
  NSString *name;
  NSString *fixedObject;
  NSMutableArray *versionsArray;
} SENGVVideoModel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVVideoModel_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGVVideoModel__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isEnrollable",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVVideoModel_FieldNumber_IsEnrollable,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "modelType",
        .dataTypeSpecific.enumDescFunc = SENGModelType_EnumDescriptor,
        .number = SENGVVideoModel_FieldNumber_ModelType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGVVideoModel__storage_, modelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fixedObject",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVVideoModel_FieldNumber_FixedObject,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGVVideoModel__storage_, fixedObject),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "versionsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVVideoModel_FieldNumber_VersionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGVVideoModel__storage_, versionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "technology",
        .dataTypeSpecific.enumDescFunc = SENGTechnologyType_EnumDescriptor,
        .number = SENGVVideoModel_FieldNumber_Technology,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGVVideoModel__storage_, technology),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isLivenessSupported",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVVideoModel_FieldNumber_IsLivenessSupported,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVVideoModel class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVVideoModel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\014\000\003\t\000\004\013\000\007\023\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGVVideoModel_ModelType_RawValue(SENGVVideoModel *message) {
  GPBDescriptor *descriptor = [SENGVVideoModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVVideoModel_FieldNumber_ModelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGVVideoModel_ModelType_RawValue(SENGVVideoModel *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGVVideoModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVVideoModel_FieldNumber_ModelType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SENGVVideoModel_Technology_RawValue(SENGVVideoModel *message) {
  GPBDescriptor *descriptor = [SENGVVideoModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVVideoModel_FieldNumber_Technology];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGVVideoModel_Technology_RawValue(SENGVVideoModel *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGVVideoModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVVideoModel_FieldNumber_Technology];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENGVGetModelsRequest

@implementation SENGVGetModelsRequest


typedef struct SENGVGetModelsRequest__storage_ {
  uint32_t _has_storage_[1];
} SENGVGetModelsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVGetModelsRequest class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SENGVGetModelsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGVGetModelsResponse

@implementation SENGVGetModelsResponse

@dynamic modelsArray, modelsArray_Count;

typedef struct SENGVGetModelsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *modelsArray;
} SENGVGetModelsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGVVideoModel),
        .number = SENGVGetModelsResponse_FieldNumber_ModelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGVGetModelsResponse__storage_, modelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVGetModelsResponse class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVGetModelsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGVCreateEnrollmentRequest

@implementation SENGVCreateEnrollmentRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic imageContent;

typedef struct SENGVCreateEnrollmentRequest__storage_ {
  uint32_t _has_storage_[2];
  SENGVCreateEnrollmentConfig *config;
  NSData *imageContent;
} SENGVCreateEnrollmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGVCreateEnrollmentConfig),
        .number = SENGVCreateEnrollmentRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imageContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentRequest_FieldNumber_ImageContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentRequest__storage_, imageContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVCreateEnrollmentRequest class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVCreateEnrollmentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGVCreateEnrollmentRequest_ClearStreamingRequestOneOfCase(SENGVCreateEnrollmentRequest *message) {
  GPBDescriptor *descriptor = [SENGVCreateEnrollmentRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGVAuthenticateRequest

@implementation SENGVAuthenticateRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic imageContent;

typedef struct SENGVAuthenticateRequest__storage_ {
  uint32_t _has_storage_[2];
  SENGVAuthenticateConfig *config;
  NSData *imageContent;
} SENGVAuthenticateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGVAuthenticateConfig),
        .number = SENGVAuthenticateRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGVAuthenticateRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imageContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVAuthenticateRequest_FieldNumber_ImageContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGVAuthenticateRequest__storage_, imageContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVAuthenticateRequest class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVAuthenticateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGVAuthenticateRequest_ClearStreamingRequestOneOfCase(SENGVAuthenticateRequest *message) {
  GPBDescriptor *descriptor = [SENGVAuthenticateRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGVValidateRecognitionRequest

@implementation SENGVValidateRecognitionRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic imageContent;

typedef struct SENGVValidateRecognitionRequest__storage_ {
  uint32_t _has_storage_[2];
  SENGVValidateRecognitionConfig *config;
  NSData *imageContent;
} SENGVValidateRecognitionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGVValidateRecognitionConfig),
        .number = SENGVValidateRecognitionRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGVValidateRecognitionRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imageContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVValidateRecognitionRequest_FieldNumber_ImageContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGVValidateRecognitionRequest__storage_, imageContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVValidateRecognitionRequest class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVValidateRecognitionRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGVValidateRecognitionRequest_ClearStreamingRequestOneOfCase(SENGVValidateRecognitionRequest *message) {
  GPBDescriptor *descriptor = [SENGVValidateRecognitionRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGVCreateEnrollmentResponse

@implementation SENGVCreateEnrollmentResponse

@dynamic percentComplete;
@dynamic isAlive;
@dynamic enrollmentId;
@dynamic modelName;
@dynamic modelVersion;
@dynamic score;
@dynamic hasEnrollmentToken, enrollmentToken;

typedef struct SENGVCreateEnrollmentResponse__storage_ {
  uint32_t _has_storage_[1];
  float score;
  NSString *enrollmentId;
  NSString *modelName;
  NSString *modelVersion;
  SENGEnrollmentToken *enrollmentToken;
  int64_t percentComplete;
} SENGVCreateEnrollmentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "percentComplete",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentResponse_FieldNumber_PercentComplete,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentResponse__storage_, percentComplete),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isAlive",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentResponse_FieldNumber_IsAlive,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentResponse_FieldNumber_EnrollmentId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentResponse__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentResponse_FieldNumber_ModelName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentResponse__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentResponse_FieldNumber_ModelVersion,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentResponse__storage_, modelVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentResponse_FieldNumber_Score,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentResponse__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "enrollmentToken",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGEnrollmentToken),
        .number = SENGVCreateEnrollmentResponse_FieldNumber_EnrollmentToken,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentResponse__storage_, enrollmentToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVCreateEnrollmentResponse class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVCreateEnrollmentResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\017\000\002\007\000\003\014\000\004\t\000\005\014\000\007\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGVAuthenticateResponse

@implementation SENGVAuthenticateResponse

@dynamic success;
@dynamic score;
@dynamic isAlive;
@dynamic hasToken, token;
@dynamic userId;
@dynamic enrollmentId;

typedef struct SENGVAuthenticateResponse__storage_ {
  uint32_t _has_storage_[1];
  float score;
  SENGTokenResponse *token;
  NSString *userId;
  NSString *enrollmentId;
} SENGVAuthenticateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVAuthenticateResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "score",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVAuthenticateResponse_FieldNumber_Score,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGVAuthenticateResponse__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "isAlive",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVAuthenticateResponse_FieldNumber_IsAlive,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGTokenResponse),
        .number = SENGVAuthenticateResponse_FieldNumber_Token,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGVAuthenticateResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVAuthenticateResponse_FieldNumber_UserId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENGVAuthenticateResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVAuthenticateResponse_FieldNumber_EnrollmentId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENGVAuthenticateResponse__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVAuthenticateResponse class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVAuthenticateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\007\000\005\006\000\006\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGVLivenessRecognitionResponse

@implementation SENGVLivenessRecognitionResponse

@dynamic isAlive;
@dynamic score;

typedef struct SENGVLivenessRecognitionResponse__storage_ {
  uint32_t _has_storage_[1];
  float score;
} SENGVLivenessRecognitionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isAlive",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVLivenessRecognitionResponse_FieldNumber_IsAlive,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "score",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVLivenessRecognitionResponse_FieldNumber_Score,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGVLivenessRecognitionResponse__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVLivenessRecognitionResponse class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVLivenessRecognitionResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGVCreateEnrollmentConfig

@implementation SENGVCreateEnrollmentConfig

@dynamic userId;
@dynamic deviceId;
@dynamic modelName;
@dynamic description_p;
@dynamic isLivenessEnabled;
@dynamic livenessThreshold;
@dynamic hasCompression, compression;
@dynamic referenceId;
@dynamic numLivenessFramesRequired;
@dynamic disableServerEnrollmentTemplateStorage;

typedef struct SENGVCreateEnrollmentConfig__storage_ {
  uint32_t _has_storage_[1];
  SENGVRecognitionThreshold livenessThreshold;
  int32_t numLivenessFramesRequired;
  NSString *userId;
  NSString *deviceId;
  NSString *modelName;
  NSString *description_p;
  SENGCompressionConfiguration *compression;
  NSString *referenceId;
} SENGVCreateEnrollmentConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentConfig_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentConfig_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentConfig__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentConfig_FieldNumber_ModelName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentConfig_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentConfig__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isLivenessEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentConfig_FieldNumber_IsLivenessEnabled,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "livenessThreshold",
        .dataTypeSpecific.enumDescFunc = SENGVRecognitionThreshold_EnumDescriptor,
        .number = SENGVCreateEnrollmentConfig_FieldNumber_LivenessThreshold,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentConfig__storage_, livenessThreshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "compression",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGCompressionConfiguration),
        .number = SENGVCreateEnrollmentConfig_FieldNumber_Compression,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentConfig__storage_, compression),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "referenceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentConfig_FieldNumber_ReferenceId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentConfig__storage_, referenceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "numLivenessFramesRequired",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentConfig_FieldNumber_NumLivenessFramesRequired,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SENGVCreateEnrollmentConfig__storage_, numLivenessFramesRequired),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "disableServerEnrollmentTemplateStorage",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVCreateEnrollmentConfig_FieldNumber_DisableServerEnrollmentTemplateStorage,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVCreateEnrollmentConfig class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVCreateEnrollmentConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\006\000\002\010\000\003\t\000\005\021\000\006\021\000\010\013\000\t\031\000\n\037\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGVCreateEnrollmentConfig_LivenessThreshold_RawValue(SENGVCreateEnrollmentConfig *message) {
  GPBDescriptor *descriptor = [SENGVCreateEnrollmentConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVCreateEnrollmentConfig_FieldNumber_LivenessThreshold];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGVCreateEnrollmentConfig_LivenessThreshold_RawValue(SENGVCreateEnrollmentConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGVCreateEnrollmentConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVCreateEnrollmentConfig_FieldNumber_LivenessThreshold];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENGVAuthenticateConfig

@implementation SENGVAuthenticateConfig

@dynamic authIdOneOfCase;
@dynamic enrollmentId;
@dynamic enrollmentGroupId;
@dynamic isLivenessEnabled;
@dynamic livenessThreshold;
@dynamic hasCompression, compression;
@dynamic doIncludeToken;
@dynamic enrollmentToken;

typedef struct SENGVAuthenticateConfig__storage_ {
  uint32_t _has_storage_[2];
  SENGVRecognitionThreshold livenessThreshold;
  NSString *enrollmentId;
  NSString *enrollmentGroupId;
  SENGCompressionConfiguration *compression;
  NSData *enrollmentToken;
} SENGVAuthenticateConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVAuthenticateConfig_FieldNumber_EnrollmentId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGVAuthenticateConfig__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentGroupId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVAuthenticateConfig_FieldNumber_EnrollmentGroupId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGVAuthenticateConfig__storage_, enrollmentGroupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isLivenessEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVAuthenticateConfig_FieldNumber_IsLivenessEnabled,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "livenessThreshold",
        .dataTypeSpecific.enumDescFunc = SENGVRecognitionThreshold_EnumDescriptor,
        .number = SENGVAuthenticateConfig_FieldNumber_LivenessThreshold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGVAuthenticateConfig__storage_, livenessThreshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "compression",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGCompressionConfiguration),
        .number = SENGVAuthenticateConfig_FieldNumber_Compression,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGVAuthenticateConfig__storage_, compression),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "doIncludeToken",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVAuthenticateConfig_FieldNumber_DoIncludeToken,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enrollmentToken",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVAuthenticateConfig_FieldNumber_EnrollmentToken,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENGVAuthenticateConfig__storage_, enrollmentToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVAuthenticateConfig class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVAuthenticateConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "authId",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\014\000\002\021\000\003\021\000\004\021\000\006\016\000\007\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGVAuthenticateConfig_LivenessThreshold_RawValue(SENGVAuthenticateConfig *message) {
  GPBDescriptor *descriptor = [SENGVAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVAuthenticateConfig_FieldNumber_LivenessThreshold];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGVAuthenticateConfig_LivenessThreshold_RawValue(SENGVAuthenticateConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGVAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVAuthenticateConfig_FieldNumber_LivenessThreshold];
  GPBSetMessageRawEnumField(message, field, value);
}

void SENGVAuthenticateConfig_ClearAuthIdOneOfCase(SENGVAuthenticateConfig *message) {
  GPBDescriptor *descriptor = [SENGVAuthenticateConfig descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGVValidateRecognitionConfig

@implementation SENGVValidateRecognitionConfig

@dynamic modelName;
@dynamic userId;
@dynamic threshold;

typedef struct SENGVValidateRecognitionConfig__storage_ {
  uint32_t _has_storage_[1];
  SENGVRecognitionThreshold threshold;
  NSString *modelName;
  NSString *userId;
} SENGVValidateRecognitionConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVValidateRecognitionConfig_FieldNumber_ModelName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGVValidateRecognitionConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVValidateRecognitionConfig_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGVValidateRecognitionConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "threshold",
        .dataTypeSpecific.enumDescFunc = SENGVRecognitionThreshold_EnumDescriptor,
        .number = SENGVValidateRecognitionConfig_FieldNumber_Threshold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGVValidateRecognitionConfig__storage_, threshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVValidateRecognitionConfig class]
                                     rootClass:[SENGVVideoRoot class]
                                          file:SENGVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVValidateRecognitionConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGVValidateRecognitionConfig_Threshold_RawValue(SENGVValidateRecognitionConfig *message) {
  GPBDescriptor *descriptor = [SENGVValidateRecognitionConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVValidateRecognitionConfig_FieldNumber_Threshold];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGVValidateRecognitionConfig_Threshold_RawValue(SENGVValidateRecognitionConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGVValidateRecognitionConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVValidateRecognitionConfig_FieldNumber_Threshold];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
