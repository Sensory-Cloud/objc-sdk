// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: v1/video/video.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "Video.pbrpc.h"
#import "Video.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"

@implementation SENGVVideoModels

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.video"
                 serviceName:@"VideoModels"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.video"
                 serviceName:@"VideoModels"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark GetModels(GetModelsRequest) returns (GetModelsResponse)

/**
 * Get available models for enrollment and authentication
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getModelsWithRequest:(SENGVGetModelsRequest *)request handler:(void(^)(SENGVGetModelsResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetModelsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Get available models for enrollment and authentication
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetModelsWithRequest:(SENGVGetModelsRequest *)request handler:(void(^)(SENGVGetModelsResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetModels"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENGVGetModelsResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Get available models for enrollment and authentication
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)getModelsWithMessage:(SENGVGetModelsRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetModels"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGVGetModelsResponse class]];
}

@end
@implementation SENGVVideoBiometrics

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.video"
                 serviceName:@"VideoBiometrics"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.video"
                 serviceName:@"VideoBiometrics"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark CreateEnrollment(stream CreateEnrollmentRequest) returns (stream CreateEnrollmentResponse)

/**
 * Enrolls a user with a stream of video. Streams a CreateEnrollmentResponse
 * as the video is processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)createEnrollmentWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGVCreateEnrollmentResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToCreateEnrollmentWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Enrolls a user with a stream of video. Streams a CreateEnrollmentResponse
 * as the video is processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToCreateEnrollmentWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGVCreateEnrollmentResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"CreateEnrollment"
            requestsWriter:requestWriter
             responseClass:[SENGVCreateEnrollmentResponse class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Enrolls a user with a stream of video. Streams a CreateEnrollmentResponse
 * as the video is processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCStreamingProtoCall *)createEnrollmentWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"CreateEnrollment"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGVCreateEnrollmentResponse class]];
}

#pragma mark Authenticate(stream AuthenticateRequest) returns (stream AuthenticateResponse)

/**
 * Authenticates a user with a stream of video against an existing enrollment.
 * Streams an AuthenticateResponse as the video is processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)authenticateWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGVAuthenticateResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToAuthenticateWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Authenticates a user with a stream of video against an existing enrollment.
 * Streams an AuthenticateResponse as the video is processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToAuthenticateWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGVAuthenticateResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"Authenticate"
            requestsWriter:requestWriter
             responseClass:[SENGVAuthenticateResponse class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Authenticates a user with a stream of video against an existing enrollment.
 * Streams an AuthenticateResponse as the video is processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCStreamingProtoCall *)authenticateWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Authenticate"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGVAuthenticateResponse class]];
}

@end
@implementation SENGVVideoRecognition

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.video"
                 serviceName:@"VideoRecognition"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.video"
                 serviceName:@"VideoRecognition"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark ValidateLiveness(stream ValidateRecognitionRequest) returns (stream LivenessRecognitionResponse)

/**
 * Validates the liveness of a single image or stream of images.
 * Streams a ValidateRecognitionResponse as the images are processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)validateLivenessWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGVLivenessRecognitionResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToValidateLivenessWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Validates the liveness of a single image or stream of images.
 * Streams a ValidateRecognitionResponse as the images are processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToValidateLivenessWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, SENGVLivenessRecognitionResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"ValidateLiveness"
            requestsWriter:requestWriter
             responseClass:[SENGVLivenessRecognitionResponse class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Validates the liveness of a single image or stream of images.
 * Streams a ValidateRecognitionResponse as the images are processed.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCStreamingProtoCall *)validateLivenessWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ValidateLiveness"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGVLivenessRecognitionResponse class]];
}

@end
#endif
