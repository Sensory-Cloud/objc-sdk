// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/audio/audio.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Audio.pbobjc.h"
#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(SENGAAudioConfig);
GPBObjCClassDeclaration(SENGAAudioModel);
GPBObjCClassDeclaration(SENGAAudioRequestPostProcessingAction);
GPBObjCClassDeclaration(SENGAAudioResponsePostProcessingAction);
GPBObjCClassDeclaration(SENGAAuthenticateConfig);
GPBObjCClassDeclaration(SENGACreateEnrollmentConfig);
GPBObjCClassDeclaration(SENGACreateEnrollmentEventConfig);
GPBObjCClassDeclaration(SENGACustomVocabularyWords);
GPBObjCClassDeclaration(SENGATranscribeConfig);
GPBObjCClassDeclaration(SENGATranscribeWord);
GPBObjCClassDeclaration(SENGATranscribeWordResponse);
GPBObjCClassDeclaration(SENGAValidateEnrolledEventConfig);
GPBObjCClassDeclaration(SENGAValidateEventConfig);
GPBObjCClassDeclaration(SENGAVoiceSynthesisConfig);
GPBObjCClassDeclaration(SENGEnrollmentToken);
GPBObjCClassDeclaration(SENGTokenResponse);

#pragma mark - SENGAAudioRoot

@implementation SENGAAudioRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[ValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SENGAAudioRoot_FileDescriptor

static GPBFileDescriptor *SENGAAudioRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sensory.api.v1.audio"
                                                 objcPrefix:@"SENGA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SENGAAudioPostProcessingAction

GPBEnumDescriptor *SENGAAudioPostProcessingAction_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NotSet\000Flush\000Reset\000Final\000";
    static const int32_t values[] = {
        SENGAAudioPostProcessingAction_NotSet,
        SENGAAudioPostProcessingAction_Flush,
        SENGAAudioPostProcessingAction_Reset,
        SENGAAudioPostProcessingAction_Final,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENGAAudioPostProcessingAction)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENGAAudioPostProcessingAction_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENGAAudioPostProcessingAction_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENGAAudioPostProcessingAction_NotSet:
    case SENGAAudioPostProcessingAction_Flush:
    case SENGAAudioPostProcessingAction_Reset:
    case SENGAAudioPostProcessingAction_Final:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SENGAWordState

GPBEnumDescriptor *SENGAWordState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WordstatePending\000WordstateFinal\000";
    static const int32_t values[] = {
        SENGAWordState_WordstatePending,
        SENGAWordState_WordstateFinal,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENGAWordState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENGAWordState_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENGAWordState_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENGAWordState_WordstatePending:
    case SENGAWordState_WordstateFinal:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SENGAThresholdSensitivity

GPBEnumDescriptor *SENGAThresholdSensitivity_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Lowest\000Low\000Medium\000High\000Highest\000";
    static const int32_t values[] = {
        SENGAThresholdSensitivity_Lowest,
        SENGAThresholdSensitivity_Low,
        SENGAThresholdSensitivity_Medium,
        SENGAThresholdSensitivity_High,
        SENGAThresholdSensitivity_Highest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENGAThresholdSensitivity)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENGAThresholdSensitivity_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENGAThresholdSensitivity_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENGAThresholdSensitivity_Lowest:
    case SENGAThresholdSensitivity_Low:
    case SENGAThresholdSensitivity_Medium:
    case SENGAThresholdSensitivity_High:
    case SENGAThresholdSensitivity_Highest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENGAGetModelsRequest

@implementation SENGAGetModelsRequest


typedef struct SENGAGetModelsRequest__storage_ {
  uint32_t _has_storage_[1];
} SENGAGetModelsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAGetModelsRequest class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SENGAGetModelsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGAAudioModel

@implementation SENGAAudioModel

@dynamic name;
@dynamic isEnrollable;
@dynamic modelType;
@dynamic fixedPhrase;
@dynamic sampleRate;
@dynamic versionsArray, versionsArray_Count;
@dynamic technology;
@dynamic isLivenessSupported;

typedef struct SENGAAudioModel__storage_ {
  uint32_t _has_storage_[1];
  SENGModelType modelType;
  int32_t sampleRate;
  SENGTechnologyType technology;
  NSString *name;
  NSString *fixedPhrase;
  NSMutableArray *versionsArray;
} SENGAAudioModel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAudioModel_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAAudioModel__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isEnrollable",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAudioModel_FieldNumber_IsEnrollable,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "modelType",
        .dataTypeSpecific.enumDescFunc = SENGModelType_EnumDescriptor,
        .number = SENGAAudioModel_FieldNumber_ModelType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGAAudioModel__storage_, modelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fixedPhrase",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAudioModel_FieldNumber_FixedPhrase,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGAAudioModel__storage_, fixedPhrase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sampleRate",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAudioModel_FieldNumber_SampleRate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGAAudioModel__storage_, sampleRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "versionsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAudioModel_FieldNumber_VersionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGAAudioModel__storage_, versionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "technology",
        .dataTypeSpecific.enumDescFunc = SENGTechnologyType_EnumDescriptor,
        .number = SENGAAudioModel_FieldNumber_Technology,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENGAAudioModel__storage_, technology),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isLivenessSupported",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAudioModel_FieldNumber_IsLivenessSupported,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAAudioModel class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAAudioModel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\014\000\003\t\000\004\013\000\005\n\000\010\023\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGAAudioModel_ModelType_RawValue(SENGAAudioModel *message) {
  GPBDescriptor *descriptor = [SENGAAudioModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAudioModel_FieldNumber_ModelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGAAudioModel_ModelType_RawValue(SENGAAudioModel *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGAAudioModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAudioModel_FieldNumber_ModelType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SENGAAudioModel_Technology_RawValue(SENGAAudioModel *message) {
  GPBDescriptor *descriptor = [SENGAAudioModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAudioModel_FieldNumber_Technology];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGAAudioModel_Technology_RawValue(SENGAAudioModel *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGAAudioModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAudioModel_FieldNumber_Technology];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENGAAudioRequestPostProcessingAction

@implementation SENGAAudioRequestPostProcessingAction

@dynamic actionId;
@dynamic action;

typedef struct SENGAAudioRequestPostProcessingAction__storage_ {
  uint32_t _has_storage_[1];
  SENGAAudioPostProcessingAction action;
  NSString *actionId;
} SENGAAudioRequestPostProcessingAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actionId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAudioRequestPostProcessingAction_FieldNumber_ActionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAAudioRequestPostProcessingAction__storage_, actionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = SENGAAudioPostProcessingAction_EnumDescriptor,
        .number = SENGAAudioRequestPostProcessingAction_FieldNumber_Action,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGAAudioRequestPostProcessingAction__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAAudioRequestPostProcessingAction class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAAudioRequestPostProcessingAction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGAAudioRequestPostProcessingAction_Action_RawValue(SENGAAudioRequestPostProcessingAction *message) {
  GPBDescriptor *descriptor = [SENGAAudioRequestPostProcessingAction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAudioRequestPostProcessingAction_FieldNumber_Action];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGAAudioRequestPostProcessingAction_Action_RawValue(SENGAAudioRequestPostProcessingAction *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGAAudioRequestPostProcessingAction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAudioRequestPostProcessingAction_FieldNumber_Action];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENGAAudioResponsePostProcessingAction

@implementation SENGAAudioResponsePostProcessingAction

@dynamic actionId;
@dynamic action;

typedef struct SENGAAudioResponsePostProcessingAction__storage_ {
  uint32_t _has_storage_[1];
  SENGAAudioPostProcessingAction action;
  NSString *actionId;
} SENGAAudioResponsePostProcessingAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actionId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAudioResponsePostProcessingAction_FieldNumber_ActionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAAudioResponsePostProcessingAction__storage_, actionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = SENGAAudioPostProcessingAction_EnumDescriptor,
        .number = SENGAAudioResponsePostProcessingAction_FieldNumber_Action,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGAAudioResponsePostProcessingAction__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAAudioResponsePostProcessingAction class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAAudioResponsePostProcessingAction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGAAudioResponsePostProcessingAction_Action_RawValue(SENGAAudioResponsePostProcessingAction *message) {
  GPBDescriptor *descriptor = [SENGAAudioResponsePostProcessingAction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAudioResponsePostProcessingAction_FieldNumber_Action];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGAAudioResponsePostProcessingAction_Action_RawValue(SENGAAudioResponsePostProcessingAction *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGAAudioResponsePostProcessingAction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAudioResponsePostProcessingAction_FieldNumber_Action];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENGAGetModelsResponse

@implementation SENGAGetModelsResponse

@dynamic modelsArray, modelsArray_Count;

typedef struct SENGAGetModelsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *modelsArray;
} SENGAGetModelsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioModel),
        .number = SENGAGetModelsResponse_FieldNumber_ModelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGAGetModelsResponse__storage_, modelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAGetModelsResponse class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAGetModelsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGACreateEnrollmentRequest

@implementation SENGACreateEnrollmentRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;

typedef struct SENGACreateEnrollmentRequest__storage_ {
  uint32_t _has_storage_[2];
  SENGACreateEnrollmentConfig *config;
  NSData *audioContent;
} SENGACreateEnrollmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGACreateEnrollmentConfig),
        .number = SENGACreateEnrollmentRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGACreateEnrollmentRequest class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGACreateEnrollmentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGACreateEnrollmentRequest_ClearStreamingRequestOneOfCase(SENGACreateEnrollmentRequest *message) {
  GPBDescriptor *descriptor = [SENGACreateEnrollmentRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGAAuthenticateRequest

@implementation SENGAAuthenticateRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;

typedef struct SENGAAuthenticateRequest__storage_ {
  uint32_t _has_storage_[2];
  SENGAAuthenticateConfig *config;
  NSData *audioContent;
} SENGAAuthenticateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAuthenticateConfig),
        .number = SENGAAuthenticateRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGAAuthenticateRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGAAuthenticateRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAAuthenticateRequest class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAAuthenticateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGAAuthenticateRequest_ClearStreamingRequestOneOfCase(SENGAAuthenticateRequest *message) {
  GPBDescriptor *descriptor = [SENGAAuthenticateRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGAValidateEventRequest

@implementation SENGAValidateEventRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;
@dynamic hasPostProcessingAction, postProcessingAction;

typedef struct SENGAValidateEventRequest__storage_ {
  uint32_t _has_storage_[2];
  SENGAValidateEventConfig *config;
  NSData *audioContent;
  SENGAAudioRequestPostProcessingAction *postProcessingAction;
} SENGAValidateEventRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAValidateEventConfig),
        .number = SENGAValidateEventRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGAValidateEventRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEventRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGAValidateEventRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "postProcessingAction",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioRequestPostProcessingAction),
        .number = SENGAValidateEventRequest_FieldNumber_PostProcessingAction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAValidateEventRequest__storage_, postProcessingAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAValidateEventRequest class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAValidateEventRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\014\000\n\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGAValidateEventRequest_ClearStreamingRequestOneOfCase(SENGAValidateEventRequest *message) {
  GPBDescriptor *descriptor = [SENGAValidateEventRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGACreateEnrolledEventRequest

@implementation SENGACreateEnrolledEventRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;

typedef struct SENGACreateEnrolledEventRequest__storage_ {
  uint32_t _has_storage_[2];
  SENGACreateEnrollmentEventConfig *config;
  NSData *audioContent;
} SENGACreateEnrolledEventRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGACreateEnrollmentEventConfig),
        .number = SENGACreateEnrolledEventRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGACreateEnrolledEventRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrolledEventRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGACreateEnrolledEventRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGACreateEnrolledEventRequest class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGACreateEnrolledEventRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGACreateEnrolledEventRequest_ClearStreamingRequestOneOfCase(SENGACreateEnrolledEventRequest *message) {
  GPBDescriptor *descriptor = [SENGACreateEnrolledEventRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGAValidateEnrolledEventRequest

@implementation SENGAValidateEnrolledEventRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;

typedef struct SENGAValidateEnrolledEventRequest__storage_ {
  uint32_t _has_storage_[2];
  SENGAValidateEnrolledEventConfig *config;
  NSData *audioContent;
} SENGAValidateEnrolledEventRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAValidateEnrolledEventConfig),
        .number = SENGAValidateEnrolledEventRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGAValidateEnrolledEventRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEnrolledEventRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGAValidateEnrolledEventRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAValidateEnrolledEventRequest class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAValidateEnrolledEventRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGAValidateEnrolledEventRequest_ClearStreamingRequestOneOfCase(SENGAValidateEnrolledEventRequest *message) {
  GPBDescriptor *descriptor = [SENGAValidateEnrolledEventRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGATranscribeRequest

@implementation SENGATranscribeRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;
@dynamic hasPostProcessingAction, postProcessingAction;

typedef struct SENGATranscribeRequest__storage_ {
  uint32_t _has_storage_[2];
  SENGATranscribeConfig *config;
  NSData *audioContent;
  SENGAAudioRequestPostProcessingAction *postProcessingAction;
} SENGATranscribeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGATranscribeConfig),
        .number = SENGATranscribeRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGATranscribeRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGATranscribeRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "postProcessingAction",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioRequestPostProcessingAction),
        .number = SENGATranscribeRequest_FieldNumber_PostProcessingAction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGATranscribeRequest__storage_, postProcessingAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGATranscribeRequest class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGATranscribeRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\014\000\n\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGATranscribeRequest_ClearStreamingRequestOneOfCase(SENGATranscribeRequest *message) {
  GPBDescriptor *descriptor = [SENGATranscribeRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGASynthesizeSpeechRequest

@implementation SENGASynthesizeSpeechRequest

@dynamic phrase;
@dynamic hasConfig, config;

typedef struct SENGASynthesizeSpeechRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *phrase;
  SENGAVoiceSynthesisConfig *config;
} SENGASynthesizeSpeechRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phrase",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGASynthesizeSpeechRequest_FieldNumber_Phrase,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGASynthesizeSpeechRequest__storage_, phrase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAVoiceSynthesisConfig),
        .number = SENGASynthesizeSpeechRequest_FieldNumber_Config,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGASynthesizeSpeechRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGASynthesizeSpeechRequest class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGASynthesizeSpeechRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGACreateEnrollmentResponse

@implementation SENGACreateEnrollmentResponse

@dynamic percentComplete;
@dynamic audioEnergy;
@dynamic enrollmentId;
@dynamic modelName;
@dynamic modelVersion;
@dynamic modelPrompt;
@dynamic percentSegmentComplete;
@dynamic hasEnrollmentToken, enrollmentToken;

typedef struct SENGACreateEnrollmentResponse__storage_ {
  uint32_t _has_storage_[1];
  float audioEnergy;
  NSString *enrollmentId;
  NSString *modelName;
  NSString *modelVersion;
  NSString *modelPrompt;
  SENGEnrollmentToken *enrollmentToken;
  int64_t percentComplete;
  int64_t percentSegmentComplete;
} SENGACreateEnrollmentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "percentComplete",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentResponse_FieldNumber_PercentComplete,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentResponse__storage_, percentComplete),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "audioEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentResponse_FieldNumber_AudioEnergy,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentResponse__storage_, audioEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentResponse_FieldNumber_EnrollmentId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentResponse__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentResponse_FieldNumber_ModelName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentResponse__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentResponse_FieldNumber_ModelVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentResponse__storage_, modelVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelPrompt",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentResponse_FieldNumber_ModelPrompt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentResponse__storage_, modelPrompt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "percentSegmentComplete",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentResponse_FieldNumber_PercentSegmentComplete,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentResponse__storage_, percentSegmentComplete),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "enrollmentToken",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGEnrollmentToken),
        .number = SENGACreateEnrollmentResponse_FieldNumber_EnrollmentToken,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentResponse__storage_, enrollmentToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGACreateEnrollmentResponse class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGACreateEnrollmentResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\017\000\002\013\000\003\014\000\004\t\000\005\014\000\006\013\000\007\026\000\010\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGAAuthenticateResponse

@implementation SENGAAuthenticateResponse

@dynamic audioEnergy;
@dynamic success;
@dynamic hasToken, token;
@dynamic userId;
@dynamic enrollmentId;
@dynamic modelPrompt;
@dynamic percentSegmentComplete;

typedef struct SENGAAuthenticateResponse__storage_ {
  uint32_t _has_storage_[1];
  float audioEnergy;
  SENGTokenResponse *token;
  NSString *userId;
  NSString *enrollmentId;
  NSString *modelPrompt;
  int64_t percentSegmentComplete;
} SENGAAuthenticateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateResponse_FieldNumber_AudioEnergy,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAAuthenticateResponse__storage_, audioEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "success",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateResponse_FieldNumber_Success,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGTokenResponse),
        .number = SENGAAuthenticateResponse_FieldNumber_Token,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGAAuthenticateResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateResponse_FieldNumber_UserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGAAuthenticateResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateResponse_FieldNumber_EnrollmentId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGAAuthenticateResponse__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelPrompt",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateResponse_FieldNumber_ModelPrompt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENGAAuthenticateResponse__storage_, modelPrompt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "percentSegmentComplete",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateResponse_FieldNumber_PercentSegmentComplete,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENGAAuthenticateResponse__storage_, percentSegmentComplete),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAAuthenticateResponse class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAAuthenticateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\013\000\004\006\000\005\014\000\006\013\000\007\026\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGAValidateEventResponse

@implementation SENGAValidateEventResponse

@dynamic audioEnergy;
@dynamic success;
@dynamic resultId;
@dynamic score;
@dynamic hasPostProcessingAction, postProcessingAction;

typedef struct SENGAValidateEventResponse__storage_ {
  uint32_t _has_storage_[1];
  float audioEnergy;
  float score;
  NSString *resultId;
  SENGAAudioResponsePostProcessingAction *postProcessingAction;
} SENGAValidateEventResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEventResponse_FieldNumber_AudioEnergy,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAValidateEventResponse__storage_, audioEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "success",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEventResponse_FieldNumber_Success,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "resultId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEventResponse_FieldNumber_ResultId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGAValidateEventResponse__storage_, resultId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEventResponse_FieldNumber_Score,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGAValidateEventResponse__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "postProcessingAction",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioResponsePostProcessingAction),
        .number = SENGAValidateEventResponse_FieldNumber_PostProcessingAction,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGAValidateEventResponse__storage_, postProcessingAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAValidateEventResponse class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAValidateEventResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\013\000\003\010\000\n\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGAValidateEnrolledEventResponse

@implementation SENGAValidateEnrolledEventResponse

@dynamic audioEnergy;
@dynamic success;
@dynamic enrollmentId;
@dynamic userId;
@dynamic modelPrompt;

typedef struct SENGAValidateEnrolledEventResponse__storage_ {
  uint32_t _has_storage_[1];
  float audioEnergy;
  NSString *enrollmentId;
  NSString *userId;
  NSString *modelPrompt;
} SENGAValidateEnrolledEventResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEnrolledEventResponse_FieldNumber_AudioEnergy,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAValidateEnrolledEventResponse__storage_, audioEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "success",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEnrolledEventResponse_FieldNumber_Success,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEnrolledEventResponse_FieldNumber_EnrollmentId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGAValidateEnrolledEventResponse__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEnrolledEventResponse_FieldNumber_UserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGAValidateEnrolledEventResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelPrompt",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEnrolledEventResponse_FieldNumber_ModelPrompt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGAValidateEnrolledEventResponse__storage_, modelPrompt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAValidateEnrolledEventResponse class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAValidateEnrolledEventResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\003\014\000\004\006\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGATranscribeWord

@implementation SENGATranscribeWord

@dynamic begintimeMs;
@dynamic endtimeMs;
@dynamic confidence;
@dynamic wordState;
@dynamic wordIndex;
@dynamic word;

typedef struct SENGATranscribeWord__storage_ {
  uint32_t _has_storage_[1];
  float confidence;
  SENGAWordState wordState;
  NSString *word;
  uint64_t begintimeMs;
  uint64_t endtimeMs;
  uint64_t wordIndex;
} SENGATranscribeWord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "begintimeMs",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeWord_FieldNumber_BegintimeMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGATranscribeWord__storage_, begintimeMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "endtimeMs",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeWord_FieldNumber_EndtimeMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGATranscribeWord__storage_, endtimeMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeWord_FieldNumber_Confidence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGATranscribeWord__storage_, confidence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "wordState",
        .dataTypeSpecific.enumDescFunc = SENGAWordState_EnumDescriptor,
        .number = SENGATranscribeWord_FieldNumber_WordState,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGATranscribeWord__storage_, wordState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wordIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeWord_FieldNumber_WordIndex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGATranscribeWord__storage_, wordIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "word",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeWord_FieldNumber_Word,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGATranscribeWord__storage_, word),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGATranscribeWord class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGATranscribeWord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\002\t\000\004\t\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGATranscribeWord_WordState_RawValue(SENGATranscribeWord *message) {
  GPBDescriptor *descriptor = [SENGATranscribeWord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGATranscribeWord_FieldNumber_WordState];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGATranscribeWord_WordState_RawValue(SENGATranscribeWord *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGATranscribeWord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGATranscribeWord_FieldNumber_WordState];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENGATranscribeWordResponse

@implementation SENGATranscribeWordResponse

@dynamic wordsArray, wordsArray_Count;
@dynamic firstWordIndex;
@dynamic lastWordIndex;

typedef struct SENGATranscribeWordResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *wordsArray;
  uint64_t firstWordIndex;
  uint64_t lastWordIndex;
} SENGATranscribeWordResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wordsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGATranscribeWord),
        .number = SENGATranscribeWordResponse_FieldNumber_WordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGATranscribeWordResponse__storage_, wordsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstWordIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeWordResponse_FieldNumber_FirstWordIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGATranscribeWordResponse__storage_, firstWordIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "lastWordIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeWordResponse_FieldNumber_LastWordIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGATranscribeWordResponse__storage_, lastWordIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGATranscribeWordResponse class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGATranscribeWordResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\016\000\003\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGATranscribeResponse

@implementation SENGATranscribeResponse

@dynamic audioEnergy;
@dynamic hasWordList, wordList;
@dynamic hasVoiceActivity;
@dynamic hasPostProcessingAction, postProcessingAction;

typedef struct SENGATranscribeResponse__storage_ {
  uint32_t _has_storage_[1];
  float audioEnergy;
  SENGATranscribeWordResponse *wordList;
  SENGAAudioResponsePostProcessingAction *postProcessingAction;
} SENGATranscribeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeResponse_FieldNumber_AudioEnergy,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGATranscribeResponse__storage_, audioEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "wordList",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGATranscribeWordResponse),
        .number = SENGATranscribeResponse_FieldNumber_WordList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGATranscribeResponse__storage_, wordList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hasVoiceActivity",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeResponse_FieldNumber_HasVoiceActivity,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "postProcessingAction",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioResponsePostProcessingAction),
        .number = SENGATranscribeResponse_FieldNumber_PostProcessingAction,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGATranscribeResponse__storage_, postProcessingAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGATranscribeResponse class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGATranscribeResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\004\010\000\005\020\000\n\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGASynthesizeSpeechResponse

@implementation SENGASynthesizeSpeechResponse

@dynamic streamingResponseOneOfCase;
@dynamic config;
@dynamic audioContent;

typedef struct SENGASynthesizeSpeechResponse__storage_ {
  uint32_t _has_storage_[2];
  SENGAAudioConfig *config;
  NSData *audioContent;
} SENGASynthesizeSpeechResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioConfig),
        .number = SENGASynthesizeSpeechResponse_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGASynthesizeSpeechResponse__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGASynthesizeSpeechResponse_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGASynthesizeSpeechResponse__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGASynthesizeSpeechResponse class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGASynthesizeSpeechResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingResponse",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGASynthesizeSpeechResponse_ClearStreamingResponseOneOfCase(SENGASynthesizeSpeechResponse *message) {
  GPBDescriptor *descriptor = [SENGASynthesizeSpeechResponse descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGACreateEnrollmentConfig

@implementation SENGACreateEnrollmentConfig

@dynamic enrollLengthOneOfCase;
@dynamic hasAudio, audio;
@dynamic userId;
@dynamic deviceId;
@dynamic modelName;
@dynamic description_p;
@dynamic isLivenessEnabled;
@dynamic enrollmentNumUtterances;
@dynamic enrollmentDuration;
@dynamic referenceId;
@dynamic disableServerEnrollmentTemplateStorage;

typedef struct SENGACreateEnrollmentConfig__storage_ {
  uint32_t _has_storage_[2];
  uint32_t enrollmentNumUtterances;
  float enrollmentDuration;
  SENGAAudioConfig *audio;
  NSString *userId;
  NSString *deviceId;
  NSString *modelName;
  NSString *description_p;
  NSString *referenceId;
} SENGACreateEnrollmentConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioConfig),
        .number = SENGACreateEnrollmentConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentConfig_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentConfig_FieldNumber_DeviceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentConfig__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentConfig_FieldNumber_ModelName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentConfig_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentConfig__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isLivenessEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentConfig_FieldNumber_IsLivenessEnabled,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enrollmentNumUtterances",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentConfig_FieldNumber_EnrollmentNumUtterances,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentConfig__storage_, enrollmentNumUtterances),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "enrollmentDuration",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentConfig_FieldNumber_EnrollmentDuration,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentConfig__storage_, enrollmentDuration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "referenceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentConfig_FieldNumber_ReferenceId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentConfig__storage_, referenceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "disableServerEnrollmentTemplateStorage",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentConfig_FieldNumber_DisableServerEnrollmentTemplateStorage,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGACreateEnrollmentConfig class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGACreateEnrollmentConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "enrollLength",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\002\006\000\003\010\000\004\t\000\006\021\000\007\027\000\010\022\000\t\013\000\n\037\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGACreateEnrollmentConfig_ClearEnrollLengthOneOfCase(SENGACreateEnrollmentConfig *message) {
  GPBDescriptor *descriptor = [SENGACreateEnrollmentConfig descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGAAuthenticateConfig

@implementation SENGAAuthenticateConfig

@dynamic authIdOneOfCase;
@dynamic hasAudio, audio;
@dynamic enrollmentId;
@dynamic enrollmentGroupId;
@dynamic doIncludeToken;
@dynamic sensitivity;
@dynamic security;
@dynamic isLivenessEnabled;
@dynamic enrollmentToken;

typedef struct SENGAAuthenticateConfig__storage_ {
  uint32_t _has_storage_[2];
  SENGAThresholdSensitivity sensitivity;
  SENGAAuthenticateConfig_ThresholdSecurity security;
  SENGAAudioConfig *audio;
  NSString *enrollmentId;
  NSString *enrollmentGroupId;
  NSData *enrollmentToken;
} SENGAAuthenticateConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioConfig),
        .number = SENGAAuthenticateConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAAuthenticateConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateConfig_FieldNumber_EnrollmentId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGAAuthenticateConfig__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentGroupId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateConfig_FieldNumber_EnrollmentGroupId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGAAuthenticateConfig__storage_, enrollmentGroupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "doIncludeToken",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateConfig_FieldNumber_DoIncludeToken,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sensitivity",
        .dataTypeSpecific.enumDescFunc = SENGAThresholdSensitivity_EnumDescriptor,
        .number = SENGAAuthenticateConfig_FieldNumber_Sensitivity,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGAAuthenticateConfig__storage_, sensitivity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "security",
        .dataTypeSpecific.enumDescFunc = SENGAAuthenticateConfig_ThresholdSecurity_EnumDescriptor,
        .number = SENGAAuthenticateConfig_FieldNumber_Security,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGAAuthenticateConfig__storage_, security),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isLivenessEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateConfig_FieldNumber_IsLivenessEnabled,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enrollmentToken",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAuthenticateConfig_FieldNumber_EnrollmentToken,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENGAAuthenticateConfig__storage_, enrollmentToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAAuthenticateConfig class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAAuthenticateConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "authId",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\014\000\003\021\000\004\016\000\007\021\000\010\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGAAuthenticateConfig_Sensitivity_RawValue(SENGAAuthenticateConfig *message) {
  GPBDescriptor *descriptor = [SENGAAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAuthenticateConfig_FieldNumber_Sensitivity];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGAAuthenticateConfig_Sensitivity_RawValue(SENGAAuthenticateConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGAAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAuthenticateConfig_FieldNumber_Sensitivity];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SENGAAuthenticateConfig_Security_RawValue(SENGAAuthenticateConfig *message) {
  GPBDescriptor *descriptor = [SENGAAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAuthenticateConfig_FieldNumber_Security];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGAAuthenticateConfig_Security_RawValue(SENGAAuthenticateConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGAAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAuthenticateConfig_FieldNumber_Security];
  GPBSetMessageRawEnumField(message, field, value);
}

void SENGAAuthenticateConfig_ClearAuthIdOneOfCase(SENGAAuthenticateConfig *message) {
  GPBDescriptor *descriptor = [SENGAAuthenticateConfig descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Enum SENGAAuthenticateConfig_ThresholdSecurity

GPBEnumDescriptor *SENGAAuthenticateConfig_ThresholdSecurity_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "High\000Low\000";
    static const int32_t values[] = {
        SENGAAuthenticateConfig_ThresholdSecurity_High,
        SENGAAuthenticateConfig_ThresholdSecurity_Low,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENGAAuthenticateConfig_ThresholdSecurity)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENGAAuthenticateConfig_ThresholdSecurity_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENGAAuthenticateConfig_ThresholdSecurity_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENGAAuthenticateConfig_ThresholdSecurity_High:
    case SENGAAuthenticateConfig_ThresholdSecurity_Low:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENGAValidateEventConfig

@implementation SENGAValidateEventConfig

@dynamic hasAudio, audio;
@dynamic modelName;
@dynamic userId;
@dynamic sensitivity;

typedef struct SENGAValidateEventConfig__storage_ {
  uint32_t _has_storage_[1];
  SENGAThresholdSensitivity sensitivity;
  SENGAAudioConfig *audio;
  NSString *modelName;
  NSString *userId;
} SENGAValidateEventConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioConfig),
        .number = SENGAValidateEventConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAValidateEventConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEventConfig_FieldNumber_ModelName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGAValidateEventConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEventConfig_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGAValidateEventConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sensitivity",
        .dataTypeSpecific.enumDescFunc = SENGAThresholdSensitivity_EnumDescriptor,
        .number = SENGAValidateEventConfig_FieldNumber_Sensitivity,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGAValidateEventConfig__storage_, sensitivity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAValidateEventConfig class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAValidateEventConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\t\000\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGAValidateEventConfig_Sensitivity_RawValue(SENGAValidateEventConfig *message) {
  GPBDescriptor *descriptor = [SENGAValidateEventConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAValidateEventConfig_FieldNumber_Sensitivity];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGAValidateEventConfig_Sensitivity_RawValue(SENGAValidateEventConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGAValidateEventConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAValidateEventConfig_FieldNumber_Sensitivity];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENGACreateEnrollmentEventConfig

@implementation SENGACreateEnrollmentEventConfig

@dynamic enrollLengthOneOfCase;
@dynamic hasAudio, audio;
@dynamic userId;
@dynamic modelName;
@dynamic description_p;
@dynamic enrollmentNumUtterances;
@dynamic enrollmentDuration;
@dynamic referenceId;

typedef struct SENGACreateEnrollmentEventConfig__storage_ {
  uint32_t _has_storage_[2];
  uint32_t enrollmentNumUtterances;
  float enrollmentDuration;
  SENGAAudioConfig *audio;
  NSString *userId;
  NSString *modelName;
  NSString *description_p;
  NSString *referenceId;
} SENGACreateEnrollmentEventConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioConfig),
        .number = SENGACreateEnrollmentEventConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentEventConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentEventConfig_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentEventConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentEventConfig_FieldNumber_ModelName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentEventConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentEventConfig_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentEventConfig__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentNumUtterances",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentEventConfig_FieldNumber_EnrollmentNumUtterances,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentEventConfig__storage_, enrollmentNumUtterances),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "enrollmentDuration",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentEventConfig_FieldNumber_EnrollmentDuration,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentEventConfig__storage_, enrollmentDuration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "referenceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACreateEnrollmentEventConfig_FieldNumber_ReferenceId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGACreateEnrollmentEventConfig__storage_, referenceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGACreateEnrollmentEventConfig class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGACreateEnrollmentEventConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "enrollLength",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\006\000\003\t\000\005\027\000\006\022\000\007\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGACreateEnrollmentEventConfig_ClearEnrollLengthOneOfCase(SENGACreateEnrollmentEventConfig *message) {
  GPBDescriptor *descriptor = [SENGACreateEnrollmentEventConfig descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGAValidateEnrolledEventConfig

@implementation SENGAValidateEnrolledEventConfig

@dynamic authIdOneOfCase;
@dynamic hasAudio, audio;
@dynamic enrollmentId;
@dynamic enrollmentGroupId;
@dynamic sensitivity;
@dynamic enrollmentToken;

typedef struct SENGAValidateEnrolledEventConfig__storage_ {
  uint32_t _has_storage_[2];
  SENGAThresholdSensitivity sensitivity;
  SENGAAudioConfig *audio;
  NSString *enrollmentId;
  NSString *enrollmentGroupId;
  NSData *enrollmentToken;
} SENGAValidateEnrolledEventConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioConfig),
        .number = SENGAValidateEnrolledEventConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAValidateEnrolledEventConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEnrolledEventConfig_FieldNumber_EnrollmentId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGAValidateEnrolledEventConfig__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentGroupId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEnrolledEventConfig_FieldNumber_EnrollmentGroupId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGAValidateEnrolledEventConfig__storage_, enrollmentGroupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sensitivity",
        .dataTypeSpecific.enumDescFunc = SENGAThresholdSensitivity_EnumDescriptor,
        .number = SENGAValidateEnrolledEventConfig_FieldNumber_Sensitivity,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGAValidateEnrolledEventConfig__storage_, sensitivity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "enrollmentToken",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAValidateEnrolledEventConfig_FieldNumber_EnrollmentToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGAValidateEnrolledEventConfig__storage_, enrollmentToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAValidateEnrolledEventConfig class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAValidateEnrolledEventConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "authId",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\014\000\003\021\000\005\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGAValidateEnrolledEventConfig_Sensitivity_RawValue(SENGAValidateEnrolledEventConfig *message) {
  GPBDescriptor *descriptor = [SENGAValidateEnrolledEventConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAValidateEnrolledEventConfig_FieldNumber_Sensitivity];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGAValidateEnrolledEventConfig_Sensitivity_RawValue(SENGAValidateEnrolledEventConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGAValidateEnrolledEventConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAValidateEnrolledEventConfig_FieldNumber_Sensitivity];
  GPBSetMessageRawEnumField(message, field, value);
}

void SENGAValidateEnrolledEventConfig_ClearAuthIdOneOfCase(SENGAValidateEnrolledEventConfig *message) {
  GPBDescriptor *descriptor = [SENGAValidateEnrolledEventConfig descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGACustomVocabularyWords

@implementation SENGACustomVocabularyWords

@dynamic wordsArray, wordsArray_Count;

typedef struct SENGACustomVocabularyWords__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *wordsArray;
} SENGACustomVocabularyWords__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wordsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGACustomVocabularyWords_FieldNumber_WordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGACustomVocabularyWords__storage_, wordsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGACustomVocabularyWords class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGACustomVocabularyWords__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGATranscribeConfig

@implementation SENGATranscribeConfig

@dynamic hasAudio, audio;
@dynamic modelName;
@dynamic userId;
@dynamic enablePunctuationCapitalization;
@dynamic doSingleUtterance;
@dynamic vadSensitivity;
@dynamic vadDuration;
@dynamic customVocabRewardThreshold;
@dynamic customVocabularyId;
@dynamic hasCustomWordList, customWordList;

typedef struct SENGATranscribeConfig__storage_ {
  uint32_t _has_storage_[1];
  SENGAThresholdSensitivity vadSensitivity;
  float vadDuration;
  SENGAThresholdSensitivity customVocabRewardThreshold;
  SENGAAudioConfig *audio;
  NSString *modelName;
  NSString *userId;
  NSString *customVocabularyId;
  SENGACustomVocabularyWords *customWordList;
} SENGATranscribeConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGAAudioConfig),
        .number = SENGATranscribeConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGATranscribeConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeConfig_FieldNumber_ModelName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGATranscribeConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeConfig_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGATranscribeConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enablePunctuationCapitalization",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeConfig_FieldNumber_EnablePunctuationCapitalization,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "doSingleUtterance",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeConfig_FieldNumber_DoSingleUtterance,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "vadSensitivity",
        .dataTypeSpecific.enumDescFunc = SENGAThresholdSensitivity_EnumDescriptor,
        .number = SENGATranscribeConfig_FieldNumber_VadSensitivity,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENGATranscribeConfig__storage_, vadSensitivity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "vadDuration",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeConfig_FieldNumber_VadDuration,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SENGATranscribeConfig__storage_, vadDuration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "customVocabRewardThreshold",
        .dataTypeSpecific.enumDescFunc = SENGAThresholdSensitivity_EnumDescriptor,
        .number = SENGATranscribeConfig_FieldNumber_CustomVocabRewardThreshold,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SENGATranscribeConfig__storage_, customVocabRewardThreshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customVocabularyId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGATranscribeConfig_FieldNumber_CustomVocabularyId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SENGATranscribeConfig__storage_, customVocabularyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customWordList",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGACustomVocabularyWords),
        .number = SENGATranscribeConfig_FieldNumber_CustomWordList,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SENGATranscribeConfig__storage_, customWordList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGATranscribeConfig class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGATranscribeConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\002\t\000\003\006\000\004\037\000\005\021\000\006\016\000\007\013\000\010\032\000\t\022\000\n\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGATranscribeConfig_VadSensitivity_RawValue(SENGATranscribeConfig *message) {
  GPBDescriptor *descriptor = [SENGATranscribeConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGATranscribeConfig_FieldNumber_VadSensitivity];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGATranscribeConfig_VadSensitivity_RawValue(SENGATranscribeConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGATranscribeConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGATranscribeConfig_FieldNumber_VadSensitivity];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SENGATranscribeConfig_CustomVocabRewardThreshold_RawValue(SENGATranscribeConfig *message) {
  GPBDescriptor *descriptor = [SENGATranscribeConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGATranscribeConfig_FieldNumber_CustomVocabRewardThreshold];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGATranscribeConfig_CustomVocabRewardThreshold_RawValue(SENGATranscribeConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGATranscribeConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGATranscribeConfig_FieldNumber_CustomVocabRewardThreshold];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENGAAudioConfig

@implementation SENGAAudioConfig

@dynamic encoding;
@dynamic sampleRateHertz;
@dynamic audioChannelCount;
@dynamic languageCode;

typedef struct SENGAAudioConfig__storage_ {
  uint32_t _has_storage_[1];
  SENGAAudioConfig_AudioEncoding encoding;
  int32_t sampleRateHertz;
  int32_t audioChannelCount;
  NSString *languageCode;
} SENGAAudioConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "encoding",
        .dataTypeSpecific.enumDescFunc = SENGAAudioConfig_AudioEncoding_EnumDescriptor,
        .number = SENGAAudioConfig_FieldNumber_Encoding,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAAudioConfig__storage_, encoding),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sampleRateHertz",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAudioConfig_FieldNumber_SampleRateHertz,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGAAudioConfig__storage_, sampleRateHertz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioChannelCount",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAudioConfig_FieldNumber_AudioChannelCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGAAudioConfig__storage_, audioChannelCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAAudioConfig_FieldNumber_LanguageCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGAAudioConfig__storage_, languageCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAAudioConfig class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAAudioConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\017\000\003\021\000\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGAAudioConfig_Encoding_RawValue(SENGAAudioConfig *message) {
  GPBDescriptor *descriptor = [SENGAAudioConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAudioConfig_FieldNumber_Encoding];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGAAudioConfig_Encoding_RawValue(SENGAAudioConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGAAudioConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGAAudioConfig_FieldNumber_Encoding];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum SENGAAudioConfig_AudioEncoding

GPBEnumDescriptor *SENGAAudioConfig_AudioEncoding_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Linear16\000Flac\000Mulaw\000";
    static const int32_t values[] = {
        SENGAAudioConfig_AudioEncoding_Linear16,
        SENGAAudioConfig_AudioEncoding_Flac,
        SENGAAudioConfig_AudioEncoding_Mulaw,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENGAAudioConfig_AudioEncoding)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENGAAudioConfig_AudioEncoding_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENGAAudioConfig_AudioEncoding_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENGAAudioConfig_AudioEncoding_Linear16:
    case SENGAAudioConfig_AudioEncoding_Flac:
    case SENGAAudioConfig_AudioEncoding_Mulaw:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENGAVoiceSynthesisConfig

@implementation SENGAVoiceSynthesisConfig

@dynamic modelName;
@dynamic sampleRateHertz;

typedef struct SENGAVoiceSynthesisConfig__storage_ {
  uint32_t _has_storage_[1];
  int32_t sampleRateHertz;
  NSString *modelName;
} SENGAVoiceSynthesisConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAVoiceSynthesisConfig_FieldNumber_ModelName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAVoiceSynthesisConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sampleRateHertz",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAVoiceSynthesisConfig_FieldNumber_SampleRateHertz,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGAVoiceSynthesisConfig__storage_, sampleRateHertz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAVoiceSynthesisConfig class]
                                     rootClass:[SENGAAudioRoot class]
                                          file:SENGAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAVoiceSynthesisConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\t\000\003\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
