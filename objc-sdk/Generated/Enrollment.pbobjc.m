// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/management/enrollment.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Enrollment.pbobjc.h"
#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(SENGCompressionConfiguration);
GPBObjCClassDeclaration(SENGEnrollmentGroupResponse);
GPBObjCClassDeclaration(SENGEnrollmentResponse);

#pragma mark - SENGEnrollmentRoot

@implementation SENGEnrollmentRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[ValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SENGEnrollmentRoot_FileDescriptor

static GPBFileDescriptor *SENGEnrollmentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sensory.api.v1.management"
                                                 objcPrefix:@"SENG"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SENGGetEnrollmentsRequest

@implementation SENGGetEnrollmentsRequest

@dynamic userId;

typedef struct SENGGetEnrollmentsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} SENGGetEnrollmentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGGetEnrollmentsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGGetEnrollmentsRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGGetEnrollmentsRequest class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGGetEnrollmentsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGGetEnrollmentsResponse

@implementation SENGGetEnrollmentsResponse

@dynamic enrollmentsArray, enrollmentsArray_Count;
@dynamic isRequestorTrusted;

typedef struct SENGGetEnrollmentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *enrollmentsArray;
} SENGGetEnrollmentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enrollmentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGEnrollmentResponse),
        .number = SENGGetEnrollmentsResponse_FieldNumber_EnrollmentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGGetEnrollmentsResponse__storage_, enrollmentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isRequestorTrusted",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGGetEnrollmentsResponse_FieldNumber_IsRequestorTrusted,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGGetEnrollmentsResponse class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGGetEnrollmentsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\022\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGEnrollmentResponse

@implementation SENGEnrollmentResponse

@dynamic id_p;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic description_p;
@dynamic modelName;
@dynamic modelType;
@dynamic modelVersion;
@dynamic deviceId;
@dynamic userId;
@dynamic hasCompression, compression;
@dynamic deviceName;
@dynamic didEnrollWithLiveness;
@dynamic referenceId;
@dynamic didEnrollAsBiometric;

typedef struct SENGEnrollmentResponse__storage_ {
  uint32_t _has_storage_[1];
  SENGModelType modelType;
  NSString *id_p;
  GPBTimestamp *createdAt;
  GPBTimestamp *updatedAt;
  NSString *description_p;
  NSString *modelName;
  NSString *modelVersion;
  NSString *deviceId;
  NSString *userId;
  SENGCompressionConfiguration *compression;
  NSString *deviceName;
  NSString *referenceId;
} SENGEnrollmentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentResponse_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENGEnrollmentResponse_FieldNumber_CreatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, createdAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENGEnrollmentResponse_FieldNumber_UpdatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, updatedAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentResponse_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentResponse_FieldNumber_ModelName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelType",
        .dataTypeSpecific.enumDescFunc = SENGModelType_EnumDescriptor,
        .number = SENGEnrollmentResponse_FieldNumber_ModelType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, modelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "modelVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentResponse_FieldNumber_ModelVersion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, modelVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentResponse_FieldNumber_DeviceId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentResponse_FieldNumber_UserId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "compression",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGCompressionConfiguration),
        .number = SENGEnrollmentResponse_FieldNumber_Compression,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, compression),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentResponse_FieldNumber_DeviceName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, deviceName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "didEnrollWithLiveness",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentResponse_FieldNumber_DidEnrollWithLiveness,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "referenceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentResponse_FieldNumber_ReferenceId,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SENGEnrollmentResponse__storage_, referenceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "didEnrollAsBiometric",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentResponse_FieldNumber_DidEnrollAsBiometric,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGEnrollmentResponse class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGEnrollmentResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\002\t\000\003\t\000\005\t\000\006\t\000\007\014\000\010\010\000\t\006\000\013\n\000\014\025\000\r\013\000\016\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGEnrollmentResponse_ModelType_RawValue(SENGEnrollmentResponse *message) {
  GPBDescriptor *descriptor = [SENGEnrollmentResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGEnrollmentResponse_FieldNumber_ModelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGEnrollmentResponse_ModelType_RawValue(SENGEnrollmentResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGEnrollmentResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGEnrollmentResponse_FieldNumber_ModelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENGGetEnrollmentGroupsResponse

@implementation SENGGetEnrollmentGroupsResponse

@dynamic enrollmentGroupsArray, enrollmentGroupsArray_Count;

typedef struct SENGGetEnrollmentGroupsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *enrollmentGroupsArray;
} SENGGetEnrollmentGroupsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enrollmentGroupsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGEnrollmentGroupResponse),
        .number = SENGGetEnrollmentGroupsResponse_FieldNumber_EnrollmentGroupsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGGetEnrollmentGroupsResponse__storage_, enrollmentGroupsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGGetEnrollmentGroupsResponse class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGGetEnrollmentGroupsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000enrollmentGroups\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGEnrollmentGroupResponse

@implementation SENGEnrollmentGroupResponse

@dynamic id_p;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic name;
@dynamic description_p;
@dynamic modelName;
@dynamic modelType;
@dynamic modelVersion;
@dynamic userId;
@dynamic enrollmentsArray, enrollmentsArray_Count;

typedef struct SENGEnrollmentGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  SENGModelType modelType;
  NSString *id_p;
  GPBTimestamp *createdAt;
  GPBTimestamp *updatedAt;
  NSString *name;
  NSString *description_p;
  NSString *modelName;
  NSString *modelVersion;
  NSString *userId;
  NSMutableArray *enrollmentsArray;
} SENGEnrollmentGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentGroupResponse_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGEnrollmentGroupResponse__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENGEnrollmentGroupResponse_FieldNumber_CreatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGEnrollmentGroupResponse__storage_, createdAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENGEnrollmentGroupResponse_FieldNumber_UpdatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGEnrollmentGroupResponse__storage_, updatedAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentGroupResponse_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGEnrollmentGroupResponse__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentGroupResponse_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGEnrollmentGroupResponse__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentGroupResponse_FieldNumber_ModelName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGEnrollmentGroupResponse__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelType",
        .dataTypeSpecific.enumDescFunc = SENGModelType_EnumDescriptor,
        .number = SENGEnrollmentGroupResponse_FieldNumber_ModelType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENGEnrollmentGroupResponse__storage_, modelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "modelVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentGroupResponse_FieldNumber_ModelVersion,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENGEnrollmentGroupResponse__storage_, modelVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGEnrollmentGroupResponse_FieldNumber_UserId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SENGEnrollmentGroupResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGEnrollmentResponse),
        .number = SENGEnrollmentGroupResponse_FieldNumber_EnrollmentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGEnrollmentGroupResponse__storage_, enrollmentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGEnrollmentGroupResponse class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGEnrollmentGroupResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\002\t\000\003\t\000\006\t\000\007\t\000\010\014\000\t\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGEnrollmentGroupResponse_ModelType_RawValue(SENGEnrollmentGroupResponse *message) {
  GPBDescriptor *descriptor = [SENGEnrollmentGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGEnrollmentGroupResponse_FieldNumber_ModelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGEnrollmentGroupResponse_ModelType_RawValue(SENGEnrollmentGroupResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGEnrollmentGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGEnrollmentGroupResponse_FieldNumber_ModelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENGCreateEnrollmentGroupRequest

@implementation SENGCreateEnrollmentGroupRequest

@dynamic id_p;
@dynamic name;
@dynamic description_p;
@dynamic modelName;
@dynamic userId;
@dynamic enrollmentIdsArray, enrollmentIdsArray_Count;

typedef struct SENGCreateEnrollmentGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *description_p;
  NSString *modelName;
  NSString *userId;
  NSMutableArray *enrollmentIdsArray;
} SENGCreateEnrollmentGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGCreateEnrollmentGroupRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGCreateEnrollmentGroupRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGCreateEnrollmentGroupRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGCreateEnrollmentGroupRequest__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGCreateEnrollmentGroupRequest_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGCreateEnrollmentGroupRequest__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGCreateEnrollmentGroupRequest_FieldNumber_ModelName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGCreateEnrollmentGroupRequest__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGCreateEnrollmentGroupRequest_FieldNumber_UserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGCreateEnrollmentGroupRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGCreateEnrollmentGroupRequest_FieldNumber_EnrollmentIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGCreateEnrollmentGroupRequest__storage_, enrollmentIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGCreateEnrollmentGroupRequest class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGCreateEnrollmentGroupRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\004\t\000\005\006\000\006\000enrollmentIds\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGAppendEnrollmentGroupRequest

@implementation SENGAppendEnrollmentGroupRequest

@dynamic groupId;
@dynamic enrollmentIdsArray, enrollmentIdsArray_Count;

typedef struct SENGAppendEnrollmentGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSMutableArray *enrollmentIdsArray;
} SENGAppendEnrollmentGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAppendEnrollmentGroupRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGAppendEnrollmentGroupRequest__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGAppendEnrollmentGroupRequest_FieldNumber_EnrollmentIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGAppendEnrollmentGroupRequest__storage_, enrollmentIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGAppendEnrollmentGroupRequest class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGAppendEnrollmentGroupRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000enrollmentIds\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGDeleteEnrollmentRequest

@implementation SENGDeleteEnrollmentRequest

@dynamic id_p;

typedef struct SENGDeleteEnrollmentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} SENGDeleteEnrollmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGDeleteEnrollmentRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGDeleteEnrollmentRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGDeleteEnrollmentRequest class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGDeleteEnrollmentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGDeleteEnrollmentGroupRequest

@implementation SENGDeleteEnrollmentGroupRequest

@dynamic id_p;

typedef struct SENGDeleteEnrollmentGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} SENGDeleteEnrollmentGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGDeleteEnrollmentGroupRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGDeleteEnrollmentGroupRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGDeleteEnrollmentGroupRequest class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGDeleteEnrollmentGroupRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGUpdateEnrollmentRequest

@implementation SENGUpdateEnrollmentRequest

@dynamic id_p;
@dynamic description_p;

typedef struct SENGUpdateEnrollmentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *description_p;
} SENGUpdateEnrollmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGUpdateEnrollmentRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGUpdateEnrollmentRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGUpdateEnrollmentRequest_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGUpdateEnrollmentRequest__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGUpdateEnrollmentRequest class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGUpdateEnrollmentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGUpdateEnrollmentGroupRequest

@implementation SENGUpdateEnrollmentGroupRequest

@dynamic id_p;
@dynamic name;

typedef struct SENGUpdateEnrollmentGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
} SENGUpdateEnrollmentGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGUpdateEnrollmentGroupRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGUpdateEnrollmentGroupRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGUpdateEnrollmentGroupRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGUpdateEnrollmentGroupRequest__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGUpdateEnrollmentGroupRequest class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGUpdateEnrollmentGroupRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGRemoveEnrollmentsRequest

@implementation SENGRemoveEnrollmentsRequest

@dynamic groupId;
@dynamic enrollmentIdsArray, enrollmentIdsArray_Count;

typedef struct SENGRemoveEnrollmentsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSMutableArray *enrollmentIdsArray;
} SENGRemoveEnrollmentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGRemoveEnrollmentsRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGRemoveEnrollmentsRequest__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGRemoveEnrollmentsRequest_FieldNumber_EnrollmentIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGRemoveEnrollmentsRequest__storage_, enrollmentIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGRemoveEnrollmentsRequest class]
                                     rootClass:[SENGEnrollmentRoot class]
                                          file:SENGEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGRemoveEnrollmentsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000enrollmentIds\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
