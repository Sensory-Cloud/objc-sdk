// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/file/file.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "File.pbobjc.h"
#import "Validate.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(SENGFileCatalog);
GPBObjCClassDeclaration(SENGFileChunk);
GPBObjCClassDeclaration(SENGFileInfo);
GPBObjCClassDeclaration(SENGVersionedFileCategory);

#pragma mark - SENGFileRoot

@implementation SENGFileRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[ValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SENGFileRoot_FileDescriptor

static GPBFileDescriptor *SENGFileRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sensory.api.v1.file"
                                                 objcPrefix:@"SENG"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SENGFileCategory

GPBEnumDescriptor *SENGFileCategory_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TssvModel\000AtlasModel\000TnlModel\000Unknown\000";
    static const int32_t values[] = {
        SENGFileCategory_TssvModel,
        SENGFileCategory_AtlasModel,
        SENGFileCategory_TnlModel,
        SENGFileCategory_Unknown,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENGFileCategory)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENGFileCategory_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENGFileCategory_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENGFileCategory_TssvModel:
    case SENGFileCategory_AtlasModel:
    case SENGFileCategory_TnlModel:
    case SENGFileCategory_Unknown:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENGFileRequest

@implementation SENGFileRequest

@dynamic file;
@dynamic hasCategory, category;
@dynamic offset;

typedef struct SENGFileRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *file;
  SENGVersionedFileCategory *category;
  int64_t offset;
} SENGFileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "file",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileRequest_FieldNumber_File,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGFileRequest__storage_, file),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "category",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGVersionedFileCategory),
        .number = SENGFileRequest_FieldNumber_Category,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGFileRequest__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileRequest_FieldNumber_Offset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGFileRequest__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGFileRequest class]
                                     rootClass:[SENGFileRoot class]
                                          file:SENGFileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGFileRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGFileResponse

@implementation SENGFileResponse

@dynamic streamingResponseOneOfCase;
@dynamic info;
@dynamic chunk;
@dynamic complete;

typedef struct SENGFileResponse__storage_ {
  uint32_t _has_storage_[2];
  SENGFileInfo *info;
  SENGFileChunk *chunk;
} SENGFileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGFileInfo),
        .number = SENGFileResponse_FieldNumber_Info,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGFileResponse__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chunk",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGFileChunk),
        .number = SENGFileResponse_FieldNumber_Chunk,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENGFileResponse__storage_, chunk),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "complete",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileResponse_FieldNumber_Complete,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGFileResponse class]
                                     rootClass:[SENGFileRoot class]
                                          file:SENGFileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGFileResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingResponse",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENGFileResponse_ClearStreamingResponseOneOfCase(SENGFileResponse *message) {
  GPBDescriptor *descriptor = [SENGFileResponse descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENGFileCatalogRequest

@implementation SENGFileCatalogRequest

@dynamic categoriesArray, categoriesArray_Count;

typedef struct SENGFileCatalogRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *categoriesArray;
} SENGFileCatalogRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "categoriesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGVersionedFileCategory),
        .number = SENGFileCatalogRequest_FieldNumber_CategoriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGFileCatalogRequest__storage_, categoriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGFileCatalogRequest class]
                                     rootClass:[SENGFileRoot class]
                                          file:SENGFileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGFileCatalogRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGFileCompleteCatalogRequest

@implementation SENGFileCompleteCatalogRequest

@dynamic tenantId;

typedef struct SENGFileCompleteCatalogRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tenantId;
} SENGFileCompleteCatalogRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tenantId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileCompleteCatalogRequest_FieldNumber_TenantId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGFileCompleteCatalogRequest__storage_, tenantId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGFileCompleteCatalogRequest class]
                                     rootClass:[SENGFileRoot class]
                                          file:SENGFileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGFileCompleteCatalogRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGFileCatalogResponse

@implementation SENGFileCatalogResponse

@dynamic catalogArray, catalogArray_Count;

typedef struct SENGFileCatalogResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *catalogArray;
} SENGFileCatalogResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "catalogArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGFileCatalog),
        .number = SENGFileCatalogResponse_FieldNumber_CatalogArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGFileCatalogResponse__storage_, catalogArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGFileCatalogResponse class]
                                     rootClass:[SENGFileRoot class]
                                          file:SENGFileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGFileCatalogResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGFileChunk

@implementation SENGFileChunk

@dynamic bytes;
@dynamic offset;

typedef struct SENGFileChunk__storage_ {
  uint32_t _has_storage_[1];
  NSData *bytes;
  int64_t offset;
} SENGFileChunk__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bytes",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileChunk_FieldNumber_Bytes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGFileChunk__storage_, bytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileChunk_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGFileChunk__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGFileChunk class]
                                     rootClass:[SENGFileRoot class]
                                          file:SENGFileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGFileChunk__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGFileInfo

@implementation SENGFileInfo

@dynamic file;
@dynamic absolutePath;
@dynamic size;
@dynamic contentType;
@dynamic hash_p;
@dynamic tenantId;

typedef struct SENGFileInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *file;
  NSString *absolutePath;
  NSString *contentType;
  NSString *hash_p;
  NSString *tenantId;
  int64_t size;
} SENGFileInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "file",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileInfo_FieldNumber_File,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGFileInfo__storage_, file),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "absolutePath",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileInfo_FieldNumber_AbsolutePath,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGFileInfo__storage_, absolutePath),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileInfo_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENGFileInfo__storage_, size),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileInfo_FieldNumber_ContentType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENGFileInfo__storage_, contentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hash_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileInfo_FieldNumber_Hash_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENGFileInfo__storage_, hash_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tenantId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGFileInfo_FieldNumber_TenantId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENGFileInfo__storage_, tenantId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGFileInfo class]
                                     rootClass:[SENGFileRoot class]
                                          file:SENGFileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGFileInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\014\000\004\013\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGFileCatalog

@implementation SENGFileCatalog

@dynamic filesArray, filesArray_Count;
@dynamic hasCategory, category;

typedef struct SENGFileCatalog__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *filesArray;
  SENGVersionedFileCategory *category;
} SENGFileCatalog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "filesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGFileInfo),
        .number = SENGFileCatalog_FieldNumber_FilesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGFileCatalog__storage_, filesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "category",
        .dataTypeSpecific.clazz = GPBObjCClass(SENGVersionedFileCategory),
        .number = SENGFileCatalog_FieldNumber_Category,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGFileCatalog__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGFileCatalog class]
                                     rootClass:[SENGFileRoot class]
                                          file:SENGFileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGFileCatalog__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGVersionedFileCategory

@implementation SENGVersionedFileCategory

@dynamic category;
@dynamic version;

typedef struct SENGVersionedFileCategory__storage_ {
  uint32_t _has_storage_[1];
  SENGFileCategory category;
  NSString *version;
} SENGVersionedFileCategory__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "category",
        .dataTypeSpecific.enumDescFunc = SENGFileCategory_EnumDescriptor,
        .number = SENGVersionedFileCategory_FieldNumber_Category,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGVersionedFileCategory__storage_, category),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGVersionedFileCategory_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGVersionedFileCategory__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGVersionedFileCategory class]
                                     rootClass:[SENGFileRoot class]
                                          file:SENGFileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGVersionedFileCategory__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGVersionedFileCategory_Category_RawValue(SENGVersionedFileCategory *message) {
  GPBDescriptor *descriptor = [SENGVersionedFileCategory descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVersionedFileCategory_FieldNumber_Category];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGVersionedFileCategory_Category_RawValue(SENGVersionedFileCategory *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGVersionedFileCategory descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGVersionedFileCategory_FieldNumber_Category];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
