// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: v1/file/file.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "File.pbrpc.h"
#import "File.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#import "Validate.pbobjc.h"

@implementation SENGFile

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.file"
                 serviceName:@"File"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.file"
                 serviceName:@"File"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark GetInfo(FileRequest) returns (FileInfo)

/**
 * Allows a client to request information about a file in the cloud.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getInfoWithRequest:(SENGFileRequest *)request handler:(void(^)(SENGFileInfo *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetInfoWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Allows a client to request information about a file in the cloud.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetInfoWithRequest:(SENGFileRequest *)request handler:(void(^)(SENGFileInfo *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetInfo"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENGFileInfo class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Allows a client to request information about a file in the cloud.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)getInfoWithMessage:(SENGFileRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetInfo"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGFileInfo class]];
}

#pragma mark GetCatalog(FileCatalogRequest) returns (FileCatalogResponse)

/**
 * Allows a client to request a list of all the files it is allowed to access
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getCatalogWithRequest:(SENGFileCatalogRequest *)request handler:(void(^)(SENGFileCatalogResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetCatalogWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Allows a client to request a list of all the files it is allowed to access
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetCatalogWithRequest:(SENGFileCatalogRequest *)request handler:(void(^)(SENGFileCatalogResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetCatalog"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENGFileCatalogResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Allows a client to request a list of all the files it is allowed to access
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)getCatalogWithMessage:(SENGFileCatalogRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetCatalog"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGFileCatalogResponse class]];
}

#pragma mark GetCompleteCatalog(FileCompleteCatalogRequest) returns (FileCatalogResponse)

/**
 * Allows a root client to request the full list of files
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getCompleteCatalogWithRequest:(SENGFileCompleteCatalogRequest *)request handler:(void(^)(SENGFileCatalogResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetCompleteCatalogWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Allows a root client to request the full list of files
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetCompleteCatalogWithRequest:(SENGFileCompleteCatalogRequest *)request handler:(void(^)(SENGFileCatalogResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetCompleteCatalog"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENGFileCatalogResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Allows a root client to request the full list of files
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)getCompleteCatalogWithMessage:(SENGFileCompleteCatalogRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetCompleteCatalog"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGFileCatalogResponse class]];
}

#pragma mark Download(FileRequest) returns (stream FileResponse)

/**
 * Allows a client to request a file from the cloud.
 * Download streams a FileResponse until the entire file is downloaded
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)downloadWithRequest:(SENGFileRequest *)request eventHandler:(void(^)(BOOL done, SENGFileResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToDownloadWithRequest:request eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Allows a client to request a file from the cloud.
 * Download streams a FileResponse until the entire file is downloaded
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToDownloadWithRequest:(SENGFileRequest *)request eventHandler:(void(^)(BOOL done, SENGFileResponse *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"Download"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENGFileResponse class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Allows a client to request a file from the cloud.
 * Download streams a FileResponse until the entire file is downloaded
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)downloadWithMessage:(SENGFileRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Download"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGFileResponse class]];
}

@end
#endif
