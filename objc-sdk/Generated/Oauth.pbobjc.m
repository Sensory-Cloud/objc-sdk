// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oauth/oauth.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Oauth.pbobjc.h"
#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SENGOauthRoot

@implementation SENGOauthRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[ValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SENGOauthRoot_FileDescriptor

static GPBFileDescriptor *SENGOauthRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sensory.api.oauth"
                                                 objcPrefix:@"SENG"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SENGTokenRequest

@implementation SENGTokenRequest

@dynamic clientId;
@dynamic secret;

typedef struct SENGTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSString *secret;
} SENGTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGTokenRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGTokenRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secret",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGTokenRequest_FieldNumber_Secret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGTokenRequest__storage_, secret),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGTokenRequest class]
                                     rootClass:[SENGOauthRoot class]
                                          file:SENGOauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGTokenRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGSignTokenRequest

@implementation SENGSignTokenRequest

@dynamic subject;
@dynamic scope;

typedef struct SENGSignTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  SENGSignTokenRequest_TokenScope scope;
  NSString *subject;
} SENGSignTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subject",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGSignTokenRequest_FieldNumber_Subject,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGSignTokenRequest__storage_, subject),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scope",
        .dataTypeSpecific.enumDescFunc = SENGSignTokenRequest_TokenScope_EnumDescriptor,
        .number = SENGSignTokenRequest_FieldNumber_Scope,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGSignTokenRequest__storage_, scope),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGSignTokenRequest class]
                                     rootClass:[SENGOauthRoot class]
                                          file:SENGOauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGSignTokenRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGSignTokenRequest_Scope_RawValue(SENGSignTokenRequest *message) {
  GPBDescriptor *descriptor = [SENGSignTokenRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGSignTokenRequest_FieldNumber_Scope];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGSignTokenRequest_Scope_RawValue(SENGSignTokenRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGSignTokenRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGSignTokenRequest_FieldNumber_Scope];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum SENGSignTokenRequest_TokenScope

GPBEnumDescriptor *SENGSignTokenRequest_TokenScope_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "User\000SuperAdmin\000BillingAdmin\000ReadOnlyAdm"
        "in\000EmailSelfVerify\000";
    static const int32_t values[] = {
        SENGSignTokenRequest_TokenScope_User,
        SENGSignTokenRequest_TokenScope_SuperAdmin,
        SENGSignTokenRequest_TokenScope_BillingAdmin,
        SENGSignTokenRequest_TokenScope_ReadOnlyAdmin,
        SENGSignTokenRequest_TokenScope_EmailSelfVerify,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENGSignTokenRequest_TokenScope)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENGSignTokenRequest_TokenScope_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENGSignTokenRequest_TokenScope_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENGSignTokenRequest_TokenScope_User:
    case SENGSignTokenRequest_TokenScope_SuperAdmin:
    case SENGSignTokenRequest_TokenScope_BillingAdmin:
    case SENGSignTokenRequest_TokenScope_ReadOnlyAdmin:
    case SENGSignTokenRequest_TokenScope_EmailSelfVerify:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENGWhoAmIRequest

@implementation SENGWhoAmIRequest


typedef struct SENGWhoAmIRequest__storage_ {
  uint32_t _has_storage_[1];
} SENGWhoAmIRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGWhoAmIRequest class]
                                     rootClass:[SENGOauthRoot class]
                                          file:SENGOauthRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SENGWhoAmIRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGWhoAmIResponse

@implementation SENGWhoAmIResponse

@dynamic clientId;
@dynamic tenantId;

typedef struct SENGWhoAmIResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSString *tenantId;
} SENGWhoAmIResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGWhoAmIResponse_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGWhoAmIResponse__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tenantId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGWhoAmIResponse_FieldNumber_TenantId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGWhoAmIResponse__storage_, tenantId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGWhoAmIResponse class]
                                     rootClass:[SENGOauthRoot class]
                                          file:SENGOauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGWhoAmIResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGPublicKeyRequest

@implementation SENGPublicKeyRequest

@dynamic keyId;

typedef struct SENGPublicKeyRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyId;
} SENGPublicKeyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGPublicKeyRequest_FieldNumber_KeyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGPublicKeyRequest__storage_, keyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGPublicKeyRequest class]
                                     rootClass:[SENGOauthRoot class]
                                          file:SENGOauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGPublicKeyRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGPublicKeyResponse

@implementation SENGPublicKeyResponse

@dynamic publicKey;
@dynamic keyType;

typedef struct SENGPublicKeyResponse__storage_ {
  uint32_t _has_storage_[1];
  SENGKeyType keyType;
  NSData *publicKey;
} SENGPublicKeyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "publicKey",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGPublicKeyResponse_FieldNumber_PublicKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGPublicKeyResponse__storage_, publicKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "keyType",
        .dataTypeSpecific.enumDescFunc = SENGKeyType_EnumDescriptor,
        .number = SENGPublicKeyResponse_FieldNumber_KeyType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGPublicKeyResponse__storage_, keyType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGPublicKeyResponse class]
                                     rootClass:[SENGOauthRoot class]
                                          file:SENGOauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGPublicKeyResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENGPublicKeyResponse_KeyType_RawValue(SENGPublicKeyResponse *message) {
  GPBDescriptor *descriptor = [SENGPublicKeyResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGPublicKeyResponse_FieldNumber_KeyType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENGPublicKeyResponse_KeyType_RawValue(SENGPublicKeyResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SENGPublicKeyResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENGPublicKeyResponse_FieldNumber_KeyType];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
