// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oauth/oauth.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

GPB_ENUM_FWD_DECLARE(SENKeyType);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SENSignTokenRequest_TokenScope

/** The scope of a token in a SignTokenRequest. */
typedef GPB_ENUM(SENSignTokenRequest_TokenScope) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENSignTokenRequest_TokenScope_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Standard User */
  SENSignTokenRequest_TokenScope_User = 0,

  /** Super Administrator, capable of all operations */
  SENSignTokenRequest_TokenScope_SuperAdmin = 1,

  /** Billing Administrator, capable of all billing-related operations */
  SENSignTokenRequest_TokenScope_BillingAdmin = 2,

  /** Read-only Administrator, capable of all read operations */
  SENSignTokenRequest_TokenScope_ReadOnlyAdmin = 3,

  /** Email verification, only allowed to verify user's email */
  SENSignTokenRequest_TokenScope_EmailSelfVerify = 4,
};

GPBEnumDescriptor *SENSignTokenRequest_TokenScope_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENSignTokenRequest_TokenScope_IsValidValue(int32_t value);

#pragma mark - SENOauthRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface SENOauthRoot : GPBRootObject
@end

#pragma mark - SENTokenRequest

typedef GPB_ENUM(SENTokenRequest_FieldNumber) {
  SENTokenRequest_FieldNumber_ClientId = 1,
  SENTokenRequest_FieldNumber_Secret = 2,
};

/**
 * Request to obtain an OAuth token
 **/
GPB_FINAL @interface SENTokenRequest : GPBMessage

/** Unique client identifier created at enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *clientId;

/** Secret value correspoinding to the client ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *secret;

@end

#pragma mark - SENSignTokenRequest

typedef GPB_ENUM(SENSignTokenRequest_FieldNumber) {
  SENSignTokenRequest_FieldNumber_Subject = 1,
  SENSignTokenRequest_FieldNumber_Scope = 2,
};

/**
 * Request to obtain an OAuth token on behalf of a user.
 **/
GPB_FINAL @interface SENSignTokenRequest : GPBMessage

/** User identifier - who the token is being issued to */
@property(nonatomic, readwrite, copy, null_resettable) NSString *subject;

/** The specific scope of the token */
@property(nonatomic, readwrite) SENSignTokenRequest_TokenScope scope;

@end

/**
 * Fetches the raw value of a @c SENSignTokenRequest's @c scope property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENSignTokenRequest_Scope_RawValue(SENSignTokenRequest *message);
/**
 * Sets the raw value of an @c SENSignTokenRequest's @c scope property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENSignTokenRequest_Scope_RawValue(SENSignTokenRequest *message, int32_t value);

#pragma mark - SENWhoAmIRequest

/**
 * Request to obtain information based on the passed authorization token
 **/
GPB_FINAL @interface SENWhoAmIRequest : GPBMessage

@end

#pragma mark - SENWhoAmIResponse

typedef GPB_ENUM(SENWhoAmIResponse_FieldNumber) {
  SENWhoAmIResponse_FieldNumber_ClientId = 1,
  SENWhoAmIResponse_FieldNumber_TenantId = 2,
};

/**
 * Response contect generated from the passed authorization token
 **/
GPB_FINAL @interface SENWhoAmIResponse : GPBMessage

/** Unique client identifier created at enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *clientId;

/** Unique tenant UUID for the particular client */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tenantId;

@end

#pragma mark - SENPublicKeyRequest

typedef GPB_ENUM(SENPublicKeyRequest_FieldNumber) {
  SENPublicKeyRequest_FieldNumber_KeyId = 1,
};

/**
 * Request for a public key by KeyID in order to validation a token signed by the Sensory Cloud
 **/
GPB_FINAL @interface SENPublicKeyRequest : GPBMessage

/** Unique keyId associated with the public key */
@property(nonatomic, readwrite, copy, null_resettable) NSString *keyId;

@end

#pragma mark - SENPublicKeyResponse

typedef GPB_ENUM(SENPublicKeyResponse_FieldNumber) {
  SENPublicKeyResponse_FieldNumber_PublicKey = 1,
  SENPublicKeyResponse_FieldNumber_KeyType = 2,
};

/**
 * Response to a public key request. Holds a byte array representing the public key.
 **/
GPB_FINAL @interface SENPublicKeyResponse : GPBMessage

/** The public key as bytes */
@property(nonatomic, readwrite, copy, null_resettable) NSData *publicKey;

/** The key type */
@property(nonatomic, readwrite) enum SENKeyType keyType;

@end

/**
 * Fetches the raw value of a @c SENPublicKeyResponse's @c keyType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENPublicKeyResponse_KeyType_RawValue(SENPublicKeyResponse *message);
/**
 * Sets the raw value of an @c SENPublicKeyResponse's @c keyType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENPublicKeyResponse_KeyType_RawValue(SENPublicKeyResponse *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
