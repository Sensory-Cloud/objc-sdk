// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oauth/oauth.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Oauth.pbobjc.h"
#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SENOauthRoot

@implementation SENOauthRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[ValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SENOauthRoot_FileDescriptor

static GPBFileDescriptor *SENOauthRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sensory.api.oauth"
                                                 objcPrefix:@"SEN"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SENTokenRequest

@implementation SENTokenRequest

@dynamic clientId;
@dynamic secret;

typedef struct SENTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSString *secret;
} SENTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENTokenRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENTokenRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secret",
        .dataTypeSpecific.clazz = Nil,
        .number = SENTokenRequest_FieldNumber_Secret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENTokenRequest__storage_, secret),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENTokenRequest class]
                                     rootClass:[SENOauthRoot class]
                                          file:SENOauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENTokenRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENSignTokenRequest

@implementation SENSignTokenRequest

@dynamic subject;
@dynamic scope;

typedef struct SENSignTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  SENSignTokenRequest_TokenScope scope;
  NSString *subject;
} SENSignTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subject",
        .dataTypeSpecific.clazz = Nil,
        .number = SENSignTokenRequest_FieldNumber_Subject,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENSignTokenRequest__storage_, subject),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scope",
        .dataTypeSpecific.enumDescFunc = SENSignTokenRequest_TokenScope_EnumDescriptor,
        .number = SENSignTokenRequest_FieldNumber_Scope,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENSignTokenRequest__storage_, scope),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENSignTokenRequest class]
                                     rootClass:[SENOauthRoot class]
                                          file:SENOauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENSignTokenRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENSignTokenRequest_Scope_RawValue(SENSignTokenRequest *message) {
  GPBDescriptor *descriptor = [SENSignTokenRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENSignTokenRequest_FieldNumber_Scope];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENSignTokenRequest_Scope_RawValue(SENSignTokenRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [SENSignTokenRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENSignTokenRequest_FieldNumber_Scope];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum SENSignTokenRequest_TokenScope

GPBEnumDescriptor *SENSignTokenRequest_TokenScope_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "User\000SuperAdmin\000BillingAdmin\000ReadOnlyAdm"
        "in\000EmailSelfVerify\000";
    static const int32_t values[] = {
        SENSignTokenRequest_TokenScope_User,
        SENSignTokenRequest_TokenScope_SuperAdmin,
        SENSignTokenRequest_TokenScope_BillingAdmin,
        SENSignTokenRequest_TokenScope_ReadOnlyAdmin,
        SENSignTokenRequest_TokenScope_EmailSelfVerify,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENSignTokenRequest_TokenScope)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENSignTokenRequest_TokenScope_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENSignTokenRequest_TokenScope_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENSignTokenRequest_TokenScope_User:
    case SENSignTokenRequest_TokenScope_SuperAdmin:
    case SENSignTokenRequest_TokenScope_BillingAdmin:
    case SENSignTokenRequest_TokenScope_ReadOnlyAdmin:
    case SENSignTokenRequest_TokenScope_EmailSelfVerify:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENWhoAmIRequest

@implementation SENWhoAmIRequest


typedef struct SENWhoAmIRequest__storage_ {
  uint32_t _has_storage_[1];
} SENWhoAmIRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENWhoAmIRequest class]
                                     rootClass:[SENOauthRoot class]
                                          file:SENOauthRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SENWhoAmIRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENWhoAmIResponse

@implementation SENWhoAmIResponse

@dynamic clientId;
@dynamic tenantId;

typedef struct SENWhoAmIResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSString *tenantId;
} SENWhoAmIResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENWhoAmIResponse_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENWhoAmIResponse__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tenantId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENWhoAmIResponse_FieldNumber_TenantId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENWhoAmIResponse__storage_, tenantId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENWhoAmIResponse class]
                                     rootClass:[SENOauthRoot class]
                                          file:SENOauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENWhoAmIResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENPublicKeyRequest

@implementation SENPublicKeyRequest

@dynamic keyId;

typedef struct SENPublicKeyRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyId;
} SENPublicKeyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENPublicKeyRequest_FieldNumber_KeyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENPublicKeyRequest__storage_, keyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENPublicKeyRequest class]
                                     rootClass:[SENOauthRoot class]
                                          file:SENOauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENPublicKeyRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENPublicKeyResponse

@implementation SENPublicKeyResponse

@dynamic publicKey;
@dynamic keyType;

typedef struct SENPublicKeyResponse__storage_ {
  uint32_t _has_storage_[1];
  SENKeyType keyType;
  NSData *publicKey;
} SENPublicKeyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "publicKey",
        .dataTypeSpecific.clazz = Nil,
        .number = SENPublicKeyResponse_FieldNumber_PublicKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENPublicKeyResponse__storage_, publicKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "keyType",
        .dataTypeSpecific.enumDescFunc = SENKeyType_EnumDescriptor,
        .number = SENPublicKeyResponse_FieldNumber_KeyType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENPublicKeyResponse__storage_, keyType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENPublicKeyResponse class]
                                     rootClass:[SENOauthRoot class]
                                          file:SENOauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENPublicKeyResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENPublicKeyResponse_KeyType_RawValue(SENPublicKeyResponse *message) {
  GPBDescriptor *descriptor = [SENPublicKeyResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENPublicKeyResponse_FieldNumber_KeyType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENPublicKeyResponse_KeyType_RawValue(SENPublicKeyResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SENPublicKeyResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENPublicKeyResponse_FieldNumber_KeyType];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
