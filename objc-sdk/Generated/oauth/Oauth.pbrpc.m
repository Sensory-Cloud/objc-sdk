// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: oauth/oauth.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "Oauth.pbrpc.h"
#import "Oauth.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"

@implementation SENOauthService

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.oauth"
                 serviceName:@"OauthService"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.oauth"
                 serviceName:@"OauthService"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark GetToken(TokenRequest) returns (TokenResponse)

/**
 * Obtain an OAuth token for the given credentials
 * Endpoint does not require an authorization token
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getTokenWithRequest:(SENTokenRequest *)request handler:(void(^)(SENTokenResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetTokenWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Obtain an OAuth token for the given credentials
 * Endpoint does not require an authorization token
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetTokenWithRequest:(SENTokenRequest *)request handler:(void(^)(SENTokenResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetToken"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENTokenResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Obtain an OAuth token for the given credentials
 * Endpoint does not require an authorization token
 */
- (GRPCUnaryProtoCall *)getTokenWithMessage:(SENTokenRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetToken"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENTokenResponse class]];
}

#pragma mark SignToken(SignTokenRequest) returns (TokenResponse)

/**
 * Sign and return an OAuth token. The passed authorization token must have the SignToken authority.
 * Therefore, Devices are not allowed to make this request.
 * Sign does not validate credentials, and therefore should be used in specific circumstances where credentials are not required.
 * One common usecase for the Sign request is an Io server issuing a user-scoped token after a successful authentication.
 * Only a limited subset of of scopes may be requested from the SignToken request.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)signTokenWithRequest:(SENSignTokenRequest *)request handler:(void(^)(SENTokenResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToSignTokenWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Sign and return an OAuth token. The passed authorization token must have the SignToken authority.
 * Therefore, Devices are not allowed to make this request.
 * Sign does not validate credentials, and therefore should be used in specific circumstances where credentials are not required.
 * One common usecase for the Sign request is an Io server issuing a user-scoped token after a successful authentication.
 * Only a limited subset of of scopes may be requested from the SignToken request.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToSignTokenWithRequest:(SENSignTokenRequest *)request handler:(void(^)(SENTokenResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"SignToken"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENTokenResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Sign and return an OAuth token. The passed authorization token must have the SignToken authority.
 * Therefore, Devices are not allowed to make this request.
 * Sign does not validate credentials, and therefore should be used in specific circumstances where credentials are not required.
 * One common usecase for the Sign request is an Io server issuing a user-scoped token after a successful authentication.
 * Only a limited subset of of scopes may be requested from the SignToken request.
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)signTokenWithMessage:(SENSignTokenRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"SignToken"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENTokenResponse class]];
}

#pragma mark GetWhoAmI(WhoAmIRequest) returns (WhoAmIResponse)

/**
 * Obtain information about oneself based on the passed OAuth token
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getWhoAmIWithRequest:(SENWhoAmIRequest *)request handler:(void(^)(SENWhoAmIResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetWhoAmIWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Obtain information about oneself based on the passed OAuth token
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetWhoAmIWithRequest:(SENWhoAmIRequest *)request handler:(void(^)(SENWhoAmIResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetWhoAmI"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENWhoAmIResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Obtain information about oneself based on the passed OAuth token
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)getWhoAmIWithMessage:(SENWhoAmIRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetWhoAmI"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENWhoAmIResponse class]];
}

#pragma mark GetPublicKey(PublicKeyRequest) returns (PublicKeyResponse)

/**
 * Retrieve a public key by ID. Public keys retrieved by this endpoint can be used
 * to validate tokens signed by the Sensory cloud.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getPublicKeyWithRequest:(SENPublicKeyRequest *)request handler:(void(^)(SENPublicKeyResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetPublicKeyWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Retrieve a public key by ID. Public keys retrieved by this endpoint can be used
 * to validate tokens signed by the Sensory cloud.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetPublicKeyWithRequest:(SENPublicKeyRequest *)request handler:(void(^)(SENPublicKeyResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetPublicKey"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENPublicKeyResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Retrieve a public key by ID. Public keys retrieved by this endpoint can be used
 * to validate tokens signed by the Sensory cloud.
 */
- (GRPCUnaryProtoCall *)getPublicKeyWithMessage:(SENPublicKeyRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetPublicKey"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENPublicKeyResponse class]];
}

@end
#endif
