// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/assistant/assistant.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Assistant.pbobjc.h"
#import "Validate.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(SENAssistantMessage);
GPBObjCClassDeclaration(SENAssistantMessageConfig);
GPBObjCClassDeclaration(SENAssistantPostProcessingActionRequest);
GPBObjCClassDeclaration(SENAssistantPostProcessingActionResponse);
GPBObjCClassDeclaration(SENIntent);

#pragma mark - SENAssistantRoot

@implementation SENAssistantRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[SENValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SENAssistantRoot_FileDescriptor

static GPBFileDescriptor *SENAssistantRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sensory.api.v1.assistant"
                                                 objcPrefix:@"SEN"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SENAssistantPostProcessingAction

GPBEnumDescriptor *SENAssistantPostProcessingAction_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NotSet\000Final\000";
    static const int32_t values[] = {
        SENAssistantPostProcessingAction_NotSet,
        SENAssistantPostProcessingAction_Final,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENAssistantPostProcessingAction)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENAssistantPostProcessingAction_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENAssistantPostProcessingAction_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENAssistantPostProcessingAction_NotSet:
    case SENAssistantPostProcessingAction_Final:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENAssistantMessageRequest

@implementation SENAssistantMessageRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic message;
@dynamic hasPostProcessingAction, postProcessingAction;

typedef struct SENAssistantMessageRequest__storage_ {
  uint32_t _has_storage_[2];
  SENAssistantMessageConfig *config;
  SENAssistantMessage *message;
  SENAssistantPostProcessingActionRequest *postProcessingAction;
} SENAssistantMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAssistantMessageConfig),
        .number = SENAssistantMessageRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAssistantMessageRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAssistantMessage),
        .number = SENAssistantMessageRequest_FieldNumber_Message,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAssistantMessageRequest__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "postProcessingAction",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAssistantPostProcessingActionRequest),
        .number = SENAssistantMessageRequest_FieldNumber_PostProcessingAction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAssistantMessageRequest__storage_, postProcessingAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAssistantMessageRequest class]
                                     rootClass:[SENAssistantRoot class]
                                          file:SENAssistantRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAssistantMessageRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\n\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENAssistantMessageRequest_ClearStreamingRequestOneOfCase(SENAssistantMessageRequest *message) {
  GPBDescriptor *descriptor = [SENAssistantMessageRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENAssistantMessage

@implementation SENAssistantMessage

@dynamic messageOneOfCase;
@dynamic text;
@dynamic audioContent;

typedef struct SENAssistantMessage__storage_ {
  uint32_t _has_storage_[2];
  NSString *text;
  NSData *audioContent;
} SENAssistantMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAssistantMessage_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAssistantMessage__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAssistantMessage_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAssistantMessage__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAssistantMessage class]
                                     rootClass:[SENAssistantRoot class]
                                          file:SENAssistantRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAssistantMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "message",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENAssistantMessage_ClearMessageOneOfCase(SENAssistantMessage *message) {
  GPBDescriptor *descriptor = [SENAssistantMessage descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENIntent

@implementation SENIntent

@dynamic name;
@dynamic confidence;

typedef struct SENIntent__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  double confidence;
} SENIntent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SENIntent_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENIntent__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.clazz = Nil,
        .number = SENIntent_FieldNumber_Confidence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENIntent__storage_, confidence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENIntent class]
                                     rootClass:[SENAssistantRoot class]
                                          file:SENAssistantRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENIntent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENAssistantMessageResponse

@implementation SENAssistantMessageResponse

@dynamic text;
@dynamic audioContent;
@dynamic hasIntent, intent;
@dynamic intentsArray, intentsArray_Count;
@dynamic isAudioComplete;
@dynamic hasPostProcessingAction, postProcessingAction;

typedef struct SENAssistantMessageResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
  NSData *audioContent;
  SENIntent *intent;
  NSMutableArray *intentsArray;
  SENAssistantPostProcessingActionResponse *postProcessingAction;
} SENAssistantMessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAssistantMessageResponse_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAssistantMessageResponse__storage_, text),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAssistantMessageResponse_FieldNumber_AudioContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENAssistantMessageResponse__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "intent",
        .dataTypeSpecific.clazz = GPBObjCClass(SENIntent),
        .number = SENAssistantMessageResponse_FieldNumber_Intent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENAssistantMessageResponse__storage_, intent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENIntent),
        .number = SENAssistantMessageResponse_FieldNumber_IntentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENAssistantMessageResponse__storage_, intentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isAudioComplete",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAssistantMessageResponse_FieldNumber_IsAudioComplete,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "postProcessingAction",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAssistantPostProcessingActionResponse),
        .number = SENAssistantMessageResponse_FieldNumber_PostProcessingAction,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENAssistantMessageResponse__storage_, postProcessingAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAssistantMessageResponse class]
                                     rootClass:[SENAssistantRoot class]
                                          file:SENAssistantRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAssistantMessageResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\014\000\005\017\000\n\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENAssistantMessageConfig

@implementation SENAssistantMessageConfig

@dynamic userId;
@dynamic deviceId;
@dynamic modelName;
@dynamic includeAudioResponse;

typedef struct SENAssistantMessageConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *deviceId;
  NSString *modelName;
} SENAssistantMessageConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAssistantMessageConfig_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAssistantMessageConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAssistantMessageConfig_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENAssistantMessageConfig__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAssistantMessageConfig_FieldNumber_ModelName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENAssistantMessageConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "includeAudioResponse",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAssistantMessageConfig_FieldNumber_IncludeAudioResponse,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAssistantMessageConfig class]
                                     rootClass:[SENAssistantRoot class]
                                          file:SENAssistantRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAssistantMessageConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\006\000\003\010\000\004\t\000\005\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENAssistantPostProcessingActionRequest

@implementation SENAssistantPostProcessingActionRequest

@dynamic actionId;
@dynamic action;

typedef struct SENAssistantPostProcessingActionRequest__storage_ {
  uint32_t _has_storage_[1];
  SENAssistantPostProcessingAction action;
  NSString *actionId;
} SENAssistantPostProcessingActionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actionId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAssistantPostProcessingActionRequest_FieldNumber_ActionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAssistantPostProcessingActionRequest__storage_, actionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = SENAssistantPostProcessingAction_EnumDescriptor,
        .number = SENAssistantPostProcessingActionRequest_FieldNumber_Action,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENAssistantPostProcessingActionRequest__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAssistantPostProcessingActionRequest class]
                                     rootClass:[SENAssistantRoot class]
                                          file:SENAssistantRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAssistantPostProcessingActionRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENAssistantPostProcessingActionRequest_Action_RawValue(SENAssistantPostProcessingActionRequest *message) {
  GPBDescriptor *descriptor = [SENAssistantPostProcessingActionRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAssistantPostProcessingActionRequest_FieldNumber_Action];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENAssistantPostProcessingActionRequest_Action_RawValue(SENAssistantPostProcessingActionRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [SENAssistantPostProcessingActionRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAssistantPostProcessingActionRequest_FieldNumber_Action];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENAssistantPostProcessingActionResponse

@implementation SENAssistantPostProcessingActionResponse

@dynamic actionId;
@dynamic action;

typedef struct SENAssistantPostProcessingActionResponse__storage_ {
  uint32_t _has_storage_[1];
  SENAssistantPostProcessingAction action;
  NSString *actionId;
} SENAssistantPostProcessingActionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actionId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAssistantPostProcessingActionResponse_FieldNumber_ActionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAssistantPostProcessingActionResponse__storage_, actionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = SENAssistantPostProcessingAction_EnumDescriptor,
        .number = SENAssistantPostProcessingActionResponse_FieldNumber_Action,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENAssistantPostProcessingActionResponse__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAssistantPostProcessingActionResponse class]
                                     rootClass:[SENAssistantRoot class]
                                          file:SENAssistantRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAssistantPostProcessingActionResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENAssistantPostProcessingActionResponse_Action_RawValue(SENAssistantPostProcessingActionResponse *message) {
  GPBDescriptor *descriptor = [SENAssistantPostProcessingActionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAssistantPostProcessingActionResponse_FieldNumber_Action];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENAssistantPostProcessingActionResponse_Action_RawValue(SENAssistantPostProcessingActionResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SENAssistantPostProcessingActionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAssistantPostProcessingActionResponse_FieldNumber_Action];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
