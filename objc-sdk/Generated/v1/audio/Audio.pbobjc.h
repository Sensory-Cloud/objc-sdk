// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/audio/audio.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class SENAAudioConfig;
@class SENAAudioModel;
@class SENAAudioRequestPostProcessingAction;
@class SENAAudioResponsePostProcessingAction;
@class SENAAuthenticateConfig;
@class SENACreateEnrollmentConfig;
@class SENACreateEnrollmentEventConfig;
@class SENACustomVocabularyWords;
@class SENATranscribeConfig;
@class SENATranscribeWord;
@class SENATranscribeWordResponse;
@class SENAValidateEnrolledEventConfig;
@class SENAValidateEventConfig;
@class SENAVoiceSynthesisConfig;
@class SENEnrollmentToken;
@class SENTokenResponse;
GPB_ENUM_FWD_DECLARE(SENModelType);
GPB_ENUM_FWD_DECLARE(SENTechnologyType);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SENAAudioPostProcessingAction

typedef GPB_ENUM(SENAAudioPostProcessingAction) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENAAudioPostProcessingAction_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Default value to perform no action */
  SENAAudioPostProcessingAction_NotSet = 0,

  /** Request the audio engine to flush its buffers. */
  SENAAudioPostProcessingAction_Flush = 1,

  /** Request the audio engine reset itself. */
  SENAAudioPostProcessingAction_Reset = 2,

  /** Indicates this message is the final message. The audio engine will create a final result, return it to the client, and close the stream. */
  SENAAudioPostProcessingAction_Final = 3,
};

GPBEnumDescriptor *SENAAudioPostProcessingAction_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENAAudioPostProcessingAction_IsValidValue(int32_t value);

#pragma mark - Enum SENAWordState

typedef GPB_ENUM(SENAWordState) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENAWordState_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Default state is PENDING which indicates that the speech system may decide to change the word in the future given additional audio data */
  SENAWordState_WordstatePending = 0,

  /** Final state FINAL indicates that the word has moved out of the active logit buffer and can no longer be updated given additional information */
  SENAWordState_WordstateFinal = 1,
};

GPBEnumDescriptor *SENAWordState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENAWordState_IsValidValue(int32_t value);

#pragma mark - Enum SENAThresholdSensitivity

/** Specifies how sensitive the event threshold of the model should be */
typedef GPB_ENUM(SENAThresholdSensitivity) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENAThresholdSensitivity_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /**
   * Expects about 32 False Accepts per day for Fixed-Trigger models,
   * and about 10 False Accepts per day for SoundID models
   **/
  SENAThresholdSensitivity_Lowest = 0,

  /**
   * Expects about 16 False Accepts per day for Fixed-Trigger models,
   * and about 5 False Accepts per day for SoundID models
   **/
  SENAThresholdSensitivity_Low = 1,

  /**
   * Expects about 8 False Accepts per day for Fixed-Trigger models,
   * and about 3 False Accepts per day for SoundID models
   **/
  SENAThresholdSensitivity_Medium = 2,

  /**
   * Expects about 3 False Accepts per day for Fixed-Trigger models,
   * and about 2 False Accepts per day for SoundID models
   **/
  SENAThresholdSensitivity_High = 3,

  /**
   * Expects about 2 False Accepts per day for Fixed-Trigger models,
   * and about 1 False Accept per day for SoundID models
   **/
  SENAThresholdSensitivity_Highest = 4,
};

GPBEnumDescriptor *SENAThresholdSensitivity_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENAThresholdSensitivity_IsValidValue(int32_t value);

#pragma mark - Enum SENAAuthenticateConfig_ThresholdSecurity

/** Specifies the authentication security mode */
typedef GPB_ENUM(SENAAuthenticateConfig_ThresholdSecurity) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENAAuthenticateConfig_ThresholdSecurity_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /**
   * Default  Setting.  Targets  low  Imposter  Accept  (IA).  Recommended  when  TSSV  is  used  solely  for
   * biometric authentication. Generally this mode assumes the user will produce the voice password in
   * isolation (rather than part of a voice-query) and over short listening windows (e.g., 7 seconds or
   * less).  This  provides  the  ultimate  rejection  of  imposter  voices  at  the  expense  of  false-rejects,
   * particularly in high-noise environments 5 dB SNR and below.
   **/
  SENAAuthenticateConfig_ThresholdSecurity_High = 0,

  /**
   * Targets low False Reject (FR). Recommended to achieve low false reject or for applications where
   * errors in imposter accept are not considered severe. Provides reduced rejection in extremely noisy
   * environments. This mode is typically selected when TSSV is used in conjunction with a front-end
   * fixed-trigger or part of a combined solution for voice-triggering in which the goal may be to gently
   * reduce  voice-trigger  false  accepts  in  the  presence  of  noise,  or  to  reduce  the  chances  that  non-
   * enrollees who say the wake word might accidentally cause an always-listening device to false-fire.
   **/
  SENAAuthenticateConfig_ThresholdSecurity_Low = 1,
};

GPBEnumDescriptor *SENAAuthenticateConfig_ThresholdSecurity_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENAAuthenticateConfig_ThresholdSecurity_IsValidValue(int32_t value);

#pragma mark - Enum SENAAudioConfig_AudioEncoding

/** The encoding of the audio data sent in the request. */
typedef GPB_ENUM(SENAAudioConfig_AudioEncoding) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENAAudioConfig_AudioEncoding_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Uncompressed 16-bit signed little-endian samples (Linear PCM). */
  SENAAudioConfig_AudioEncoding_Linear16 = 0,

  /**
   * `FLAC` (Free Lossless Audio
   * Codec) is the recommended encoding because it is
   * lossless--therefore recognition is not compromised--and
   * requires only about half the bandwidth of `LINEAR16`.
   **/
  SENAAudioConfig_AudioEncoding_Flac = 1,

  /** 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law. */
  SENAAudioConfig_AudioEncoding_Mulaw = 2,
};

GPBEnumDescriptor *SENAAudioConfig_AudioEncoding_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENAAudioConfig_AudioEncoding_IsValidValue(int32_t value);

#pragma mark - SENAAudioRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface SENAAudioRoot : GPBRootObject
@end

#pragma mark - SENAGetModelsRequest

/**
 * Request to get a list of the available models
 **/
GPB_FINAL @interface SENAGetModelsRequest : GPBMessage

@end

#pragma mark - SENAAudioModel

typedef GPB_ENUM(SENAAudioModel_FieldNumber) {
  SENAAudioModel_FieldNumber_Name = 1,
  SENAAudioModel_FieldNumber_IsEnrollable = 2,
  SENAAudioModel_FieldNumber_ModelType = 3,
  SENAAudioModel_FieldNumber_FixedPhrase = 4,
  SENAAudioModel_FieldNumber_SampleRate = 5,
  SENAAudioModel_FieldNumber_VersionsArray = 6,
  SENAAudioModel_FieldNumber_Technology = 7,
  SENAAudioModel_FieldNumber_IsLivenessSupported = 8,
};

/**
 * A model that is available for use
 **/
GPB_FINAL @interface SENAAudioModel : GPBMessage

/** The name of the model */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** Boolean representing if a model can be used in enrollment */
@property(nonatomic, readwrite) BOOL isEnrollable;

/** Model type */
@property(nonatomic, readwrite) enum SENModelType modelType;

/** Specific phrase used for enrollment (if applicable) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fixedPhrase;

/** Required sampling rate for the data */
@property(nonatomic, readwrite) int32_t sampleRate;

/** List of versions available for this model */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *versionsArray;
/** The number of items in @c versionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger versionsArray_Count;

/** The technology backing this model */
@property(nonatomic, readwrite) enum SENTechnologyType technology;

/** Indicates if liveness is supported by this model */
@property(nonatomic, readwrite) BOOL isLivenessSupported;

@end

/**
 * Fetches the raw value of a @c SENAAudioModel's @c modelType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENAAudioModel_ModelType_RawValue(SENAAudioModel *message);
/**
 * Sets the raw value of an @c SENAAudioModel's @c modelType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENAAudioModel_ModelType_RawValue(SENAAudioModel *message, int32_t value);

/**
 * Fetches the raw value of a @c SENAAudioModel's @c technology property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENAAudioModel_Technology_RawValue(SENAAudioModel *message);
/**
 * Sets the raw value of an @c SENAAudioModel's @c technology property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENAAudioModel_Technology_RawValue(SENAAudioModel *message, int32_t value);

#pragma mark - SENAAudioRequestPostProcessingAction

typedef GPB_ENUM(SENAAudioRequestPostProcessingAction_FieldNumber) {
  SENAAudioRequestPostProcessingAction_FieldNumber_ActionId = 1,
  SENAAudioRequestPostProcessingAction_FieldNumber_Action = 2,
};

/**
 * Action that can be passed along with any audio data. This message instructs the audio engine to
 * perfrom some kind of action after the data is processed.
 **/
GPB_FINAL @interface SENAAudioRequestPostProcessingAction : GPBMessage

/**
 * ID that can be set by the client. If a flush or reset is requested,
 * this ID will be returned to the client upon a successful flush or reset.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *actionId;

/** The specific action that is being requested. */
@property(nonatomic, readwrite) SENAAudioPostProcessingAction action;

@end

/**
 * Fetches the raw value of a @c SENAAudioRequestPostProcessingAction's @c action property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENAAudioRequestPostProcessingAction_Action_RawValue(SENAAudioRequestPostProcessingAction *message);
/**
 * Sets the raw value of an @c SENAAudioRequestPostProcessingAction's @c action property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENAAudioRequestPostProcessingAction_Action_RawValue(SENAAudioRequestPostProcessingAction *message, int32_t value);

#pragma mark - SENAAudioResponsePostProcessingAction

typedef GPB_ENUM(SENAAudioResponsePostProcessingAction_FieldNumber) {
  SENAAudioResponsePostProcessingAction_FieldNumber_ActionId = 1,
  SENAAudioResponsePostProcessingAction_FieldNumber_Action = 2,
};

/**
 * Metadata that can be passed along with any audio response indicating
 **/
GPB_FINAL @interface SENAAudioResponsePostProcessingAction : GPBMessage

/** ID that was optionally set by the client with the metadata request. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *actionId;

/** The specific action that was completed. */
@property(nonatomic, readwrite) SENAAudioPostProcessingAction action;

@end

/**
 * Fetches the raw value of a @c SENAAudioResponsePostProcessingAction's @c action property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENAAudioResponsePostProcessingAction_Action_RawValue(SENAAudioResponsePostProcessingAction *message);
/**
 * Sets the raw value of an @c SENAAudioResponsePostProcessingAction's @c action property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENAAudioResponsePostProcessingAction_Action_RawValue(SENAAudioResponsePostProcessingAction *message, int32_t value);

#pragma mark - SENAGetModelsResponse

typedef GPB_ENUM(SENAGetModelsResponse_FieldNumber) {
  SENAGetModelsResponse_FieldNumber_ModelsArray = 1,
};

/**
 * Response containing the models currently available
 **/
GPB_FINAL @interface SENAGetModelsResponse : GPBMessage

/** List of supported models */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SENAAudioModel*> *modelsArray;
/** The number of items in @c modelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger modelsArray_Count;

@end

#pragma mark - SENACreateEnrollmentRequest

typedef GPB_ENUM(SENACreateEnrollmentRequest_FieldNumber) {
  SENACreateEnrollmentRequest_FieldNumber_Config = 1,
  SENACreateEnrollmentRequest_FieldNumber_AudioContent = 2,
};

typedef GPB_ENUM(SENACreateEnrollmentRequest_StreamingRequest_OneOfCase) {
  SENACreateEnrollmentRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENACreateEnrollmentRequest_StreamingRequest_OneOfCase_Config = 1,
  SENACreateEnrollmentRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `CreateEnrollment` method.
 * Multiple `CreateEnrollmentRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENACreateEnrollmentRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENACreateEnrollmentRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `CreateEnrollmentRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENACreateEnrollmentConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `CreateEnrollmentRequest` messages. The first
 * `CreateEnrollmentRequest` message must not contain `audioContent` data
 * and all subsequent `CreateEnrollmentRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `AudioConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENACreateEnrollmentRequest_ClearStreamingRequestOneOfCase(SENACreateEnrollmentRequest *message);

#pragma mark - SENAAuthenticateRequest

typedef GPB_ENUM(SENAAuthenticateRequest_FieldNumber) {
  SENAAuthenticateRequest_FieldNumber_Config = 1,
  SENAAuthenticateRequest_FieldNumber_AudioContent = 2,
};

typedef GPB_ENUM(SENAAuthenticateRequest_StreamingRequest_OneOfCase) {
  SENAAuthenticateRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENAAuthenticateRequest_StreamingRequest_OneOfCase_Config = 1,
  SENAAuthenticateRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `Authenticate` method.
 * Multiple `AuthenticateRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENAAuthenticateRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENAAuthenticateRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `AuthenticateRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAAuthenticateConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `AuthenticateRequest` messages. The first
 * `AuthenticateRequest` message must not contain `audioContent` data
 * and all subsequent `AuthenticateRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `AuthenticateConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENAAuthenticateRequest_ClearStreamingRequestOneOfCase(SENAAuthenticateRequest *message);

#pragma mark - SENAValidateEventRequest

typedef GPB_ENUM(SENAValidateEventRequest_FieldNumber) {
  SENAValidateEventRequest_FieldNumber_Config = 1,
  SENAValidateEventRequest_FieldNumber_AudioContent = 2,
  SENAValidateEventRequest_FieldNumber_PostProcessingAction = 10,
};

typedef GPB_ENUM(SENAValidateEventRequest_StreamingRequest_OneOfCase) {
  SENAValidateEventRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENAValidateEventRequest_StreamingRequest_OneOfCase_Config = 1,
  SENAValidateEventRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `ValidateEvent` method.
 * Multiple `ValidateEventRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENAValidateEventRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENAValidateEventRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `ValidateEventRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAValidateEventConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `ValidateEventRequest` messages. The first
 * `ValidateEventRequest` message must not contain `audioContent` data
 * and all subsequent `ValidateEventRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `ValidateEventConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

/** Message used to instruct the audio recognition engine to flush or reset. */
@property(nonatomic, readwrite, strong, null_resettable) SENAAudioRequestPostProcessingAction *postProcessingAction;
/** Test to see if @c postProcessingAction has been set. */
@property(nonatomic, readwrite) BOOL hasPostProcessingAction;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENAValidateEventRequest_ClearStreamingRequestOneOfCase(SENAValidateEventRequest *message);

#pragma mark - SENACreateEnrolledEventRequest

typedef GPB_ENUM(SENACreateEnrolledEventRequest_FieldNumber) {
  SENACreateEnrolledEventRequest_FieldNumber_Config = 1,
  SENACreateEnrolledEventRequest_FieldNumber_AudioContent = 2,
};

typedef GPB_ENUM(SENACreateEnrolledEventRequest_StreamingRequest_OneOfCase) {
  SENACreateEnrolledEventRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENACreateEnrolledEventRequest_StreamingRequest_OneOfCase_Config = 1,
  SENACreateEnrolledEventRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `CreateEnrolledEvent` method.
 * Multiple `CreateEnrolledEventRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENACreateEnrolledEventRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENACreateEnrolledEventRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `CreateEnrolledEventRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENACreateEnrollmentEventConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `CreateEnrolledEventRequest` messages. The first
 * `CreateEnrolledEventRequest` message must not contain `audioContent` data
 * and all subsequent `CreateEnrolledEventRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `AudioConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENACreateEnrolledEventRequest_ClearStreamingRequestOneOfCase(SENACreateEnrolledEventRequest *message);

#pragma mark - SENAValidateEnrolledEventRequest

typedef GPB_ENUM(SENAValidateEnrolledEventRequest_FieldNumber) {
  SENAValidateEnrolledEventRequest_FieldNumber_Config = 1,
  SENAValidateEnrolledEventRequest_FieldNumber_AudioContent = 2,
};

typedef GPB_ENUM(SENAValidateEnrolledEventRequest_StreamingRequest_OneOfCase) {
  SENAValidateEnrolledEventRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENAValidateEnrolledEventRequest_StreamingRequest_OneOfCase_Config = 1,
  SENAValidateEnrolledEventRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `ValidateEnrolledEvent` method.
 * Multiple `ValidateEnrolledEventRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENAValidateEnrolledEventRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENAValidateEnrolledEventRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `ValidateEnrolledEventRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAValidateEnrolledEventConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `ValidateEnrolledEventRequest` messages. The first
 * `ValidateEnrolledEventRequest` message must not contain `audioContent` data
 * and all subsequent `ValidateEnrolledEventRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `ValidateEnrolledEventConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENAValidateEnrolledEventRequest_ClearStreamingRequestOneOfCase(SENAValidateEnrolledEventRequest *message);

#pragma mark - SENATranscribeRequest

typedef GPB_ENUM(SENATranscribeRequest_FieldNumber) {
  SENATranscribeRequest_FieldNumber_Config = 1,
  SENATranscribeRequest_FieldNumber_AudioContent = 2,
  SENATranscribeRequest_FieldNumber_PostProcessingAction = 10,
};

typedef GPB_ENUM(SENATranscribeRequest_StreamingRequest_OneOfCase) {
  SENATranscribeRequest_StreamingRequest_OneOfCase_GPBUnsetOneOfCase = 0,
  SENATranscribeRequest_StreamingRequest_OneOfCase_Config = 1,
  SENATranscribeRequest_StreamingRequest_OneOfCase_AudioContent = 2,
};

/**
 * The top-level message sent by the client for the `Transcribe` method.
 * Multiple `TranscribeRequest` messages are sent in a stream. The first message
 * must contain a `config` message and must not contain `audioContent`.
 * All subsequent messages must contain `audioContent` and
 * must not contain a `config` message.
 **/
GPB_FINAL @interface SENATranscribeRequest : GPBMessage

/** The streaming request, which is either a config or audio content. */
@property(nonatomic, readonly) SENATranscribeRequest_StreamingRequest_OneOfCase streamingRequestOneOfCase;

/**
 * Provides information that specifies how to process the
 * request. The first `TranscribeRequest` message must contain a
 * `config`  message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENATranscribeConfig *config;

/**
 * The audio data to be recognized. Sequential chunks of audio data are sent
 * in sequential `TranscribeRequest` messages. The first
 * `TranscribeRequest` message must not contain `audioContent` data
 * and all subsequent `TranscribeRequest` messages must contain
 * `audioContent` data. The audio bytes must be encoded as specified in
 * `TranscribeConfig`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

/** Message used to instruct the audio recognition engine to flush or reset. */
@property(nonatomic, readwrite, strong, null_resettable) SENAAudioRequestPostProcessingAction *postProcessingAction;
/** Test to see if @c postProcessingAction has been set. */
@property(nonatomic, readwrite) BOOL hasPostProcessingAction;

@end

/**
 * Clears whatever value was set for the oneof 'streamingRequest'.
 **/
void SENATranscribeRequest_ClearStreamingRequestOneOfCase(SENATranscribeRequest *message);

#pragma mark - SENASynthesizeSpeechRequest

typedef GPB_ENUM(SENASynthesizeSpeechRequest_FieldNumber) {
  SENASynthesizeSpeechRequest_FieldNumber_Phrase = 1,
  SENASynthesizeSpeechRequest_FieldNumber_Config = 2,
};

/**
 * The top-level message sent by the client for the `SynthesizeSpeech` method.
 **/
GPB_FINAL @interface SENASynthesizeSpeechRequest : GPBMessage

/** The raw text to create voice synthesis for */
@property(nonatomic, readwrite, copy, null_resettable) NSString *phrase;

/** Configurations for the synthesized voice */
@property(nonatomic, readwrite, strong, null_resettable) SENAVoiceSynthesisConfig *config;
/** Test to see if @c config has been set. */
@property(nonatomic, readwrite) BOOL hasConfig;

@end

#pragma mark - SENACreateEnrollmentResponse

typedef GPB_ENUM(SENACreateEnrollmentResponse_FieldNumber) {
  SENACreateEnrollmentResponse_FieldNumber_PercentComplete = 1,
  SENACreateEnrollmentResponse_FieldNumber_AudioEnergy = 2,
  SENACreateEnrollmentResponse_FieldNumber_EnrollmentId = 3,
  SENACreateEnrollmentResponse_FieldNumber_ModelName = 4,
  SENACreateEnrollmentResponse_FieldNumber_ModelVersion = 5,
  SENACreateEnrollmentResponse_FieldNumber_ModelPrompt = 6,
  SENACreateEnrollmentResponse_FieldNumber_PercentSegmentComplete = 7,
  SENACreateEnrollmentResponse_FieldNumber_EnrollmentToken = 8,
};

/**
 * Response to an enrollment request
 **/
GPB_FINAL @interface SENACreateEnrollmentResponse : GPBMessage

/** Percent Complete as values between 0 and 100 */
@property(nonatomic, readwrite) int64_t percentComplete;

/** Relative energy of the processed audio as a value between 0 and 1 */
@property(nonatomic, readwrite) float audioEnergy;

/** If enrollment is successful, this value will be the unique Enrollment ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentId;

/** Model used for enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/** Model version used for enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelVersion;

/** Model prompt instructs the user to say something during enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelPrompt;

/**
 * Percent complete as values between 0 and 100 indicating the progress of the current enrollment segment.
 * This is relevent in liveness enrollment where multiple groups of numbers must be spoken.
 **/
@property(nonatomic, readwrite) int64_t percentSegmentComplete;

/**
 * Encrypted enrollment token, this token should be included in authentication requests
 * If the server is configured to store enrollments server side, this will be left empty
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENEnrollmentToken *enrollmentToken;
/** Test to see if @c enrollmentToken has been set. */
@property(nonatomic, readwrite) BOOL hasEnrollmentToken;

@end

#pragma mark - SENAAuthenticateResponse

typedef GPB_ENUM(SENAAuthenticateResponse_FieldNumber) {
  SENAAuthenticateResponse_FieldNumber_AudioEnergy = 1,
  SENAAuthenticateResponse_FieldNumber_Success = 2,
  SENAAuthenticateResponse_FieldNumber_Token = 3,
  SENAAuthenticateResponse_FieldNumber_UserId = 4,
  SENAAuthenticateResponse_FieldNumber_EnrollmentId = 5,
  SENAAuthenticateResponse_FieldNumber_ModelPrompt = 6,
  SENAAuthenticateResponse_FieldNumber_PercentSegmentComplete = 7,
};

/**
 * Response to an authentication request
 **/
GPB_FINAL @interface SENAAuthenticateResponse : GPBMessage

/** Relative energy of the processed audio as a value between 0 and 1 */
@property(nonatomic, readwrite) float audioEnergy;

/** Success / Failure bit */
@property(nonatomic, readwrite) BOOL success;

/** Optional token that will be returned upon a successful authentication if doIncludeToken is set to true in the AuthenticateConfig */
@property(nonatomic, readwrite, strong, null_resettable) SENTokenResponse *token;
/** Test to see if @c token has been set. */
@property(nonatomic, readwrite) BOOL hasToken;

/**
 * The userID of the authenticated user
 * Useful when evaluating enrollment groups
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/**
 * The enrollmentID of the authenticated enrollment
 * Useful when evaluating enrollment groups
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentId;

/** Model prompt instructs the user to say something during authentication */
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelPrompt;

/**
 * Percent complete as values between 0 and 100 indicating the progress of the current authentication segment.
 * This is relevent in liveness enrollment where multiple numbers must be spoken.
 **/
@property(nonatomic, readwrite) int64_t percentSegmentComplete;

@end

#pragma mark - SENAValidateEventResponse

typedef GPB_ENUM(SENAValidateEventResponse_FieldNumber) {
  SENAValidateEventResponse_FieldNumber_AudioEnergy = 1,
  SENAValidateEventResponse_FieldNumber_Success = 2,
  SENAValidateEventResponse_FieldNumber_ResultId = 3,
  SENAValidateEventResponse_FieldNumber_Score = 4,
  SENAValidateEventResponse_FieldNumber_PostProcessingAction = 10,
};

/**
 * Response from a ValidateEventRequest
 **/
GPB_FINAL @interface SENAValidateEventResponse : GPBMessage

/** Relative energy of the processed audio as a value between 0 and 1 */
@property(nonatomic, readwrite) float audioEnergy;

/** Success / Failure bit */
@property(nonatomic, readwrite) BOOL success;

/**
 * Indicates the id of the particular sound that was recognized.
 * Useful for combined models where multiple sound events can be recognized by the same model.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *resultId;

/** The score of the event between -100 to +100. Smaller values typically indicate an invalid sound while larger values would generally indicate a detected sound. */
@property(nonatomic, readwrite) float score;

/**
 * If a post processing audio action was requested, this will be populated with the specific
 * action that was completed along with the actionId optionally set by the client.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAAudioResponsePostProcessingAction *postProcessingAction;
/** Test to see if @c postProcessingAction has been set. */
@property(nonatomic, readwrite) BOOL hasPostProcessingAction;

@end

#pragma mark - SENAValidateEnrolledEventResponse

typedef GPB_ENUM(SENAValidateEnrolledEventResponse_FieldNumber) {
  SENAValidateEnrolledEventResponse_FieldNumber_AudioEnergy = 1,
  SENAValidateEnrolledEventResponse_FieldNumber_Success = 2,
  SENAValidateEnrolledEventResponse_FieldNumber_EnrollmentId = 3,
  SENAValidateEnrolledEventResponse_FieldNumber_UserId = 4,
  SENAValidateEnrolledEventResponse_FieldNumber_ModelPrompt = 5,
};

/**
 * Response from a ValidateEventRequest
 **/
GPB_FINAL @interface SENAValidateEnrolledEventResponse : GPBMessage

/** Relative energy of the processed audio as a value between 0 and 1 */
@property(nonatomic, readwrite) float audioEnergy;

/** Success / Failure bit */
@property(nonatomic, readwrite) BOOL success;

/**
 * The enrollmentID of the authenticated user
 * Useful when evaluating enrollment groups
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentId;

/**
 * The userID of the authenticated user
 * Useful when evaluating enrollment groups
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** Model prompt instructs the user to say something during authentication */
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelPrompt;

@end

#pragma mark - SENATranscribeWord

typedef GPB_ENUM(SENATranscribeWord_FieldNumber) {
  SENATranscribeWord_FieldNumber_BegintimeMs = 1,
  SENATranscribeWord_FieldNumber_EndtimeMs = 2,
  SENATranscribeWord_FieldNumber_Confidence = 3,
  SENATranscribeWord_FieldNumber_WordState = 4,
  SENATranscribeWord_FieldNumber_WordIndex = 5,
  SENATranscribeWord_FieldNumber_Word = 6,
};

GPB_FINAL @interface SENATranscribeWord : GPBMessage

/** The time in the transcript where the word begins */
@property(nonatomic, readwrite) uint64_t begintimeMs;

/** The time in the transcript where the word ends */
@property(nonatomic, readwrite) uint64_t endtimeMs;

/** The confidence score [0.0,1.0] that this word is correctly predicted */
@property(nonatomic, readwrite) float confidence;

/** indicates the state of the word with respect to additional updates -- FINAL indicate the word will no longer change */
@property(nonatomic, readwrite) SENAWordState wordState;

/** The Positional index within the session where this word appeared */
@property(nonatomic, readwrite) uint64_t wordIndex;

/** The actual word that was predicted */
@property(nonatomic, readwrite, copy, null_resettable) NSString *word;

@end

/**
 * Fetches the raw value of a @c SENATranscribeWord's @c wordState property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENATranscribeWord_WordState_RawValue(SENATranscribeWord *message);
/**
 * Sets the raw value of an @c SENATranscribeWord's @c wordState property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENATranscribeWord_WordState_RawValue(SENATranscribeWord *message, int32_t value);

#pragma mark - SENATranscribeWordResponse

typedef GPB_ENUM(SENATranscribeWordResponse_FieldNumber) {
  SENATranscribeWordResponse_FieldNumber_WordsArray = 1,
  SENATranscribeWordResponse_FieldNumber_FirstWordIndex = 2,
  SENATranscribeWordResponse_FieldNumber_LastWordIndex = 3,
};

/**
 * Word Level Transcription Data
 **/
GPB_FINAL @interface SENATranscribeWordResponse : GPBMessage

/** An array of TranscribeWords */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SENATranscribeWord*> *wordsArray;
/** The number of items in @c wordsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger wordsArray_Count;

/** Lowest index of the words in wordList */
@property(nonatomic, readwrite) uint64_t firstWordIndex;

/** Highest index of the words in wordList */
@property(nonatomic, readwrite) uint64_t lastWordIndex;

@end

#pragma mark - SENATranscribeResponse

typedef GPB_ENUM(SENATranscribeResponse_FieldNumber) {
  SENATranscribeResponse_FieldNumber_AudioEnergy = 1,
  SENATranscribeResponse_FieldNumber_WordList = 4,
  SENATranscribeResponse_FieldNumber_HasVoiceActivity = 5,
  SENATranscribeResponse_FieldNumber_PostProcessingAction = 10,
};

/**
 * Response from a TranscribeRequest
 **/
GPB_FINAL @interface SENATranscribeResponse : GPBMessage

/** Relative energy of the processed audio as a value between 0 and 1 */
@property(nonatomic, readwrite) float audioEnergy;

/** A response including word metadata */
@property(nonatomic, readwrite, strong, null_resettable) SENATranscribeWordResponse *wordList;
/** Test to see if @c wordList has been set. */
@property(nonatomic, readwrite) BOOL hasWordList;

/** Tells if any voice activity was detected for the most recently proccessed audio segment */
@property(nonatomic, readwrite) BOOL hasVoiceActivity;

/**
 * If a post processing audio action was requested, this will be populated with the specific
 * action that was completed along with the actionId optionally set by the client.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAAudioResponsePostProcessingAction *postProcessingAction;
/** Test to see if @c postProcessingAction has been set. */
@property(nonatomic, readwrite) BOOL hasPostProcessingAction;

@end

#pragma mark - SENASynthesizeSpeechResponse

typedef GPB_ENUM(SENASynthesizeSpeechResponse_FieldNumber) {
  SENASynthesizeSpeechResponse_FieldNumber_Config = 1,
  SENASynthesizeSpeechResponse_FieldNumber_AudioContent = 2,
};

typedef GPB_ENUM(SENASynthesizeSpeechResponse_StreamingResponse_OneOfCase) {
  SENASynthesizeSpeechResponse_StreamingResponse_OneOfCase_GPBUnsetOneOfCase = 0,
  SENASynthesizeSpeechResponse_StreamingResponse_OneOfCase_Config = 1,
  SENASynthesizeSpeechResponse_StreamingResponse_OneOfCase_AudioContent = 2,
};

/**
 * The response to a speech synthesis request
 **/
GPB_FINAL @interface SENASynthesizeSpeechResponse : GPBMessage

@property(nonatomic, readonly) SENASynthesizeSpeechResponse_StreamingResponse_OneOfCase streamingResponseOneOfCase;

/**
 * Provides information that specifies how the audio has been formatted.
 * The first `SpeechSynthesisResponse` message will contain a `config` message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAAudioConfig *config;

/**
 * The synthesized audio data. Sequential chunks of audio data are sent in
 * sequential `SpeechSynthesisResponse` messages. The first `SpeechSynthesisResponse`
 * message will only contain `config` data and all supsequent `SpeechSynthesisResponse`
 * messages will contain `audioContent` data.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

@end

/**
 * Clears whatever value was set for the oneof 'streamingResponse'.
 **/
void SENASynthesizeSpeechResponse_ClearStreamingResponseOneOfCase(SENASynthesizeSpeechResponse *message);

#pragma mark - SENACreateEnrollmentConfig

typedef GPB_ENUM(SENACreateEnrollmentConfig_FieldNumber) {
  SENACreateEnrollmentConfig_FieldNumber_Audio = 1,
  SENACreateEnrollmentConfig_FieldNumber_UserId = 2,
  SENACreateEnrollmentConfig_FieldNumber_DeviceId = 3,
  SENACreateEnrollmentConfig_FieldNumber_ModelName = 4,
  SENACreateEnrollmentConfig_FieldNumber_Description_p = 5,
  SENACreateEnrollmentConfig_FieldNumber_IsLivenessEnabled = 6,
  SENACreateEnrollmentConfig_FieldNumber_EnrollmentNumUtterances = 7,
  SENACreateEnrollmentConfig_FieldNumber_EnrollmentDuration = 8,
  SENACreateEnrollmentConfig_FieldNumber_ReferenceId = 9,
  SENACreateEnrollmentConfig_FieldNumber_DisableServerEnrollmentTemplateStorage = 10,
};

typedef GPB_ENUM(SENACreateEnrollmentConfig_EnrollLength_OneOfCase) {
  SENACreateEnrollmentConfig_EnrollLength_OneOfCase_GPBUnsetOneOfCase = 0,
  SENACreateEnrollmentConfig_EnrollLength_OneOfCase_EnrollmentNumUtterances = 7,
  SENACreateEnrollmentConfig_EnrollLength_OneOfCase_EnrollmentDuration = 8,
};

/**
 * Provides information for an audio-based enrollment
 **/
GPB_FINAL @interface SENACreateEnrollmentConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/** The unique user Identifer. This value should be a unique email address or username known by the user. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/**
 * The unique device Identifer. This value should be something retrieved by the devie prior to enrollment (like MAC Address)
 * this value is used to identify a device uniquely across multiple enrollments
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceId;

/**
 * Name of background model to be enrolled in
 * Background models can be retrieved from the GetModels() gRPC call
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/**
 * Description of the enrollment as entered by the user.
 * Max length is 1023 characters
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/** Enable liveness if supported by the audio model */
@property(nonatomic, readwrite) BOOL isLivenessEnabled;

/**
 * Optional: Controls the allowed length of enrollment. Longer enrollments are generally more accurate, but take more time to perform.
 * For text-independent enrollments, enrollmentDuration may be set. For any other enrollment, enrollmentNumUtterances may be set.
 **/
@property(nonatomic, readonly) SENACreateEnrollmentConfig_EnrollLength_OneOfCase enrollLengthOneOfCase;

/**
 * The number of times a specific phrase should be uttered during an enrollment.
 * The default value is 4.
 **/
@property(nonatomic, readwrite) uint32_t enrollmentNumUtterances;

/**
 * The allowed length of text-independent enrollments (such as digit liveness)
 * The default value is 12.5 seconds without liveness and 8 seconds with liveness.
 **/
@property(nonatomic, readwrite) float enrollmentDuration;

/**
 * Reference Id allows clients to assign their own identifier to enrollments for various purposes
 * such as tying an audio and video enrollment together.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *referenceId;

/** Prevent the server from storing the enrollment template. The template will be returned to the client for storage. */
@property(nonatomic, readwrite) BOOL disableServerEnrollmentTemplateStorage;

@end

/**
 * Clears whatever value was set for the oneof 'enrollLength'.
 **/
void SENACreateEnrollmentConfig_ClearEnrollLengthOneOfCase(SENACreateEnrollmentConfig *message);

#pragma mark - SENAAuthenticateConfig

typedef GPB_ENUM(SENAAuthenticateConfig_FieldNumber) {
  SENAAuthenticateConfig_FieldNumber_Audio = 1,
  SENAAuthenticateConfig_FieldNumber_EnrollmentId = 2,
  SENAAuthenticateConfig_FieldNumber_EnrollmentGroupId = 3,
  SENAAuthenticateConfig_FieldNumber_DoIncludeToken = 4,
  SENAAuthenticateConfig_FieldNumber_Sensitivity = 5,
  SENAAuthenticateConfig_FieldNumber_Security = 6,
  SENAAuthenticateConfig_FieldNumber_IsLivenessEnabled = 7,
  SENAAuthenticateConfig_FieldNumber_EnrollmentToken = 8,
};

typedef GPB_ENUM(SENAAuthenticateConfig_AuthId_OneOfCase) {
  SENAAuthenticateConfig_AuthId_OneOfCase_GPBUnsetOneOfCase = 0,
  SENAAuthenticateConfig_AuthId_OneOfCase_EnrollmentId = 2,
  SENAAuthenticateConfig_AuthId_OneOfCase_EnrollmentGroupId = 3,
};

/**
 * Provides information for an audio-based authentication
 **/
GPB_FINAL @interface SENAAuthenticateConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/** An identifier for what to authenticate against, either an individual enrollment or a group of enrollments */
@property(nonatomic, readonly) SENAAuthenticateConfig_AuthId_OneOfCase authIdOneOfCase;

/** Unique identifier created at enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentId;

/** Unique identifier for an enrollment group */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentGroupId;

/**
 * A boolean indicating if the response should include an OAuth token for the user associated with the enrollmentId
 * The OAuth token will only be returned if the authentication is successful.
 * It's important to note there will be a minor performance hit to authentication, as OAuth token generation is a semi-expensive operation.
 **/
@property(nonatomic, readwrite) BOOL doIncludeToken;

/** The model sensitivity */
@property(nonatomic, readwrite) SENAThresholdSensitivity sensitivity;

/** The model security */
@property(nonatomic, readwrite) SENAAuthenticateConfig_ThresholdSecurity security;

/** Enable liveness if supported by the audio model */
@property(nonatomic, readwrite) BOOL isLivenessEnabled;

/**
 * Encrypted enrollment token that was provided on enrollment creation
 * If the server is configured to store enrollments server side, this may be left blank
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *enrollmentToken;

@end

/**
 * Fetches the raw value of a @c SENAAuthenticateConfig's @c sensitivity property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENAAuthenticateConfig_Sensitivity_RawValue(SENAAuthenticateConfig *message);
/**
 * Sets the raw value of an @c SENAAuthenticateConfig's @c sensitivity property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENAAuthenticateConfig_Sensitivity_RawValue(SENAAuthenticateConfig *message, int32_t value);

/**
 * Fetches the raw value of a @c SENAAuthenticateConfig's @c security property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENAAuthenticateConfig_Security_RawValue(SENAAuthenticateConfig *message);
/**
 * Sets the raw value of an @c SENAAuthenticateConfig's @c security property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENAAuthenticateConfig_Security_RawValue(SENAAuthenticateConfig *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'authId'.
 **/
void SENAAuthenticateConfig_ClearAuthIdOneOfCase(SENAAuthenticateConfig *message);

#pragma mark - SENAValidateEventConfig

typedef GPB_ENUM(SENAValidateEventConfig_FieldNumber) {
  SENAValidateEventConfig_FieldNumber_Audio = 1,
  SENAValidateEventConfig_FieldNumber_ModelName = 2,
  SENAValidateEventConfig_FieldNumber_UserId = 3,
  SENAValidateEventConfig_FieldNumber_Sensitivity = 4,
};

/**
 * Provides information for an audio-based event recognition
 **/
GPB_FINAL @interface SENAValidateEventConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/**
 * Name of model to validate against
 * Models can be retrieved from the GetModels() gRPC call
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/** The unique user Identifer */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** The model sensitivity */
@property(nonatomic, readwrite) SENAThresholdSensitivity sensitivity;

@end

/**
 * Fetches the raw value of a @c SENAValidateEventConfig's @c sensitivity property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENAValidateEventConfig_Sensitivity_RawValue(SENAValidateEventConfig *message);
/**
 * Sets the raw value of an @c SENAValidateEventConfig's @c sensitivity property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENAValidateEventConfig_Sensitivity_RawValue(SENAValidateEventConfig *message, int32_t value);

#pragma mark - SENACreateEnrollmentEventConfig

typedef GPB_ENUM(SENACreateEnrollmentEventConfig_FieldNumber) {
  SENACreateEnrollmentEventConfig_FieldNumber_Audio = 1,
  SENACreateEnrollmentEventConfig_FieldNumber_UserId = 2,
  SENACreateEnrollmentEventConfig_FieldNumber_ModelName = 3,
  SENACreateEnrollmentEventConfig_FieldNumber_Description_p = 4,
  SENACreateEnrollmentEventConfig_FieldNumber_EnrollmentNumUtterances = 5,
  SENACreateEnrollmentEventConfig_FieldNumber_EnrollmentDuration = 6,
  SENACreateEnrollmentEventConfig_FieldNumber_ReferenceId = 7,
};

typedef GPB_ENUM(SENACreateEnrollmentEventConfig_EnrollLength_OneOfCase) {
  SENACreateEnrollmentEventConfig_EnrollLength_OneOfCase_GPBUnsetOneOfCase = 0,
  SENACreateEnrollmentEventConfig_EnrollLength_OneOfCase_EnrollmentNumUtterances = 5,
  SENACreateEnrollmentEventConfig_EnrollLength_OneOfCase_EnrollmentDuration = 6,
};

GPB_FINAL @interface SENACreateEnrollmentEventConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/** The unique user Identifer. This value should be a unique email address or username known by the user. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/**
 * Name of background model to be enrolled in
 * Background models can be retrieved from the GetModels() gRPC call
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/**
 * Description of the enrollment as entered by the user.
 * Max length is 1023 characters
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/**
 * Optional: Controls the allowed length of enrollment. Longer enrollments are generally more accurate, but take more time to perform.
 * For text-independent enrollments, enrollmentDuration may be set. For any other enrollment, enrollmentNumUtterances may be set.
 **/
@property(nonatomic, readonly) SENACreateEnrollmentEventConfig_EnrollLength_OneOfCase enrollLengthOneOfCase;

/**
 * The number of times a specific phrase should be uttered during an enrollment.
 * The default value is 4.
 **/
@property(nonatomic, readwrite) uint32_t enrollmentNumUtterances;

/**
 * The allowed length of text-independent enrollments (such as digit liveness)
 * The default value is 12.5 seconds without liveness and 8 seconds with liveness.
 **/
@property(nonatomic, readwrite) float enrollmentDuration;

/**
 * Reference Id allows clients to assign their own identifier to enrollments for various purposes
 * such as tying an audio and video enrollment together.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *referenceId;

@end

/**
 * Clears whatever value was set for the oneof 'enrollLength'.
 **/
void SENACreateEnrollmentEventConfig_ClearEnrollLengthOneOfCase(SENACreateEnrollmentEventConfig *message);

#pragma mark - SENAValidateEnrolledEventConfig

typedef GPB_ENUM(SENAValidateEnrolledEventConfig_FieldNumber) {
  SENAValidateEnrolledEventConfig_FieldNumber_Audio = 1,
  SENAValidateEnrolledEventConfig_FieldNumber_EnrollmentId = 2,
  SENAValidateEnrolledEventConfig_FieldNumber_EnrollmentGroupId = 3,
  SENAValidateEnrolledEventConfig_FieldNumber_Sensitivity = 4,
  SENAValidateEnrolledEventConfig_FieldNumber_EnrollmentToken = 5,
};

typedef GPB_ENUM(SENAValidateEnrolledEventConfig_AuthId_OneOfCase) {
  SENAValidateEnrolledEventConfig_AuthId_OneOfCase_GPBUnsetOneOfCase = 0,
  SENAValidateEnrolledEventConfig_AuthId_OneOfCase_EnrollmentId = 2,
  SENAValidateEnrolledEventConfig_AuthId_OneOfCase_EnrollmentGroupId = 3,
};

/**
 * Provides information for an audio-based event validation
 **/
GPB_FINAL @interface SENAValidateEnrolledEventConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/** An identifier for what to authenticate against, either an individual enrollment or a group of enrollments */
@property(nonatomic, readonly) SENAValidateEnrolledEventConfig_AuthId_OneOfCase authIdOneOfCase;

/** Unique identifier created at enrollment */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentId;

/** Unique identifier for an enrollment group */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enrollmentGroupId;

/** The model sensitivity */
@property(nonatomic, readwrite) SENAThresholdSensitivity sensitivity;

/**
 * Encrypted enrollment token that was provided on enrollment creation
 * If the server is configured to store enrollments server side, this may be left blank
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *enrollmentToken;

@end

/**
 * Fetches the raw value of a @c SENAValidateEnrolledEventConfig's @c sensitivity property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENAValidateEnrolledEventConfig_Sensitivity_RawValue(SENAValidateEnrolledEventConfig *message);
/**
 * Sets the raw value of an @c SENAValidateEnrolledEventConfig's @c sensitivity property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENAValidateEnrolledEventConfig_Sensitivity_RawValue(SENAValidateEnrolledEventConfig *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'authId'.
 **/
void SENAValidateEnrolledEventConfig_ClearAuthIdOneOfCase(SENAValidateEnrolledEventConfig *message);

#pragma mark - SENACustomVocabularyWords

typedef GPB_ENUM(SENACustomVocabularyWords_FieldNumber) {
  SENACustomVocabularyWords_FieldNumber_WordsArray = 1,
};

GPB_FINAL @interface SENACustomVocabularyWords : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *wordsArray;
/** The number of items in @c wordsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger wordsArray_Count;

@end

#pragma mark - SENATranscribeConfig

typedef GPB_ENUM(SENATranscribeConfig_FieldNumber) {
  SENATranscribeConfig_FieldNumber_Audio = 1,
  SENATranscribeConfig_FieldNumber_ModelName = 2,
  SENATranscribeConfig_FieldNumber_UserId = 3,
  SENATranscribeConfig_FieldNumber_EnablePunctuationCapitalization = 4,
  SENATranscribeConfig_FieldNumber_DoSingleUtterance = 5,
  SENATranscribeConfig_FieldNumber_VadSensitivity = 6,
  SENATranscribeConfig_FieldNumber_VadDuration = 7,
  SENATranscribeConfig_FieldNumber_CustomVocabRewardThreshold = 8,
  SENATranscribeConfig_FieldNumber_CustomVocabularyId = 9,
  SENATranscribeConfig_FieldNumber_CustomWordList = 10,
};

/**
 * Provides information for an audio-based transcription
 **/
GPB_FINAL @interface SENATranscribeConfig : GPBMessage

/**
 * Required. Provides information that specifies how to
 * process the request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENAAudioConfig *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/**
 * Name of model to validate against
 * Models can be retrieved from the GetModels() gRPC call
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/** The unique user Identifer */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** A flag indicating if the transcription session should use punctuation and capitalization support */
@property(nonatomic, readwrite) BOOL enablePunctuationCapitalization;

/** If enabled, the server will automatically close the stream once the user has stopped speaking */
@property(nonatomic, readwrite) BOOL doSingleUtterance;

/**
 * How sensitive the voice activiy detector should be when single utterance mode is enabled
 * LOW is the recommended sensitivity to use
 **/
@property(nonatomic, readwrite) SENAThresholdSensitivity vadSensitivity;

/**
 * The number of seconds of silence to detect before automatically ending the stream when single utterance mode is enabled
 * If not specified, 1 second is used by default
 **/
@property(nonatomic, readwrite) float vadDuration;

/** Custom vocabulary reward threshold */
@property(nonatomic, readwrite) SENAThresholdSensitivity customVocabRewardThreshold;

/** the name of a custom vocabulary list stored on the server to use for this session */
@property(nonatomic, readwrite, copy, null_resettable) NSString *customVocabularyId;

/** A list of up to 100 custom vocabulary words in the form <word>, <pronunciation alternative 0>, <alternative 1> etc... */
@property(nonatomic, readwrite, strong, null_resettable) SENACustomVocabularyWords *customWordList;
/** Test to see if @c customWordList has been set. */
@property(nonatomic, readwrite) BOOL hasCustomWordList;

@end

/**
 * Fetches the raw value of a @c SENATranscribeConfig's @c vadSensitivity property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENATranscribeConfig_VadSensitivity_RawValue(SENATranscribeConfig *message);
/**
 * Sets the raw value of an @c SENATranscribeConfig's @c vadSensitivity property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENATranscribeConfig_VadSensitivity_RawValue(SENATranscribeConfig *message, int32_t value);

/**
 * Fetches the raw value of a @c SENATranscribeConfig's @c customVocabRewardThreshold property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENATranscribeConfig_CustomVocabRewardThreshold_RawValue(SENATranscribeConfig *message);
/**
 * Sets the raw value of an @c SENATranscribeConfig's @c customVocabRewardThreshold property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENATranscribeConfig_CustomVocabRewardThreshold_RawValue(SENATranscribeConfig *message, int32_t value);

#pragma mark - SENAAudioConfig

typedef GPB_ENUM(SENAAudioConfig_FieldNumber) {
  SENAAudioConfig_FieldNumber_Encoding = 1,
  SENAAudioConfig_FieldNumber_SampleRateHertz = 2,
  SENAAudioConfig_FieldNumber_AudioChannelCount = 3,
  SENAAudioConfig_FieldNumber_LanguageCode = 4,
};

/**
 * Provides audio configuration information that specifies how to process the request.
 **/
GPB_FINAL @interface SENAAudioConfig : GPBMessage

/** Encoding of all sent audio data. */
@property(nonatomic, readwrite) SENAAudioConfig_AudioEncoding encoding;

/** Sample rate in Hertz of the audio data sent in all messages. 16000Hz is optimal. */
@property(nonatomic, readwrite) int32_t sampleRateHertz;

/** The number of channels in the input audio data. */
@property(nonatomic, readwrite) int32_t audioChannelCount;

/**
 * Required. The language of the supplied audio as a
 * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
 * Example: "en-US".
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *languageCode;

@end

/**
 * Fetches the raw value of a @c SENAAudioConfig's @c encoding property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENAAudioConfig_Encoding_RawValue(SENAAudioConfig *message);
/**
 * Sets the raw value of an @c SENAAudioConfig's @c encoding property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENAAudioConfig_Encoding_RawValue(SENAAudioConfig *message, int32_t value);

#pragma mark - SENAVoiceSynthesisConfig

typedef GPB_ENUM(SENAVoiceSynthesisConfig_FieldNumber) {
  SENAVoiceSynthesisConfig_FieldNumber_ModelName = 2,
  SENAVoiceSynthesisConfig_FieldNumber_SampleRateHertz = 3,
};

/**
 * Configurations for the voice synthesis model
 **/
GPB_FINAL @interface SENAVoiceSynthesisConfig : GPBMessage

/**
 * Name of model to use for voice synthesis
 * Model can be retrieved from the GetModels() gRPC call
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelName;

/** The sample rate of the output audio file. Value should be between 8000Hz and 96000Hz */
@property(nonatomic, readwrite) int32_t sampleRateHertz;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
