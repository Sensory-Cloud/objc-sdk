// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/audio/audio.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Audio.pbobjc.h"
#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(SENAAudioConfig);
GPBObjCClassDeclaration(SENAAudioModel);
GPBObjCClassDeclaration(SENAAudioRequestPostProcessingAction);
GPBObjCClassDeclaration(SENAAudioResponsePostProcessingAction);
GPBObjCClassDeclaration(SENAAuthenticateConfig);
GPBObjCClassDeclaration(SENACreateEnrollmentConfig);
GPBObjCClassDeclaration(SENACreateEnrollmentEventConfig);
GPBObjCClassDeclaration(SENACustomVocabularyWords);
GPBObjCClassDeclaration(SENATranscribeConfig);
GPBObjCClassDeclaration(SENATranscribeWord);
GPBObjCClassDeclaration(SENATranscribeWordResponse);
GPBObjCClassDeclaration(SENAValidateEnrolledEventConfig);
GPBObjCClassDeclaration(SENAValidateEventConfig);
GPBObjCClassDeclaration(SENAVoiceSynthesisConfig);
GPBObjCClassDeclaration(SENEnrollmentToken);
GPBObjCClassDeclaration(SENTokenResponse);

#pragma mark - SENAAudioRoot

@implementation SENAAudioRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[ValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SENAAudioRoot_FileDescriptor

static GPBFileDescriptor *SENAAudioRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sensory.api.v1.audio"
                                                 objcPrefix:@"SENA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SENAAudioPostProcessingAction

GPBEnumDescriptor *SENAAudioPostProcessingAction_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NotSet\000Flush\000Reset\000Final\000";
    static const int32_t values[] = {
        SENAAudioPostProcessingAction_NotSet,
        SENAAudioPostProcessingAction_Flush,
        SENAAudioPostProcessingAction_Reset,
        SENAAudioPostProcessingAction_Final,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENAAudioPostProcessingAction)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENAAudioPostProcessingAction_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENAAudioPostProcessingAction_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENAAudioPostProcessingAction_NotSet:
    case SENAAudioPostProcessingAction_Flush:
    case SENAAudioPostProcessingAction_Reset:
    case SENAAudioPostProcessingAction_Final:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SENAWordState

GPBEnumDescriptor *SENAWordState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WordstatePending\000WordstateFinal\000";
    static const int32_t values[] = {
        SENAWordState_WordstatePending,
        SENAWordState_WordstateFinal,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENAWordState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENAWordState_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENAWordState_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENAWordState_WordstatePending:
    case SENAWordState_WordstateFinal:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SENAThresholdSensitivity

GPBEnumDescriptor *SENAThresholdSensitivity_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Lowest\000Low\000Medium\000High\000Highest\000";
    static const int32_t values[] = {
        SENAThresholdSensitivity_Lowest,
        SENAThresholdSensitivity_Low,
        SENAThresholdSensitivity_Medium,
        SENAThresholdSensitivity_High,
        SENAThresholdSensitivity_Highest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENAThresholdSensitivity)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENAThresholdSensitivity_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENAThresholdSensitivity_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENAThresholdSensitivity_Lowest:
    case SENAThresholdSensitivity_Low:
    case SENAThresholdSensitivity_Medium:
    case SENAThresholdSensitivity_High:
    case SENAThresholdSensitivity_Highest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENAGetModelsRequest

@implementation SENAGetModelsRequest


typedef struct SENAGetModelsRequest__storage_ {
  uint32_t _has_storage_[1];
} SENAGetModelsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAGetModelsRequest class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SENAGetModelsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENAAudioModel

@implementation SENAAudioModel

@dynamic name;
@dynamic isEnrollable;
@dynamic modelType;
@dynamic fixedPhrase;
@dynamic sampleRate;
@dynamic versionsArray, versionsArray_Count;
@dynamic technology;
@dynamic isLivenessSupported;

typedef struct SENAAudioModel__storage_ {
  uint32_t _has_storage_[1];
  SENModelType modelType;
  int32_t sampleRate;
  SENTechnologyType technology;
  NSString *name;
  NSString *fixedPhrase;
  NSMutableArray *versionsArray;
} SENAAudioModel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAudioModel_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAAudioModel__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isEnrollable",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAudioModel_FieldNumber_IsEnrollable,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "modelType",
        .dataTypeSpecific.enumDescFunc = SENModelType_EnumDescriptor,
        .number = SENAAudioModel_FieldNumber_ModelType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENAAudioModel__storage_, modelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fixedPhrase",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAudioModel_FieldNumber_FixedPhrase,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENAAudioModel__storage_, fixedPhrase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sampleRate",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAudioModel_FieldNumber_SampleRate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENAAudioModel__storage_, sampleRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "versionsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAudioModel_FieldNumber_VersionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENAAudioModel__storage_, versionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "technology",
        .dataTypeSpecific.enumDescFunc = SENTechnologyType_EnumDescriptor,
        .number = SENAAudioModel_FieldNumber_Technology,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENAAudioModel__storage_, technology),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isLivenessSupported",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAudioModel_FieldNumber_IsLivenessSupported,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAAudioModel class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAAudioModel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\014\000\003\t\000\004\013\000\005\n\000\010\023\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENAAudioModel_ModelType_RawValue(SENAAudioModel *message) {
  GPBDescriptor *descriptor = [SENAAudioModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAudioModel_FieldNumber_ModelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENAAudioModel_ModelType_RawValue(SENAAudioModel *message, int32_t value) {
  GPBDescriptor *descriptor = [SENAAudioModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAudioModel_FieldNumber_ModelType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SENAAudioModel_Technology_RawValue(SENAAudioModel *message) {
  GPBDescriptor *descriptor = [SENAAudioModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAudioModel_FieldNumber_Technology];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENAAudioModel_Technology_RawValue(SENAAudioModel *message, int32_t value) {
  GPBDescriptor *descriptor = [SENAAudioModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAudioModel_FieldNumber_Technology];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENAAudioRequestPostProcessingAction

@implementation SENAAudioRequestPostProcessingAction

@dynamic actionId;
@dynamic action;

typedef struct SENAAudioRequestPostProcessingAction__storage_ {
  uint32_t _has_storage_[1];
  SENAAudioPostProcessingAction action;
  NSString *actionId;
} SENAAudioRequestPostProcessingAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actionId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAudioRequestPostProcessingAction_FieldNumber_ActionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAAudioRequestPostProcessingAction__storage_, actionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = SENAAudioPostProcessingAction_EnumDescriptor,
        .number = SENAAudioRequestPostProcessingAction_FieldNumber_Action,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENAAudioRequestPostProcessingAction__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAAudioRequestPostProcessingAction class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAAudioRequestPostProcessingAction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENAAudioRequestPostProcessingAction_Action_RawValue(SENAAudioRequestPostProcessingAction *message) {
  GPBDescriptor *descriptor = [SENAAudioRequestPostProcessingAction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAudioRequestPostProcessingAction_FieldNumber_Action];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENAAudioRequestPostProcessingAction_Action_RawValue(SENAAudioRequestPostProcessingAction *message, int32_t value) {
  GPBDescriptor *descriptor = [SENAAudioRequestPostProcessingAction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAudioRequestPostProcessingAction_FieldNumber_Action];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENAAudioResponsePostProcessingAction

@implementation SENAAudioResponsePostProcessingAction

@dynamic actionId;
@dynamic action;

typedef struct SENAAudioResponsePostProcessingAction__storage_ {
  uint32_t _has_storage_[1];
  SENAAudioPostProcessingAction action;
  NSString *actionId;
} SENAAudioResponsePostProcessingAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actionId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAudioResponsePostProcessingAction_FieldNumber_ActionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAAudioResponsePostProcessingAction__storage_, actionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = SENAAudioPostProcessingAction_EnumDescriptor,
        .number = SENAAudioResponsePostProcessingAction_FieldNumber_Action,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENAAudioResponsePostProcessingAction__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAAudioResponsePostProcessingAction class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAAudioResponsePostProcessingAction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENAAudioResponsePostProcessingAction_Action_RawValue(SENAAudioResponsePostProcessingAction *message) {
  GPBDescriptor *descriptor = [SENAAudioResponsePostProcessingAction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAudioResponsePostProcessingAction_FieldNumber_Action];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENAAudioResponsePostProcessingAction_Action_RawValue(SENAAudioResponsePostProcessingAction *message, int32_t value) {
  GPBDescriptor *descriptor = [SENAAudioResponsePostProcessingAction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAudioResponsePostProcessingAction_FieldNumber_Action];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENAGetModelsResponse

@implementation SENAGetModelsResponse

@dynamic modelsArray, modelsArray_Count;

typedef struct SENAGetModelsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *modelsArray;
} SENAGetModelsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioModel),
        .number = SENAGetModelsResponse_FieldNumber_ModelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENAGetModelsResponse__storage_, modelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAGetModelsResponse class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAGetModelsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENACreateEnrollmentRequest

@implementation SENACreateEnrollmentRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;

typedef struct SENACreateEnrollmentRequest__storage_ {
  uint32_t _has_storage_[2];
  SENACreateEnrollmentConfig *config;
  NSData *audioContent;
} SENACreateEnrollmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENACreateEnrollmentConfig),
        .number = SENACreateEnrollmentRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENACreateEnrollmentRequest class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENACreateEnrollmentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENACreateEnrollmentRequest_ClearStreamingRequestOneOfCase(SENACreateEnrollmentRequest *message) {
  GPBDescriptor *descriptor = [SENACreateEnrollmentRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENAAuthenticateRequest

@implementation SENAAuthenticateRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;

typedef struct SENAAuthenticateRequest__storage_ {
  uint32_t _has_storage_[2];
  SENAAuthenticateConfig *config;
  NSData *audioContent;
} SENAAuthenticateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAuthenticateConfig),
        .number = SENAAuthenticateRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAAuthenticateRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAAuthenticateRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAAuthenticateRequest class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAAuthenticateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENAAuthenticateRequest_ClearStreamingRequestOneOfCase(SENAAuthenticateRequest *message) {
  GPBDescriptor *descriptor = [SENAAuthenticateRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENAValidateEventRequest

@implementation SENAValidateEventRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;
@dynamic hasPostProcessingAction, postProcessingAction;

typedef struct SENAValidateEventRequest__storage_ {
  uint32_t _has_storage_[2];
  SENAValidateEventConfig *config;
  NSData *audioContent;
  SENAAudioRequestPostProcessingAction *postProcessingAction;
} SENAValidateEventRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAValidateEventConfig),
        .number = SENAValidateEventRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAValidateEventRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEventRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAValidateEventRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "postProcessingAction",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioRequestPostProcessingAction),
        .number = SENAValidateEventRequest_FieldNumber_PostProcessingAction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAValidateEventRequest__storage_, postProcessingAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAValidateEventRequest class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAValidateEventRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\014\000\n\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENAValidateEventRequest_ClearStreamingRequestOneOfCase(SENAValidateEventRequest *message) {
  GPBDescriptor *descriptor = [SENAValidateEventRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENACreateEnrolledEventRequest

@implementation SENACreateEnrolledEventRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;

typedef struct SENACreateEnrolledEventRequest__storage_ {
  uint32_t _has_storage_[2];
  SENACreateEnrollmentEventConfig *config;
  NSData *audioContent;
} SENACreateEnrolledEventRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENACreateEnrollmentEventConfig),
        .number = SENACreateEnrolledEventRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENACreateEnrolledEventRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrolledEventRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENACreateEnrolledEventRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENACreateEnrolledEventRequest class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENACreateEnrolledEventRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENACreateEnrolledEventRequest_ClearStreamingRequestOneOfCase(SENACreateEnrolledEventRequest *message) {
  GPBDescriptor *descriptor = [SENACreateEnrolledEventRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENAValidateEnrolledEventRequest

@implementation SENAValidateEnrolledEventRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;

typedef struct SENAValidateEnrolledEventRequest__storage_ {
  uint32_t _has_storage_[2];
  SENAValidateEnrolledEventConfig *config;
  NSData *audioContent;
} SENAValidateEnrolledEventRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAValidateEnrolledEventConfig),
        .number = SENAValidateEnrolledEventRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAValidateEnrolledEventRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEnrolledEventRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAValidateEnrolledEventRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAValidateEnrolledEventRequest class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAValidateEnrolledEventRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENAValidateEnrolledEventRequest_ClearStreamingRequestOneOfCase(SENAValidateEnrolledEventRequest *message) {
  GPBDescriptor *descriptor = [SENAValidateEnrolledEventRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENATranscribeRequest

@implementation SENATranscribeRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic audioContent;
@dynamic hasPostProcessingAction, postProcessingAction;

typedef struct SENATranscribeRequest__storage_ {
  uint32_t _has_storage_[2];
  SENATranscribeConfig *config;
  NSData *audioContent;
  SENAAudioRequestPostProcessingAction *postProcessingAction;
} SENATranscribeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENATranscribeConfig),
        .number = SENATranscribeRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENATranscribeRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeRequest_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENATranscribeRequest__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "postProcessingAction",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioRequestPostProcessingAction),
        .number = SENATranscribeRequest_FieldNumber_PostProcessingAction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENATranscribeRequest__storage_, postProcessingAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENATranscribeRequest class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENATranscribeRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\014\000\n\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENATranscribeRequest_ClearStreamingRequestOneOfCase(SENATranscribeRequest *message) {
  GPBDescriptor *descriptor = [SENATranscribeRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENASynthesizeSpeechRequest

@implementation SENASynthesizeSpeechRequest

@dynamic phrase;
@dynamic hasConfig, config;

typedef struct SENASynthesizeSpeechRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *phrase;
  SENAVoiceSynthesisConfig *config;
} SENASynthesizeSpeechRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phrase",
        .dataTypeSpecific.clazz = Nil,
        .number = SENASynthesizeSpeechRequest_FieldNumber_Phrase,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENASynthesizeSpeechRequest__storage_, phrase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAVoiceSynthesisConfig),
        .number = SENASynthesizeSpeechRequest_FieldNumber_Config,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENASynthesizeSpeechRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENASynthesizeSpeechRequest class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENASynthesizeSpeechRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENACreateEnrollmentResponse

@implementation SENACreateEnrollmentResponse

@dynamic percentComplete;
@dynamic audioEnergy;
@dynamic enrollmentId;
@dynamic modelName;
@dynamic modelVersion;
@dynamic modelPrompt;
@dynamic percentSegmentComplete;
@dynamic hasEnrollmentToken, enrollmentToken;

typedef struct SENACreateEnrollmentResponse__storage_ {
  uint32_t _has_storage_[1];
  float audioEnergy;
  NSString *enrollmentId;
  NSString *modelName;
  NSString *modelVersion;
  NSString *modelPrompt;
  SENEnrollmentToken *enrollmentToken;
  int64_t percentComplete;
  int64_t percentSegmentComplete;
} SENACreateEnrollmentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "percentComplete",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentResponse_FieldNumber_PercentComplete,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentResponse__storage_, percentComplete),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "audioEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentResponse_FieldNumber_AudioEnergy,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentResponse__storage_, audioEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentResponse_FieldNumber_EnrollmentId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentResponse__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentResponse_FieldNumber_ModelName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentResponse__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentResponse_FieldNumber_ModelVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentResponse__storage_, modelVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelPrompt",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentResponse_FieldNumber_ModelPrompt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentResponse__storage_, modelPrompt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "percentSegmentComplete",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentResponse_FieldNumber_PercentSegmentComplete,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentResponse__storage_, percentSegmentComplete),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "enrollmentToken",
        .dataTypeSpecific.clazz = GPBObjCClass(SENEnrollmentToken),
        .number = SENACreateEnrollmentResponse_FieldNumber_EnrollmentToken,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentResponse__storage_, enrollmentToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENACreateEnrollmentResponse class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENACreateEnrollmentResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\017\000\002\013\000\003\014\000\004\t\000\005\014\000\006\013\000\007\026\000\010\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENAAuthenticateResponse

@implementation SENAAuthenticateResponse

@dynamic audioEnergy;
@dynamic success;
@dynamic hasToken, token;
@dynamic userId;
@dynamic enrollmentId;
@dynamic modelPrompt;
@dynamic percentSegmentComplete;

typedef struct SENAAuthenticateResponse__storage_ {
  uint32_t _has_storage_[1];
  float audioEnergy;
  SENTokenResponse *token;
  NSString *userId;
  NSString *enrollmentId;
  NSString *modelPrompt;
  int64_t percentSegmentComplete;
} SENAAuthenticateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateResponse_FieldNumber_AudioEnergy,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAAuthenticateResponse__storage_, audioEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "success",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateResponse_FieldNumber_Success,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = GPBObjCClass(SENTokenResponse),
        .number = SENAAuthenticateResponse_FieldNumber_Token,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENAAuthenticateResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateResponse_FieldNumber_UserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENAAuthenticateResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateResponse_FieldNumber_EnrollmentId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENAAuthenticateResponse__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelPrompt",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateResponse_FieldNumber_ModelPrompt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENAAuthenticateResponse__storage_, modelPrompt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "percentSegmentComplete",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateResponse_FieldNumber_PercentSegmentComplete,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENAAuthenticateResponse__storage_, percentSegmentComplete),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAAuthenticateResponse class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAAuthenticateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\013\000\004\006\000\005\014\000\006\013\000\007\026\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENAValidateEventResponse

@implementation SENAValidateEventResponse

@dynamic audioEnergy;
@dynamic success;
@dynamic resultId;
@dynamic score;
@dynamic hasPostProcessingAction, postProcessingAction;

typedef struct SENAValidateEventResponse__storage_ {
  uint32_t _has_storage_[1];
  float audioEnergy;
  float score;
  NSString *resultId;
  SENAAudioResponsePostProcessingAction *postProcessingAction;
} SENAValidateEventResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEventResponse_FieldNumber_AudioEnergy,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAValidateEventResponse__storage_, audioEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "success",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEventResponse_FieldNumber_Success,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "resultId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEventResponse_FieldNumber_ResultId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENAValidateEventResponse__storage_, resultId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEventResponse_FieldNumber_Score,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENAValidateEventResponse__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "postProcessingAction",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioResponsePostProcessingAction),
        .number = SENAValidateEventResponse_FieldNumber_PostProcessingAction,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENAValidateEventResponse__storage_, postProcessingAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAValidateEventResponse class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAValidateEventResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\013\000\003\010\000\n\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENAValidateEnrolledEventResponse

@implementation SENAValidateEnrolledEventResponse

@dynamic audioEnergy;
@dynamic success;
@dynamic enrollmentId;
@dynamic userId;
@dynamic modelPrompt;

typedef struct SENAValidateEnrolledEventResponse__storage_ {
  uint32_t _has_storage_[1];
  float audioEnergy;
  NSString *enrollmentId;
  NSString *userId;
  NSString *modelPrompt;
} SENAValidateEnrolledEventResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEnrolledEventResponse_FieldNumber_AudioEnergy,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAValidateEnrolledEventResponse__storage_, audioEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "success",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEnrolledEventResponse_FieldNumber_Success,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEnrolledEventResponse_FieldNumber_EnrollmentId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENAValidateEnrolledEventResponse__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEnrolledEventResponse_FieldNumber_UserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENAValidateEnrolledEventResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelPrompt",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEnrolledEventResponse_FieldNumber_ModelPrompt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENAValidateEnrolledEventResponse__storage_, modelPrompt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAValidateEnrolledEventResponse class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAValidateEnrolledEventResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\003\014\000\004\006\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENATranscribeWord

@implementation SENATranscribeWord

@dynamic begintimeMs;
@dynamic endtimeMs;
@dynamic confidence;
@dynamic wordState;
@dynamic wordIndex;
@dynamic word;

typedef struct SENATranscribeWord__storage_ {
  uint32_t _has_storage_[1];
  float confidence;
  SENAWordState wordState;
  NSString *word;
  uint64_t begintimeMs;
  uint64_t endtimeMs;
  uint64_t wordIndex;
} SENATranscribeWord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "begintimeMs",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeWord_FieldNumber_BegintimeMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENATranscribeWord__storage_, begintimeMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "endtimeMs",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeWord_FieldNumber_EndtimeMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENATranscribeWord__storage_, endtimeMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeWord_FieldNumber_Confidence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENATranscribeWord__storage_, confidence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "wordState",
        .dataTypeSpecific.enumDescFunc = SENAWordState_EnumDescriptor,
        .number = SENATranscribeWord_FieldNumber_WordState,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENATranscribeWord__storage_, wordState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wordIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeWord_FieldNumber_WordIndex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENATranscribeWord__storage_, wordIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "word",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeWord_FieldNumber_Word,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENATranscribeWord__storage_, word),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENATranscribeWord class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENATranscribeWord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\002\t\000\004\t\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENATranscribeWord_WordState_RawValue(SENATranscribeWord *message) {
  GPBDescriptor *descriptor = [SENATranscribeWord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENATranscribeWord_FieldNumber_WordState];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENATranscribeWord_WordState_RawValue(SENATranscribeWord *message, int32_t value) {
  GPBDescriptor *descriptor = [SENATranscribeWord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENATranscribeWord_FieldNumber_WordState];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENATranscribeWordResponse

@implementation SENATranscribeWordResponse

@dynamic wordsArray, wordsArray_Count;
@dynamic firstWordIndex;
@dynamic lastWordIndex;

typedef struct SENATranscribeWordResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *wordsArray;
  uint64_t firstWordIndex;
  uint64_t lastWordIndex;
} SENATranscribeWordResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wordsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENATranscribeWord),
        .number = SENATranscribeWordResponse_FieldNumber_WordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENATranscribeWordResponse__storage_, wordsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstWordIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeWordResponse_FieldNumber_FirstWordIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENATranscribeWordResponse__storage_, firstWordIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "lastWordIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeWordResponse_FieldNumber_LastWordIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENATranscribeWordResponse__storage_, lastWordIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENATranscribeWordResponse class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENATranscribeWordResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\016\000\003\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENATranscribeResponse

@implementation SENATranscribeResponse

@dynamic audioEnergy;
@dynamic hasWordList, wordList;
@dynamic hasVoiceActivity;
@dynamic hasPostProcessingAction, postProcessingAction;

typedef struct SENATranscribeResponse__storage_ {
  uint32_t _has_storage_[1];
  float audioEnergy;
  SENATranscribeWordResponse *wordList;
  SENAAudioResponsePostProcessingAction *postProcessingAction;
} SENATranscribeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeResponse_FieldNumber_AudioEnergy,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENATranscribeResponse__storage_, audioEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "wordList",
        .dataTypeSpecific.clazz = GPBObjCClass(SENATranscribeWordResponse),
        .number = SENATranscribeResponse_FieldNumber_WordList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENATranscribeResponse__storage_, wordList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hasVoiceActivity",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeResponse_FieldNumber_HasVoiceActivity,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "postProcessingAction",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioResponsePostProcessingAction),
        .number = SENATranscribeResponse_FieldNumber_PostProcessingAction,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENATranscribeResponse__storage_, postProcessingAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENATranscribeResponse class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENATranscribeResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\004\010\000\005\020\000\n\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENASynthesizeSpeechResponse

@implementation SENASynthesizeSpeechResponse

@dynamic streamingResponseOneOfCase;
@dynamic config;
@dynamic audioContent;

typedef struct SENASynthesizeSpeechResponse__storage_ {
  uint32_t _has_storage_[2];
  SENAAudioConfig *config;
  NSData *audioContent;
} SENASynthesizeSpeechResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioConfig),
        .number = SENASynthesizeSpeechResponse_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENASynthesizeSpeechResponse__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENASynthesizeSpeechResponse_FieldNumber_AudioContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENASynthesizeSpeechResponse__storage_, audioContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENASynthesizeSpeechResponse class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENASynthesizeSpeechResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingResponse",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENASynthesizeSpeechResponse_ClearStreamingResponseOneOfCase(SENASynthesizeSpeechResponse *message) {
  GPBDescriptor *descriptor = [SENASynthesizeSpeechResponse descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENACreateEnrollmentConfig

@implementation SENACreateEnrollmentConfig

@dynamic enrollLengthOneOfCase;
@dynamic hasAudio, audio;
@dynamic userId;
@dynamic deviceId;
@dynamic modelName;
@dynamic description_p;
@dynamic isLivenessEnabled;
@dynamic enrollmentNumUtterances;
@dynamic enrollmentDuration;
@dynamic referenceId;
@dynamic disableServerEnrollmentTemplateStorage;

typedef struct SENACreateEnrollmentConfig__storage_ {
  uint32_t _has_storage_[2];
  uint32_t enrollmentNumUtterances;
  float enrollmentDuration;
  SENAAudioConfig *audio;
  NSString *userId;
  NSString *deviceId;
  NSString *modelName;
  NSString *description_p;
  NSString *referenceId;
} SENACreateEnrollmentConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioConfig),
        .number = SENACreateEnrollmentConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentConfig_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentConfig_FieldNumber_DeviceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentConfig__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentConfig_FieldNumber_ModelName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentConfig_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentConfig__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isLivenessEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentConfig_FieldNumber_IsLivenessEnabled,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enrollmentNumUtterances",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentConfig_FieldNumber_EnrollmentNumUtterances,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentConfig__storage_, enrollmentNumUtterances),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "enrollmentDuration",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentConfig_FieldNumber_EnrollmentDuration,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentConfig__storage_, enrollmentDuration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "referenceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentConfig_FieldNumber_ReferenceId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentConfig__storage_, referenceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "disableServerEnrollmentTemplateStorage",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentConfig_FieldNumber_DisableServerEnrollmentTemplateStorage,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENACreateEnrollmentConfig class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENACreateEnrollmentConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "enrollLength",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\002\006\000\003\010\000\004\t\000\006\021\000\007\027\000\010\022\000\t\013\000\n\037\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENACreateEnrollmentConfig_ClearEnrollLengthOneOfCase(SENACreateEnrollmentConfig *message) {
  GPBDescriptor *descriptor = [SENACreateEnrollmentConfig descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENAAuthenticateConfig

@implementation SENAAuthenticateConfig

@dynamic authIdOneOfCase;
@dynamic hasAudio, audio;
@dynamic enrollmentId;
@dynamic enrollmentGroupId;
@dynamic doIncludeToken;
@dynamic sensitivity;
@dynamic security;
@dynamic isLivenessEnabled;
@dynamic enrollmentToken;

typedef struct SENAAuthenticateConfig__storage_ {
  uint32_t _has_storage_[2];
  SENAThresholdSensitivity sensitivity;
  SENAAuthenticateConfig_ThresholdSecurity security;
  SENAAudioConfig *audio;
  NSString *enrollmentId;
  NSString *enrollmentGroupId;
  NSData *enrollmentToken;
} SENAAuthenticateConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioConfig),
        .number = SENAAuthenticateConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAAuthenticateConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateConfig_FieldNumber_EnrollmentId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAAuthenticateConfig__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentGroupId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateConfig_FieldNumber_EnrollmentGroupId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAAuthenticateConfig__storage_, enrollmentGroupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "doIncludeToken",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateConfig_FieldNumber_DoIncludeToken,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sensitivity",
        .dataTypeSpecific.enumDescFunc = SENAThresholdSensitivity_EnumDescriptor,
        .number = SENAAuthenticateConfig_FieldNumber_Sensitivity,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENAAuthenticateConfig__storage_, sensitivity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "security",
        .dataTypeSpecific.enumDescFunc = SENAAuthenticateConfig_ThresholdSecurity_EnumDescriptor,
        .number = SENAAuthenticateConfig_FieldNumber_Security,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENAAuthenticateConfig__storage_, security),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isLivenessEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateConfig_FieldNumber_IsLivenessEnabled,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enrollmentToken",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAuthenticateConfig_FieldNumber_EnrollmentToken,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENAAuthenticateConfig__storage_, enrollmentToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAAuthenticateConfig class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAAuthenticateConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "authId",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\014\000\003\021\000\004\016\000\007\021\000\010\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENAAuthenticateConfig_Sensitivity_RawValue(SENAAuthenticateConfig *message) {
  GPBDescriptor *descriptor = [SENAAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAuthenticateConfig_FieldNumber_Sensitivity];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENAAuthenticateConfig_Sensitivity_RawValue(SENAAuthenticateConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENAAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAuthenticateConfig_FieldNumber_Sensitivity];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SENAAuthenticateConfig_Security_RawValue(SENAAuthenticateConfig *message) {
  GPBDescriptor *descriptor = [SENAAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAuthenticateConfig_FieldNumber_Security];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENAAuthenticateConfig_Security_RawValue(SENAAuthenticateConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENAAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAuthenticateConfig_FieldNumber_Security];
  GPBSetMessageRawEnumField(message, field, value);
}

void SENAAuthenticateConfig_ClearAuthIdOneOfCase(SENAAuthenticateConfig *message) {
  GPBDescriptor *descriptor = [SENAAuthenticateConfig descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Enum SENAAuthenticateConfig_ThresholdSecurity

GPBEnumDescriptor *SENAAuthenticateConfig_ThresholdSecurity_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "High\000Low\000";
    static const int32_t values[] = {
        SENAAuthenticateConfig_ThresholdSecurity_High,
        SENAAuthenticateConfig_ThresholdSecurity_Low,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENAAuthenticateConfig_ThresholdSecurity)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENAAuthenticateConfig_ThresholdSecurity_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENAAuthenticateConfig_ThresholdSecurity_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENAAuthenticateConfig_ThresholdSecurity_High:
    case SENAAuthenticateConfig_ThresholdSecurity_Low:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENAValidateEventConfig

@implementation SENAValidateEventConfig

@dynamic hasAudio, audio;
@dynamic modelName;
@dynamic userId;
@dynamic sensitivity;

typedef struct SENAValidateEventConfig__storage_ {
  uint32_t _has_storage_[1];
  SENAThresholdSensitivity sensitivity;
  SENAAudioConfig *audio;
  NSString *modelName;
  NSString *userId;
} SENAValidateEventConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioConfig),
        .number = SENAValidateEventConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAValidateEventConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEventConfig_FieldNumber_ModelName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENAValidateEventConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEventConfig_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENAValidateEventConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sensitivity",
        .dataTypeSpecific.enumDescFunc = SENAThresholdSensitivity_EnumDescriptor,
        .number = SENAValidateEventConfig_FieldNumber_Sensitivity,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENAValidateEventConfig__storage_, sensitivity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAValidateEventConfig class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAValidateEventConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\t\000\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENAValidateEventConfig_Sensitivity_RawValue(SENAValidateEventConfig *message) {
  GPBDescriptor *descriptor = [SENAValidateEventConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAValidateEventConfig_FieldNumber_Sensitivity];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENAValidateEventConfig_Sensitivity_RawValue(SENAValidateEventConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENAValidateEventConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAValidateEventConfig_FieldNumber_Sensitivity];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENACreateEnrollmentEventConfig

@implementation SENACreateEnrollmentEventConfig

@dynamic enrollLengthOneOfCase;
@dynamic hasAudio, audio;
@dynamic userId;
@dynamic modelName;
@dynamic description_p;
@dynamic enrollmentNumUtterances;
@dynamic enrollmentDuration;
@dynamic referenceId;

typedef struct SENACreateEnrollmentEventConfig__storage_ {
  uint32_t _has_storage_[2];
  uint32_t enrollmentNumUtterances;
  float enrollmentDuration;
  SENAAudioConfig *audio;
  NSString *userId;
  NSString *modelName;
  NSString *description_p;
  NSString *referenceId;
} SENACreateEnrollmentEventConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioConfig),
        .number = SENACreateEnrollmentEventConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentEventConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentEventConfig_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentEventConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentEventConfig_FieldNumber_ModelName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentEventConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentEventConfig_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentEventConfig__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentNumUtterances",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentEventConfig_FieldNumber_EnrollmentNumUtterances,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentEventConfig__storage_, enrollmentNumUtterances),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "enrollmentDuration",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentEventConfig_FieldNumber_EnrollmentDuration,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentEventConfig__storage_, enrollmentDuration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "referenceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACreateEnrollmentEventConfig_FieldNumber_ReferenceId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENACreateEnrollmentEventConfig__storage_, referenceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENACreateEnrollmentEventConfig class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENACreateEnrollmentEventConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "enrollLength",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\006\000\003\t\000\005\027\000\006\022\000\007\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENACreateEnrollmentEventConfig_ClearEnrollLengthOneOfCase(SENACreateEnrollmentEventConfig *message) {
  GPBDescriptor *descriptor = [SENACreateEnrollmentEventConfig descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENAValidateEnrolledEventConfig

@implementation SENAValidateEnrolledEventConfig

@dynamic authIdOneOfCase;
@dynamic hasAudio, audio;
@dynamic enrollmentId;
@dynamic enrollmentGroupId;
@dynamic sensitivity;
@dynamic enrollmentToken;

typedef struct SENAValidateEnrolledEventConfig__storage_ {
  uint32_t _has_storage_[2];
  SENAThresholdSensitivity sensitivity;
  SENAAudioConfig *audio;
  NSString *enrollmentId;
  NSString *enrollmentGroupId;
  NSData *enrollmentToken;
} SENAValidateEnrolledEventConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioConfig),
        .number = SENAValidateEnrolledEventConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAValidateEnrolledEventConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEnrolledEventConfig_FieldNumber_EnrollmentId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAValidateEnrolledEventConfig__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentGroupId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEnrolledEventConfig_FieldNumber_EnrollmentGroupId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENAValidateEnrolledEventConfig__storage_, enrollmentGroupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sensitivity",
        .dataTypeSpecific.enumDescFunc = SENAThresholdSensitivity_EnumDescriptor,
        .number = SENAValidateEnrolledEventConfig_FieldNumber_Sensitivity,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENAValidateEnrolledEventConfig__storage_, sensitivity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "enrollmentToken",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAValidateEnrolledEventConfig_FieldNumber_EnrollmentToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENAValidateEnrolledEventConfig__storage_, enrollmentToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAValidateEnrolledEventConfig class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAValidateEnrolledEventConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "authId",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\014\000\003\021\000\005\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENAValidateEnrolledEventConfig_Sensitivity_RawValue(SENAValidateEnrolledEventConfig *message) {
  GPBDescriptor *descriptor = [SENAValidateEnrolledEventConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAValidateEnrolledEventConfig_FieldNumber_Sensitivity];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENAValidateEnrolledEventConfig_Sensitivity_RawValue(SENAValidateEnrolledEventConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENAValidateEnrolledEventConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAValidateEnrolledEventConfig_FieldNumber_Sensitivity];
  GPBSetMessageRawEnumField(message, field, value);
}

void SENAValidateEnrolledEventConfig_ClearAuthIdOneOfCase(SENAValidateEnrolledEventConfig *message) {
  GPBDescriptor *descriptor = [SENAValidateEnrolledEventConfig descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENACustomVocabularyWords

@implementation SENACustomVocabularyWords

@dynamic wordsArray, wordsArray_Count;

typedef struct SENACustomVocabularyWords__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *wordsArray;
} SENACustomVocabularyWords__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wordsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENACustomVocabularyWords_FieldNumber_WordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENACustomVocabularyWords__storage_, wordsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENACustomVocabularyWords class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENACustomVocabularyWords__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENATranscribeConfig

@implementation SENATranscribeConfig

@dynamic hasAudio, audio;
@dynamic modelName;
@dynamic userId;
@dynamic enablePunctuationCapitalization;
@dynamic doSingleUtterance;
@dynamic vadSensitivity;
@dynamic vadDuration;
@dynamic customVocabRewardThreshold;
@dynamic customVocabularyId;
@dynamic hasCustomWordList, customWordList;

typedef struct SENATranscribeConfig__storage_ {
  uint32_t _has_storage_[1];
  SENAThresholdSensitivity vadSensitivity;
  float vadDuration;
  SENAThresholdSensitivity customVocabRewardThreshold;
  SENAAudioConfig *audio;
  NSString *modelName;
  NSString *userId;
  NSString *customVocabularyId;
  SENACustomVocabularyWords *customWordList;
} SENATranscribeConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(SENAAudioConfig),
        .number = SENATranscribeConfig_FieldNumber_Audio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENATranscribeConfig__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeConfig_FieldNumber_ModelName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENATranscribeConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeConfig_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENATranscribeConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enablePunctuationCapitalization",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeConfig_FieldNumber_EnablePunctuationCapitalization,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "doSingleUtterance",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeConfig_FieldNumber_DoSingleUtterance,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "vadSensitivity",
        .dataTypeSpecific.enumDescFunc = SENAThresholdSensitivity_EnumDescriptor,
        .number = SENATranscribeConfig_FieldNumber_VadSensitivity,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENATranscribeConfig__storage_, vadSensitivity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "vadDuration",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeConfig_FieldNumber_VadDuration,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SENATranscribeConfig__storage_, vadDuration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "customVocabRewardThreshold",
        .dataTypeSpecific.enumDescFunc = SENAThresholdSensitivity_EnumDescriptor,
        .number = SENATranscribeConfig_FieldNumber_CustomVocabRewardThreshold,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SENATranscribeConfig__storage_, customVocabRewardThreshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customVocabularyId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENATranscribeConfig_FieldNumber_CustomVocabularyId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SENATranscribeConfig__storage_, customVocabularyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customWordList",
        .dataTypeSpecific.clazz = GPBObjCClass(SENACustomVocabularyWords),
        .number = SENATranscribeConfig_FieldNumber_CustomWordList,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SENATranscribeConfig__storage_, customWordList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENATranscribeConfig class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENATranscribeConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\002\t\000\003\006\000\004\037\000\005\021\000\006\016\000\007\013\000\010\032\000\t\022\000\n\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENATranscribeConfig_VadSensitivity_RawValue(SENATranscribeConfig *message) {
  GPBDescriptor *descriptor = [SENATranscribeConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENATranscribeConfig_FieldNumber_VadSensitivity];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENATranscribeConfig_VadSensitivity_RawValue(SENATranscribeConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENATranscribeConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENATranscribeConfig_FieldNumber_VadSensitivity];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SENATranscribeConfig_CustomVocabRewardThreshold_RawValue(SENATranscribeConfig *message) {
  GPBDescriptor *descriptor = [SENATranscribeConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENATranscribeConfig_FieldNumber_CustomVocabRewardThreshold];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENATranscribeConfig_CustomVocabRewardThreshold_RawValue(SENATranscribeConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENATranscribeConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENATranscribeConfig_FieldNumber_CustomVocabRewardThreshold];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENAAudioConfig

@implementation SENAAudioConfig

@dynamic encoding;
@dynamic sampleRateHertz;
@dynamic audioChannelCount;
@dynamic languageCode;

typedef struct SENAAudioConfig__storage_ {
  uint32_t _has_storage_[1];
  SENAAudioConfig_AudioEncoding encoding;
  int32_t sampleRateHertz;
  int32_t audioChannelCount;
  NSString *languageCode;
} SENAAudioConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "encoding",
        .dataTypeSpecific.enumDescFunc = SENAAudioConfig_AudioEncoding_EnumDescriptor,
        .number = SENAAudioConfig_FieldNumber_Encoding,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAAudioConfig__storage_, encoding),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sampleRateHertz",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAudioConfig_FieldNumber_SampleRateHertz,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENAAudioConfig__storage_, sampleRateHertz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioChannelCount",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAudioConfig_FieldNumber_AudioChannelCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENAAudioConfig__storage_, audioChannelCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAAudioConfig_FieldNumber_LanguageCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENAAudioConfig__storage_, languageCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAAudioConfig class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAAudioConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\017\000\003\021\000\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENAAudioConfig_Encoding_RawValue(SENAAudioConfig *message) {
  GPBDescriptor *descriptor = [SENAAudioConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAudioConfig_FieldNumber_Encoding];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENAAudioConfig_Encoding_RawValue(SENAAudioConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENAAudioConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENAAudioConfig_FieldNumber_Encoding];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum SENAAudioConfig_AudioEncoding

GPBEnumDescriptor *SENAAudioConfig_AudioEncoding_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Linear16\000Flac\000Mulaw\000";
    static const int32_t values[] = {
        SENAAudioConfig_AudioEncoding_Linear16,
        SENAAudioConfig_AudioEncoding_Flac,
        SENAAudioConfig_AudioEncoding_Mulaw,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENAAudioConfig_AudioEncoding)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENAAudioConfig_AudioEncoding_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENAAudioConfig_AudioEncoding_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENAAudioConfig_AudioEncoding_Linear16:
    case SENAAudioConfig_AudioEncoding_Flac:
    case SENAAudioConfig_AudioEncoding_Mulaw:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENAVoiceSynthesisConfig

@implementation SENAVoiceSynthesisConfig

@dynamic modelName;
@dynamic sampleRateHertz;

typedef struct SENAVoiceSynthesisConfig__storage_ {
  uint32_t _has_storage_[1];
  int32_t sampleRateHertz;
  NSString *modelName;
} SENAVoiceSynthesisConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAVoiceSynthesisConfig_FieldNumber_ModelName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAVoiceSynthesisConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sampleRateHertz",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAVoiceSynthesisConfig_FieldNumber_SampleRateHertz,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENAVoiceSynthesisConfig__storage_, sampleRateHertz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAVoiceSynthesisConfig class]
                                     rootClass:[SENAAudioRoot class]
                                          file:SENAAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAVoiceSynthesisConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\t\000\003\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
