// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/event/event.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Event.pbobjc.h"
#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(SENPaginationOptions);
GPBObjCClassDeclaration(SENPaginationResponse);
GPBObjCClassDeclaration(SENUsageEvent);
GPBObjCClassDeclaration(SENUsageEventModelSummary);
GPBObjCClassDeclaration(SENUsageEventResponse);

#pragma mark - SENEventRoot

@implementation SENEventRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[SENValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SENEventRoot_FileDescriptor

static GPBFileDescriptor *SENEventRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sensory.api.v1.event"
                                                 objcPrefix:@"SEN"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SENPublishUsageEventsRequest

@implementation SENPublishUsageEventsRequest

@dynamic eventsArray, eventsArray_Count;

typedef struct SENPublishUsageEventsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *eventsArray;
} SENPublishUsageEventsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENUsageEvent),
        .number = SENPublishUsageEventsRequest_FieldNumber_EventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENPublishUsageEventsRequest__storage_, eventsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENPublishUsageEventsRequest class]
                                     rootClass:[SENEventRoot class]
                                          file:SENEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENPublishUsageEventsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENUsageEvent

@implementation SENUsageEvent

@dynamic hasTimestamp, timestamp;
@dynamic duration;
@dynamic id_p;
@dynamic clientId;
@dynamic type;
@dynamic route;
@dynamic technologiesArray, technologiesArray_Count;
@dynamic modelsArray, modelsArray_Count;
@dynamic audioDurationMs;
@dynamic videoFrameCount;
@dynamic tenantId;
@dynamic billableFunction;

typedef struct SENUsageEvent__storage_ {
  uint32_t _has_storage_[1];
  SENUsageEventType type;
  SENModelType billableFunction;
  GPBTimestamp *timestamp;
  NSString *id_p;
  NSString *clientId;
  NSString *route;
  GPBEnumArray *technologiesArray;
  NSMutableArray *modelsArray;
  NSString *tenantId;
  int64_t duration;
  int64_t audioDurationMs;
  int64_t videoFrameCount;
} SENUsageEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENUsageEvent_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEvent_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEvent_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEvent_FieldNumber_ClientId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = SENUsageEventType_EnumDescriptor,
        .number = SENUsageEvent_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "route",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEvent_FieldNumber_Route,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, route),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "technologiesArray",
        .dataTypeSpecific.enumDescFunc = SENTechnologyType_EnumDescriptor,
        .number = SENUsageEvent_FieldNumber_TechnologiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, technologiesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "modelsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEvent_FieldNumber_ModelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, modelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audioDurationMs",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEvent_FieldNumber_AudioDurationMs,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, audioDurationMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "videoFrameCount",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEvent_FieldNumber_VideoFrameCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, videoFrameCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tenantId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEvent_FieldNumber_TenantId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, tenantId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "billableFunction",
        .dataTypeSpecific.enumDescFunc = SENModelType_EnumDescriptor,
        .number = SENUsageEvent_FieldNumber_BillableFunction,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SENUsageEvent__storage_, billableFunction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENUsageEvent class]
                                     rootClass:[SENEventRoot class]
                                          file:SENEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENUsageEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\004\010\000\t\017\000\n\017\000\013\010\000\014\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENUsageEvent_Type_RawValue(SENUsageEvent *message) {
  GPBDescriptor *descriptor = [SENUsageEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENUsageEvent_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENUsageEvent_Type_RawValue(SENUsageEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [SENUsageEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENUsageEvent_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SENUsageEvent_BillableFunction_RawValue(SENUsageEvent *message) {
  GPBDescriptor *descriptor = [SENUsageEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENUsageEvent_FieldNumber_BillableFunction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENUsageEvent_BillableFunction_RawValue(SENUsageEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [SENUsageEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENUsageEvent_FieldNumber_BillableFunction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENUsageEventResponse

@implementation SENUsageEventResponse

@dynamic hasTimestamp, timestamp;
@dynamic duration;
@dynamic id_p;
@dynamic clientId;
@dynamic type;
@dynamic route;
@dynamic technologiesArray, technologiesArray_Count;
@dynamic modelsArray, modelsArray_Count;
@dynamic billableValue;
@dynamic billableUnits;
@dynamic tenantId;
@dynamic billableFunction;
@dynamic credits;

typedef struct SENUsageEventResponse__storage_ {
  uint32_t _has_storage_[1];
  SENUsageEventType type;
  SENModelType billableFunction;
  GPBTimestamp *timestamp;
  NSString *id_p;
  NSString *clientId;
  NSString *route;
  GPBEnumArray *technologiesArray;
  NSMutableArray *modelsArray;
  NSString *billableUnits;
  NSString *tenantId;
  int64_t duration;
  int64_t billableValue;
  double credits;
} SENUsageEventResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENUsageEventResponse_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventResponse_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventResponse_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventResponse_FieldNumber_ClientId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = SENUsageEventType_EnumDescriptor,
        .number = SENUsageEventResponse_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "route",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventResponse_FieldNumber_Route,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, route),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "technologiesArray",
        .dataTypeSpecific.enumDescFunc = SENTechnologyType_EnumDescriptor,
        .number = SENUsageEventResponse_FieldNumber_TechnologiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, technologiesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "modelsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventResponse_FieldNumber_ModelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, modelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "billableValue",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventResponse_FieldNumber_BillableValue,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, billableValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "billableUnits",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventResponse_FieldNumber_BillableUnits,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, billableUnits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tenantId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventResponse_FieldNumber_TenantId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, tenantId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "billableFunction",
        .dataTypeSpecific.enumDescFunc = SENModelType_EnumDescriptor,
        .number = SENUsageEventResponse_FieldNumber_BillableFunction,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, billableFunction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "credits",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventResponse_FieldNumber_Credits,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SENUsageEventResponse__storage_, credits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENUsageEventResponse class]
                                     rootClass:[SENEventRoot class]
                                          file:SENEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENUsageEventResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\004\010\000\t\r\000\n\r\000\013\010\000\014\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENUsageEventResponse_Type_RawValue(SENUsageEventResponse *message) {
  GPBDescriptor *descriptor = [SENUsageEventResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENUsageEventResponse_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENUsageEventResponse_Type_RawValue(SENUsageEventResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SENUsageEventResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENUsageEventResponse_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SENUsageEventResponse_BillableFunction_RawValue(SENUsageEventResponse *message) {
  GPBDescriptor *descriptor = [SENUsageEventResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENUsageEventResponse_FieldNumber_BillableFunction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENUsageEventResponse_BillableFunction_RawValue(SENUsageEventResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SENUsageEventResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENUsageEventResponse_FieldNumber_BillableFunction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENUsageEventListRequest

@implementation SENUsageEventListRequest

@dynamic tenantId;
@dynamic hasPagination, pagination;
@dynamic hasAfter, after;
@dynamic hasBefore, before;
@dynamic billableFunctionsArray, billableFunctionsArray_Count;

typedef struct SENUsageEventListRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tenantId;
  SENPaginationOptions *pagination;
  GPBTimestamp *after;
  GPBTimestamp *before;
  GPBEnumArray *billableFunctionsArray;
} SENUsageEventListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tenantId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventListRequest_FieldNumber_TenantId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENUsageEventListRequest__storage_, tenantId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(SENPaginationOptions),
        .number = SENUsageEventListRequest_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENUsageEventListRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "after",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENUsageEventListRequest_FieldNumber_After,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENUsageEventListRequest__storage_, after),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "before",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENUsageEventListRequest_FieldNumber_Before,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENUsageEventListRequest__storage_, before),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "billableFunctionsArray",
        .dataTypeSpecific.enumDescFunc = SENModelType_EnumDescriptor,
        .number = SENUsageEventListRequest_FieldNumber_BillableFunctionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENUsageEventListRequest__storage_, billableFunctionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENUsageEventListRequest class]
                                     rootClass:[SENEventRoot class]
                                          file:SENEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENUsageEventListRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\005\000billableFunctions\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENUsageEventListResponse

@implementation SENUsageEventListResponse

@dynamic eventsArray, eventsArray_Count;
@dynamic hasPagination, pagination;

typedef struct SENUsageEventListResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *eventsArray;
  SENPaginationResponse *pagination;
} SENUsageEventListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENUsageEventResponse),
        .number = SENUsageEventListResponse_FieldNumber_EventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENUsageEventListResponse__storage_, eventsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(SENPaginationResponse),
        .number = SENUsageEventListResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENUsageEventListResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENUsageEventListResponse class]
                                     rootClass:[SENEventRoot class]
                                          file:SENEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENUsageEventListResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGlobalEventSummaryRequest

@implementation SENGlobalEventSummaryRequest

@dynamic tenantsArray, tenantsArray_Count;
@dynamic hasAfter, after;
@dynamic hasBefore, before;
@dynamic billableFunctionsArray, billableFunctionsArray_Count;

typedef struct SENGlobalEventSummaryRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tenantsArray;
  GPBTimestamp *after;
  GPBTimestamp *before;
  GPBEnumArray *billableFunctionsArray;
} SENGlobalEventSummaryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tenantsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGlobalEventSummaryRequest_FieldNumber_TenantsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGlobalEventSummaryRequest__storage_, tenantsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "after",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENGlobalEventSummaryRequest_FieldNumber_After,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGlobalEventSummaryRequest__storage_, after),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "before",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENGlobalEventSummaryRequest_FieldNumber_Before,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENGlobalEventSummaryRequest__storage_, before),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "billableFunctionsArray",
        .dataTypeSpecific.enumDescFunc = SENModelType_EnumDescriptor,
        .number = SENGlobalEventSummaryRequest_FieldNumber_BillableFunctionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGlobalEventSummaryRequest__storage_, billableFunctionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGlobalEventSummaryRequest class]
                                     rootClass:[SENEventRoot class]
                                          file:SENEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGlobalEventSummaryRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\000billableFunctions\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENUsageEventSummary

@implementation SENUsageEventSummary

@dynamic summariesArray, summariesArray_Count;

typedef struct SENUsageEventSummary__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *summariesArray;
} SENUsageEventSummary__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "summariesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENUsageEventModelSummary),
        .number = SENUsageEventSummary_FieldNumber_SummariesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENUsageEventSummary__storage_, summariesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENUsageEventSummary class]
                                     rootClass:[SENEventRoot class]
                                          file:SENEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENUsageEventSummary__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENUsageEventModelSummary

@implementation SENUsageEventModelSummary

@dynamic billableFunction;
@dynamic units;
@dynamic value;
@dynamic count;
@dynamic credits;
@dynamic tenantId;

typedef struct SENUsageEventModelSummary__storage_ {
  uint32_t _has_storage_[1];
  SENModelType billableFunction;
  NSString *units;
  NSString *tenantId;
  int64_t value;
  int64_t count;
  double credits;
} SENUsageEventModelSummary__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "billableFunction",
        .dataTypeSpecific.enumDescFunc = SENModelType_EnumDescriptor,
        .number = SENUsageEventModelSummary_FieldNumber_BillableFunction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENUsageEventModelSummary__storage_, billableFunction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "units",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventModelSummary_FieldNumber_Units,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENUsageEventModelSummary__storage_, units),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventModelSummary_FieldNumber_Value,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENUsageEventModelSummary__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventModelSummary_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENUsageEventModelSummary__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "credits",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventModelSummary_FieldNumber_Credits,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENUsageEventModelSummary__storage_, credits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "tenantId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUsageEventModelSummary_FieldNumber_TenantId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENUsageEventModelSummary__storage_, tenantId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENUsageEventModelSummary class]
                                     rootClass:[SENEventRoot class]
                                          file:SENEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENUsageEventModelSummary__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\020\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENUsageEventModelSummary_BillableFunction_RawValue(SENUsageEventModelSummary *message) {
  GPBDescriptor *descriptor = [SENUsageEventModelSummary descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENUsageEventModelSummary_FieldNumber_BillableFunction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENUsageEventModelSummary_BillableFunction_RawValue(SENUsageEventModelSummary *message, int32_t value) {
  GPBDescriptor *descriptor = [SENUsageEventModelSummary descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENUsageEventModelSummary_FieldNumber_BillableFunction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENPublishUsageEventsResponse

@implementation SENPublishUsageEventsResponse


typedef struct SENPublishUsageEventsResponse__storage_ {
  uint32_t _has_storage_[1];
} SENPublishUsageEventsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENPublishUsageEventsResponse class]
                                     rootClass:[SENEventRoot class]
                                          file:SENEventRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SENPublishUsageEventsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
