// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: v1/event/event.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "Event.pbrpc.h"
#import "Event.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#if defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS) && GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
#import <Protobuf/GPBTimestamp.pbobjc.h>
#else
#import "GPBTimestamp.pbobjc.h"
#endif
#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"

@implementation SENEventService

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.event"
                 serviceName:@"EventService"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.event"
                 serviceName:@"EventService"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark PublishUsageEvents(PublishUsageEventsRequest) returns (PublishUsageEventsResponse)

/**
 * Publishes a list of usage event to the cloud
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)publishUsageEventsWithRequest:(SENPublishUsageEventsRequest *)request handler:(void(^)(SENPublishUsageEventsResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToPublishUsageEventsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Publishes a list of usage event to the cloud
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToPublishUsageEventsWithRequest:(SENPublishUsageEventsRequest *)request handler:(void(^)(SENPublishUsageEventsResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"PublishUsageEvents"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENPublishUsageEventsResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Publishes a list of usage event to the cloud
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)publishUsageEventsWithMessage:(SENPublishUsageEventsRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"PublishUsageEvents"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENPublishUsageEventsResponse class]];
}

#pragma mark GetUsageEventList(UsageEventListRequest) returns (UsageEventListResponse)

/**
 * Obtains a list of events given the filter criteria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getUsageEventListWithRequest:(SENUsageEventListRequest *)request handler:(void(^)(SENUsageEventListResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetUsageEventListWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Obtains a list of events given the filter criteria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetUsageEventListWithRequest:(SENUsageEventListRequest *)request handler:(void(^)(SENUsageEventListResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetUsageEventList"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENUsageEventListResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Obtains a list of events given the filter criteria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)getUsageEventListWithMessage:(SENUsageEventListRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetUsageEventList"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENUsageEventListResponse class]];
}

#pragma mark GetUsageEventSummary(UsageEventListRequest) returns (UsageEventSummary)

/**
 * Obtains a summary of events given the filter critieria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getUsageEventSummaryWithRequest:(SENUsageEventListRequest *)request handler:(void(^)(SENUsageEventSummary *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetUsageEventSummaryWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Obtains a summary of events given the filter critieria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetUsageEventSummaryWithRequest:(SENUsageEventListRequest *)request handler:(void(^)(SENUsageEventSummary *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetUsageEventSummary"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENUsageEventSummary class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Obtains a summary of events given the filter critieria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)getUsageEventSummaryWithMessage:(SENUsageEventListRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetUsageEventSummary"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENUsageEventSummary class]];
}

#pragma mark GetGlobalUsageSummary(GlobalEventSummaryRequest) returns (UsageEventSummary)

/**
 * Obtains a usage summary of events across all specified tenants
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getGlobalUsageSummaryWithRequest:(SENGlobalEventSummaryRequest *)request handler:(void(^)(SENUsageEventSummary *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetGlobalUsageSummaryWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Obtains a usage summary of events across all specified tenants
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetGlobalUsageSummaryWithRequest:(SENGlobalEventSummaryRequest *)request handler:(void(^)(SENUsageEventSummary *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetGlobalUsageSummary"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENUsageEventSummary class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Obtains a usage summary of events across all specified tenants
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)getGlobalUsageSummaryWithMessage:(SENGlobalEventSummaryRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetGlobalUsageSummary"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENUsageEventSummary class]];
}

@end
#endif
