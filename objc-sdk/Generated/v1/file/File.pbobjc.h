// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/file/file.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class SENFileCatalog;
@class SENFileChunk;
@class SENFileInfo;
@class SENVersionedFileCategory;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SENFileCategory

/** A type of file supported by this API */
typedef GPB_ENUM(SENFileCategory) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SENFileCategory_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** A model used with TSSV */
  SENFileCategory_TssvModel = 0,

  /** A model used with the Atlas library */
  SENFileCategory_AtlasModel = 1,

  /** A model used with the TNL library */
  SENFileCategory_TnlModel = 2,

  /** Unknown Model Type */
  SENFileCategory_Unknown = 100,
};

GPBEnumDescriptor *SENFileCategory_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENFileCategory_IsValidValue(int32_t value);

#pragma mark - SENFileRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface SENFileRoot : GPBRootObject
@end

#pragma mark - SENFileRequest

typedef GPB_ENUM(SENFileRequest_FieldNumber) {
  SENFileRequest_FieldNumber_File = 1,
  SENFileRequest_FieldNumber_Category = 2,
  SENFileRequest_FieldNumber_Offset = 3,
};

/**
 * A request to download file
 **/
GPB_FINAL @interface SENFileRequest : GPBMessage

/**
 * The complete path of the file to be downloaded
 * including the filename. (E.G my/file/path/file.txt)
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *file;

/** The category of file requested with version information. */
@property(nonatomic, readwrite, strong, null_resettable) SENVersionedFileCategory *category;
/** Test to see if @c category has been set. */
@property(nonatomic, readwrite) BOOL hasCategory;

/**
 * The offset value based on the number of bytes previously downloaded.
 * Useful if the download previously failed, and you'd like to start from where you left off.
 **/
@property(nonatomic, readwrite) int64_t offset;

@end

#pragma mark - SENFileResponse

typedef GPB_ENUM(SENFileResponse_FieldNumber) {
  SENFileResponse_FieldNumber_Info = 1,
  SENFileResponse_FieldNumber_Chunk = 2,
  SENFileResponse_FieldNumber_Complete = 3,
};

typedef GPB_ENUM(SENFileResponse_StreamingResponse_OneOfCase) {
  SENFileResponse_StreamingResponse_OneOfCase_GPBUnsetOneOfCase = 0,
  SENFileResponse_StreamingResponse_OneOfCase_Info = 1,
  SENFileResponse_StreamingResponse_OneOfCase_Chunk = 2,
};

/**
 * The top-level message returned from the client for the `Download` method.
 * Multiple `FileResponse` messages are sent in a stream. The first message
 * will contain an `info` message and will not contain `FileChunk`.
 * All subsequent messages must contain `FileChunk` and
 * must not contain an `info` message.
 **/
GPB_FINAL @interface SENFileResponse : GPBMessage

/** The streaming response, which is either info or chunk. */
@property(nonatomic, readonly) SENFileResponse_StreamingResponse_OneOfCase streamingResponseOneOfCase;

/** Provides information about the requested file. */
@property(nonatomic, readwrite, strong, null_resettable) SENFileInfo *info;

/** A chunk of the downloaded file */
@property(nonatomic, readwrite, strong, null_resettable) SENFileChunk *chunk;

/** File download complete flag */
@property(nonatomic, readwrite) BOOL complete;

@end

/**
 * Clears whatever value was set for the oneof 'streamingResponse'.
 **/
void SENFileResponse_ClearStreamingResponseOneOfCase(SENFileResponse *message);

#pragma mark - SENFileCatalogRequest

typedef GPB_ENUM(SENFileCatalogRequest_FieldNumber) {
  SENFileCatalogRequest_FieldNumber_CategoriesArray = 1,
};

/**
 * A request to obtain a catalog of all files
 **/
GPB_FINAL @interface SENFileCatalogRequest : GPBMessage

/** A map of file category versions */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SENVersionedFileCategory*> *categoriesArray;
/** The number of items in @c categoriesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger categoriesArray_Count;

@end

#pragma mark - SENFileCompleteCatalogRequest

typedef GPB_ENUM(SENFileCompleteCatalogRequest_FieldNumber) {
  SENFileCompleteCatalogRequest_FieldNumber_TenantId = 1,
};

/**
 * a request to obtain the complete file catalog (Internal only)
 **/
GPB_FINAL @interface SENFileCompleteCatalogRequest : GPBMessage

/** Optional tenantId to retrieve tenant-specific models in addition to the complete catalog */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tenantId;

@end

#pragma mark - SENFileCatalogResponse

typedef GPB_ENUM(SENFileCatalogResponse_FieldNumber) {
  SENFileCatalogResponse_FieldNumber_CatalogArray = 1,
};

/**
 * A reponse with the file catalog
 **/
GPB_FINAL @interface SENFileCatalogResponse : GPBMessage

/** The catalog of files */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SENFileCatalog*> *catalogArray;
/** The number of items in @c catalogArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger catalogArray_Count;

@end

#pragma mark - SENFileChunk

typedef GPB_ENUM(SENFileChunk_FieldNumber) {
  SENFileChunk_FieldNumber_Bytes = 1,
  SENFileChunk_FieldNumber_Offset = 2,
};

/**
 * A chunk of a downloaded file
 **/
GPB_FINAL @interface SENFileChunk : GPBMessage

/** The bytes to be sent to the */
@property(nonatomic, readwrite, copy, null_resettable) NSData *bytes;

/** The offset value based on the number of bytes currently written */
@property(nonatomic, readwrite) int64_t offset;

@end

#pragma mark - SENFileInfo

typedef GPB_ENUM(SENFileInfo_FieldNumber) {
  SENFileInfo_FieldNumber_File = 1,
  SENFileInfo_FieldNumber_AbsolutePath = 2,
  SENFileInfo_FieldNumber_Size = 3,
  SENFileInfo_FieldNumber_ContentType = 4,
  SENFileInfo_FieldNumber_Hash_p = 5,
  SENFileInfo_FieldNumber_TenantId = 6,
};

/**
 * Information about the file
 **/
GPB_FINAL @interface SENFileInfo : GPBMessage

/** The name of the base file. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *file;

/**
 * The complete path of the file to be downloaded
 * including the filename. (E.G my/file/path/file.txt)
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *absolutePath;

/** The full size of the file */
@property(nonatomic, readwrite) int64_t size;

/** A standard MIME type describing the format of the file */
@property(nonatomic, readwrite, copy, null_resettable) NSString *contentType;

/** The md5 file hash */
@property(nonatomic, readwrite, copy, null_resettable) NSString *hash_p;

/** Optional tenantID associated with this file */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tenantId;

@end

#pragma mark - SENFileCatalog

typedef GPB_ENUM(SENFileCatalog_FieldNumber) {
  SENFileCatalog_FieldNumber_FilesArray = 1,
  SENFileCatalog_FieldNumber_Category = 2,
};

/**
 * A message containing a list of FileInfos
 **/
GPB_FINAL @interface SENFileCatalog : GPBMessage

/** The list of files */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SENFileInfo*> *filesArray;
/** The number of items in @c filesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger filesArray_Count;

/** The category of files in this catalog */
@property(nonatomic, readwrite, strong, null_resettable) SENVersionedFileCategory *category;
/** Test to see if @c category has been set. */
@property(nonatomic, readwrite) BOOL hasCategory;

@end

#pragma mark - SENVersionedFileCategory

typedef GPB_ENUM(SENVersionedFileCategory_FieldNumber) {
  SENVersionedFileCategory_FieldNumber_Category = 1,
  SENVersionedFileCategory_FieldNumber_Version = 2,
};

/**
 * A versioned file category
 **/
GPB_FINAL @interface SENVersionedFileCategory : GPBMessage

/** The category of file */
@property(nonatomic, readwrite) SENFileCategory category;

/** The version of the category (e.g. For TSSV v3.16.3 models, the version would be 3.16) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *version;

@end

/**
 * Fetches the raw value of a @c SENVersionedFileCategory's @c category property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SENVersionedFileCategory_Category_RawValue(SENVersionedFileCategory *message);
/**
 * Sets the raw value of an @c SENVersionedFileCategory's @c category property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSENVersionedFileCategory_Category_RawValue(SENVersionedFileCategory *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
