// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/management/enrollment.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Enrollment.pbobjc.h"
#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(SENCompressionConfiguration);
GPBObjCClassDeclaration(SENEnrollmentGroupResponse);
GPBObjCClassDeclaration(SENEnrollmentResponse);

#pragma mark - SENEnrollmentRoot

@implementation SENEnrollmentRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[SENValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SENEnrollmentRoot_FileDescriptor

static GPBFileDescriptor *SENEnrollmentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sensory.api.v1.management"
                                                 objcPrefix:@"SEN"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SENGetEnrollmentsRequest

@implementation SENGetEnrollmentsRequest

@dynamic userId;

typedef struct SENGetEnrollmentsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} SENGetEnrollmentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGetEnrollmentsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENGetEnrollmentsRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGetEnrollmentsRequest class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGetEnrollmentsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENGetEnrollmentsResponse

@implementation SENGetEnrollmentsResponse

@dynamic enrollmentsArray, enrollmentsArray_Count;
@dynamic isRequestorTrusted;

typedef struct SENGetEnrollmentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *enrollmentsArray;
} SENGetEnrollmentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enrollmentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENEnrollmentResponse),
        .number = SENGetEnrollmentsResponse_FieldNumber_EnrollmentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGetEnrollmentsResponse__storage_, enrollmentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isRequestorTrusted",
        .dataTypeSpecific.clazz = Nil,
        .number = SENGetEnrollmentsResponse_FieldNumber_IsRequestorTrusted,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGetEnrollmentsResponse class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGetEnrollmentsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\022\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENEnrollmentResponse

@implementation SENEnrollmentResponse

@dynamic id_p;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic description_p;
@dynamic modelName;
@dynamic modelType;
@dynamic modelVersion;
@dynamic deviceId;
@dynamic userId;
@dynamic hasCompression, compression;
@dynamic deviceName;
@dynamic didEnrollWithLiveness;
@dynamic referenceId;
@dynamic didEnrollAsBiometric;

typedef struct SENEnrollmentResponse__storage_ {
  uint32_t _has_storage_[1];
  SENModelType modelType;
  NSString *id_p;
  GPBTimestamp *createdAt;
  GPBTimestamp *updatedAt;
  NSString *description_p;
  NSString *modelName;
  NSString *modelVersion;
  NSString *deviceId;
  NSString *userId;
  SENCompressionConfiguration *compression;
  NSString *deviceName;
  NSString *referenceId;
} SENEnrollmentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentResponse_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENEnrollmentResponse_FieldNumber_CreatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, createdAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENEnrollmentResponse_FieldNumber_UpdatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, updatedAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentResponse_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentResponse_FieldNumber_ModelName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelType",
        .dataTypeSpecific.enumDescFunc = SENModelType_EnumDescriptor,
        .number = SENEnrollmentResponse_FieldNumber_ModelType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, modelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "modelVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentResponse_FieldNumber_ModelVersion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, modelVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentResponse_FieldNumber_DeviceId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentResponse_FieldNumber_UserId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "compression",
        .dataTypeSpecific.clazz = GPBObjCClass(SENCompressionConfiguration),
        .number = SENEnrollmentResponse_FieldNumber_Compression,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, compression),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentResponse_FieldNumber_DeviceName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, deviceName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "didEnrollWithLiveness",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentResponse_FieldNumber_DidEnrollWithLiveness,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "referenceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentResponse_FieldNumber_ReferenceId,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SENEnrollmentResponse__storage_, referenceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "didEnrollAsBiometric",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentResponse_FieldNumber_DidEnrollAsBiometric,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENEnrollmentResponse class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENEnrollmentResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\002\t\000\003\t\000\005\t\000\006\t\000\007\014\000\010\010\000\t\006\000\013\n\000\014\025\000\r\013\000\016\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENEnrollmentResponse_ModelType_RawValue(SENEnrollmentResponse *message) {
  GPBDescriptor *descriptor = [SENEnrollmentResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENEnrollmentResponse_FieldNumber_ModelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENEnrollmentResponse_ModelType_RawValue(SENEnrollmentResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SENEnrollmentResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENEnrollmentResponse_FieldNumber_ModelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENGetEnrollmentGroupsResponse

@implementation SENGetEnrollmentGroupsResponse

@dynamic enrollmentGroupsArray, enrollmentGroupsArray_Count;

typedef struct SENGetEnrollmentGroupsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *enrollmentGroupsArray;
} SENGetEnrollmentGroupsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enrollmentGroupsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENEnrollmentGroupResponse),
        .number = SENGetEnrollmentGroupsResponse_FieldNumber_EnrollmentGroupsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENGetEnrollmentGroupsResponse__storage_, enrollmentGroupsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENGetEnrollmentGroupsResponse class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENGetEnrollmentGroupsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000enrollmentGroups\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENEnrollmentGroupResponse

@implementation SENEnrollmentGroupResponse

@dynamic id_p;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic name;
@dynamic description_p;
@dynamic modelName;
@dynamic modelType;
@dynamic modelVersion;
@dynamic userId;
@dynamic enrollmentsArray, enrollmentsArray_Count;

typedef struct SENEnrollmentGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  SENModelType modelType;
  NSString *id_p;
  GPBTimestamp *createdAt;
  GPBTimestamp *updatedAt;
  NSString *name;
  NSString *description_p;
  NSString *modelName;
  NSString *modelVersion;
  NSString *userId;
  NSMutableArray *enrollmentsArray;
} SENEnrollmentGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentGroupResponse_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENEnrollmentGroupResponse__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENEnrollmentGroupResponse_FieldNumber_CreatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENEnrollmentGroupResponse__storage_, createdAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SENEnrollmentGroupResponse_FieldNumber_UpdatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENEnrollmentGroupResponse__storage_, updatedAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentGroupResponse_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENEnrollmentGroupResponse__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentGroupResponse_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENEnrollmentGroupResponse__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentGroupResponse_FieldNumber_ModelName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENEnrollmentGroupResponse__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelType",
        .dataTypeSpecific.enumDescFunc = SENModelType_EnumDescriptor,
        .number = SENEnrollmentGroupResponse_FieldNumber_ModelType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENEnrollmentGroupResponse__storage_, modelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "modelVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentGroupResponse_FieldNumber_ModelVersion,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENEnrollmentGroupResponse__storage_, modelVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENEnrollmentGroupResponse_FieldNumber_UserId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SENEnrollmentGroupResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENEnrollmentResponse),
        .number = SENEnrollmentGroupResponse_FieldNumber_EnrollmentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENEnrollmentGroupResponse__storage_, enrollmentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENEnrollmentGroupResponse class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENEnrollmentGroupResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\002\t\000\003\t\000\006\t\000\007\t\000\010\014\000\t\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENEnrollmentGroupResponse_ModelType_RawValue(SENEnrollmentGroupResponse *message) {
  GPBDescriptor *descriptor = [SENEnrollmentGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENEnrollmentGroupResponse_FieldNumber_ModelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENEnrollmentGroupResponse_ModelType_RawValue(SENEnrollmentGroupResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SENEnrollmentGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENEnrollmentGroupResponse_FieldNumber_ModelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENCreateEnrollmentGroupRequest

@implementation SENCreateEnrollmentGroupRequest

@dynamic id_p;
@dynamic name;
@dynamic description_p;
@dynamic modelName;
@dynamic userId;
@dynamic enrollmentIdsArray, enrollmentIdsArray_Count;

typedef struct SENCreateEnrollmentGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *description_p;
  NSString *modelName;
  NSString *userId;
  NSMutableArray *enrollmentIdsArray;
} SENCreateEnrollmentGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENCreateEnrollmentGroupRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENCreateEnrollmentGroupRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SENCreateEnrollmentGroupRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENCreateEnrollmentGroupRequest__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENCreateEnrollmentGroupRequest_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENCreateEnrollmentGroupRequest__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENCreateEnrollmentGroupRequest_FieldNumber_ModelName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENCreateEnrollmentGroupRequest__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENCreateEnrollmentGroupRequest_FieldNumber_UserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENCreateEnrollmentGroupRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENCreateEnrollmentGroupRequest_FieldNumber_EnrollmentIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENCreateEnrollmentGroupRequest__storage_, enrollmentIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENCreateEnrollmentGroupRequest class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENCreateEnrollmentGroupRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\004\t\000\005\006\000\006\000enrollmentIds\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENAppendEnrollmentGroupRequest

@implementation SENAppendEnrollmentGroupRequest

@dynamic groupId;
@dynamic enrollmentIdsArray, enrollmentIdsArray_Count;

typedef struct SENAppendEnrollmentGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSMutableArray *enrollmentIdsArray;
} SENAppendEnrollmentGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAppendEnrollmentGroupRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENAppendEnrollmentGroupRequest__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENAppendEnrollmentGroupRequest_FieldNumber_EnrollmentIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENAppendEnrollmentGroupRequest__storage_, enrollmentIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENAppendEnrollmentGroupRequest class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENAppendEnrollmentGroupRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000enrollmentIds\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENDeleteEnrollmentRequest

@implementation SENDeleteEnrollmentRequest

@dynamic id_p;

typedef struct SENDeleteEnrollmentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} SENDeleteEnrollmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENDeleteEnrollmentRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENDeleteEnrollmentRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENDeleteEnrollmentRequest class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENDeleteEnrollmentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENDeleteEnrollmentGroupRequest

@implementation SENDeleteEnrollmentGroupRequest

@dynamic id_p;

typedef struct SENDeleteEnrollmentGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} SENDeleteEnrollmentGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENDeleteEnrollmentGroupRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENDeleteEnrollmentGroupRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENDeleteEnrollmentGroupRequest class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENDeleteEnrollmentGroupRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENUpdateEnrollmentRequest

@implementation SENUpdateEnrollmentRequest

@dynamic id_p;
@dynamic description_p;

typedef struct SENUpdateEnrollmentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *description_p;
} SENUpdateEnrollmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUpdateEnrollmentRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENUpdateEnrollmentRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUpdateEnrollmentRequest_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENUpdateEnrollmentRequest__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENUpdateEnrollmentRequest class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENUpdateEnrollmentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENUpdateEnrollmentGroupRequest

@implementation SENUpdateEnrollmentGroupRequest

@dynamic id_p;
@dynamic name;

typedef struct SENUpdateEnrollmentGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
} SENUpdateEnrollmentGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUpdateEnrollmentGroupRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENUpdateEnrollmentGroupRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SENUpdateEnrollmentGroupRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENUpdateEnrollmentGroupRequest__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENUpdateEnrollmentGroupRequest class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENUpdateEnrollmentGroupRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENRemoveEnrollmentsRequest

@implementation SENRemoveEnrollmentsRequest

@dynamic groupId;
@dynamic enrollmentIdsArray, enrollmentIdsArray_Count;

typedef struct SENRemoveEnrollmentsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSMutableArray *enrollmentIdsArray;
} SENRemoveEnrollmentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENRemoveEnrollmentsRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENRemoveEnrollmentsRequest__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENRemoveEnrollmentsRequest_FieldNumber_EnrollmentIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENRemoveEnrollmentsRequest__storage_, enrollmentIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENRemoveEnrollmentsRequest class]
                                     rootClass:[SENEnrollmentRoot class]
                                          file:SENEnrollmentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENRemoveEnrollmentsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000enrollmentIds\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
