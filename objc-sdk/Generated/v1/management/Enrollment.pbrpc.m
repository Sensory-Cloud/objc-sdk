// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: v1/management/enrollment.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "Enrollment.pbrpc.h"
#import "Enrollment.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#if defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS) && GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
#import <Protobuf/GPBTimestamp.pbobjc.h>
#else
#import "GPBTimestamp.pbobjc.h"
#endif
#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"

@implementation SENEnrollmentService

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.management"
                 serviceName:@"EnrollmentService"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"sensory.api.v1.management"
                 serviceName:@"EnrollmentService"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark GetEnrollments(GetEnrollmentsRequest) returns (GetEnrollmentsResponse)

/**
 * Get enrollments from the database that match the specified criteria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getEnrollmentsWithRequest:(SENGetEnrollmentsRequest *)request handler:(void(^)(SENGetEnrollmentsResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetEnrollmentsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Get enrollments from the database that match the specified criteria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetEnrollmentsWithRequest:(SENGetEnrollmentsRequest *)request handler:(void(^)(SENGetEnrollmentsResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetEnrollments"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENGetEnrollmentsResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Get enrollments from the database that match the specified criteria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)getEnrollmentsWithMessage:(SENGetEnrollmentsRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetEnrollments"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGetEnrollmentsResponse class]];
}

#pragma mark GetEnrollmentGroups(GetEnrollmentsRequest) returns (GetEnrollmentGroupsResponse)

/**
 * Get all enrollment groups that match the specified criteria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getEnrollmentGroupsWithRequest:(SENGetEnrollmentsRequest *)request handler:(void(^)(SENGetEnrollmentGroupsResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToGetEnrollmentGroupsWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Get all enrollment groups that match the specified criteria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetEnrollmentGroupsWithRequest:(SENGetEnrollmentsRequest *)request handler:(void(^)(SENGetEnrollmentGroupsResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"GetEnrollmentGroups"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENGetEnrollmentGroupsResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Get all enrollment groups that match the specified criteria
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)getEnrollmentGroupsWithMessage:(SENGetEnrollmentsRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"GetEnrollmentGroups"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENGetEnrollmentGroupsResponse class]];
}

#pragma mark CreateEnrollmentGroup(CreateEnrollmentGroupRequest) returns (EnrollmentGroupResponse)

/**
 * Creates a new enrollment group without any associated enrollments
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)createEnrollmentGroupWithRequest:(SENCreateEnrollmentGroupRequest *)request handler:(void(^)(SENEnrollmentGroupResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToCreateEnrollmentGroupWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Creates a new enrollment group without any associated enrollments
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToCreateEnrollmentGroupWithRequest:(SENCreateEnrollmentGroupRequest *)request handler:(void(^)(SENEnrollmentGroupResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"CreateEnrollmentGroup"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENEnrollmentGroupResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Creates a new enrollment group without any associated enrollments
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)createEnrollmentGroupWithMessage:(SENCreateEnrollmentGroupRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"CreateEnrollmentGroup"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENEnrollmentGroupResponse class]];
}

#pragma mark AppendEnrollmentGroup(AppendEnrollmentGroupRequest) returns (EnrollmentGroupResponse)

/**
 * Appends an enrollment to an enrollment group
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)appendEnrollmentGroupWithRequest:(SENAppendEnrollmentGroupRequest *)request handler:(void(^)(SENEnrollmentGroupResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToAppendEnrollmentGroupWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Appends an enrollment to an enrollment group
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToAppendEnrollmentGroupWithRequest:(SENAppendEnrollmentGroupRequest *)request handler:(void(^)(SENEnrollmentGroupResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"AppendEnrollmentGroup"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENEnrollmentGroupResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Appends an enrollment to an enrollment group
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)appendEnrollmentGroupWithMessage:(SENAppendEnrollmentGroupRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"AppendEnrollmentGroup"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENEnrollmentGroupResponse class]];
}

#pragma mark DeleteEnrollment(DeleteEnrollmentRequest) returns (EnrollmentResponse)

/**
 * Deletes an enrollment from the database
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 * A user may not delete their last enrollment, as this would lead to a situation where a user could
 * lock themselves out of the system forever.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)deleteEnrollmentWithRequest:(SENDeleteEnrollmentRequest *)request handler:(void(^)(SENEnrollmentResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToDeleteEnrollmentWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Deletes an enrollment from the database
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 * A user may not delete their last enrollment, as this would lead to a situation where a user could
 * lock themselves out of the system forever.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToDeleteEnrollmentWithRequest:(SENDeleteEnrollmentRequest *)request handler:(void(^)(SENEnrollmentResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"DeleteEnrollment"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENEnrollmentResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Deletes an enrollment from the database
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 * A user may not delete their last enrollment, as this would lead to a situation where a user could
 * lock themselves out of the system forever.
 */
- (GRPCUnaryProtoCall *)deleteEnrollmentWithMessage:(SENDeleteEnrollmentRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"DeleteEnrollment"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENEnrollmentResponse class]];
}

#pragma mark DeleteEnrollmentGroup(DeleteEnrollmentGroupRequest) returns (EnrollmentGroupResponse)

/**
 * Deletes an enrollment group from the database
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)deleteEnrollmentGroupWithRequest:(SENDeleteEnrollmentGroupRequest *)request handler:(void(^)(SENEnrollmentGroupResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToDeleteEnrollmentGroupWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Deletes an enrollment group from the database
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToDeleteEnrollmentGroupWithRequest:(SENDeleteEnrollmentGroupRequest *)request handler:(void(^)(SENEnrollmentGroupResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"DeleteEnrollmentGroup"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENEnrollmentGroupResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Deletes an enrollment group from the database
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)deleteEnrollmentGroupWithMessage:(SENDeleteEnrollmentGroupRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"DeleteEnrollmentGroup"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENEnrollmentGroupResponse class]];
}

#pragma mark UpdateEnrollment(UpdateEnrollmentRequest) returns (EnrollmentResponse)

/**
 * Updates the name of an enrollment
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)updateEnrollmentWithRequest:(SENUpdateEnrollmentRequest *)request handler:(void(^)(SENEnrollmentResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToUpdateEnrollmentWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Updates the name of an enrollment
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToUpdateEnrollmentWithRequest:(SENUpdateEnrollmentRequest *)request handler:(void(^)(SENEnrollmentResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"UpdateEnrollment"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENEnrollmentResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Updates the name of an enrollment
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)updateEnrollmentWithMessage:(SENUpdateEnrollmentRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"UpdateEnrollment"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENEnrollmentResponse class]];
}

#pragma mark UpdateEnrollmentGroup(UpdateEnrollmentGroupRequest) returns (EnrollmentGroupResponse)

/**
 * Updates the name of an enrollment group
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)updateEnrollmentGroupWithRequest:(SENUpdateEnrollmentGroupRequest *)request handler:(void(^)(SENEnrollmentGroupResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToUpdateEnrollmentGroupWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Updates the name of an enrollment group
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToUpdateEnrollmentGroupWithRequest:(SENUpdateEnrollmentGroupRequest *)request handler:(void(^)(SENEnrollmentGroupResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"UpdateEnrollmentGroup"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENEnrollmentGroupResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Updates the name of an enrollment group
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)updateEnrollmentGroupWithMessage:(SENUpdateEnrollmentGroupRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"UpdateEnrollmentGroup"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENEnrollmentGroupResponse class]];
}

#pragma mark RemoveEnrollmentsFromGroup(RemoveEnrollmentsRequest) returns (EnrollmentGroupResponse)

/**
 * Removes a list of enrollments from an enrollment group
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)removeEnrollmentsFromGroupWithRequest:(SENRemoveEnrollmentsRequest *)request handler:(void(^)(SENEnrollmentGroupResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToRemoveEnrollmentsFromGroupWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Removes a list of enrollments from an enrollment group
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToRemoveEnrollmentsFromGroupWithRequest:(SENRemoveEnrollmentsRequest *)request handler:(void(^)(SENEnrollmentGroupResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"RemoveEnrollmentsFromGroup"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[SENEnrollmentGroupResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Removes a list of enrollments from an enrollment group
 * Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
 */
- (GRPCUnaryProtoCall *)removeEnrollmentsFromGroupWithMessage:(SENRemoveEnrollmentsRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"RemoveEnrollmentsFromGroup"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[SENEnrollmentGroupResponse class]];
}

@end
#endif
