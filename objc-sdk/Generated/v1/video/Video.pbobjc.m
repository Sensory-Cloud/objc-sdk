// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/video/video.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Video.pbobjc.h"
#import "Validate.pbobjc.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(SENCompressionConfiguration);
GPBObjCClassDeclaration(SENEnrollmentToken);
GPBObjCClassDeclaration(SENTokenResponse);
GPBObjCClassDeclaration(SENVAuthenticateConfig);
GPBObjCClassDeclaration(SENVCreateEnrollmentConfig);
GPBObjCClassDeclaration(SENVValidateRecognitionConfig);
GPBObjCClassDeclaration(SENVVideoModel);

#pragma mark - SENVVideoRoot

@implementation SENVVideoRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[ValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SENVVideoRoot_FileDescriptor

static GPBFileDescriptor *SENVVideoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sensory.api.v1.video"
                                                 objcPrefix:@"SENV"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SENVRecognitionThreshold

GPBEnumDescriptor *SENVRecognitionThreshold_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Low\000Medium\000High\000Highest\000";
    static const int32_t values[] = {
        SENVRecognitionThreshold_Low,
        SENVRecognitionThreshold_Medium,
        SENVRecognitionThreshold_High,
        SENVRecognitionThreshold_Highest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SENVRecognitionThreshold)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SENVRecognitionThreshold_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SENVRecognitionThreshold_IsValidValue(int32_t value__) {
  switch (value__) {
    case SENVRecognitionThreshold_Low:
    case SENVRecognitionThreshold_Medium:
    case SENVRecognitionThreshold_High:
    case SENVRecognitionThreshold_Highest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SENVVideoModel

@implementation SENVVideoModel

@dynamic name;
@dynamic isEnrollable;
@dynamic modelType;
@dynamic fixedObject;
@dynamic versionsArray, versionsArray_Count;
@dynamic technology;
@dynamic isLivenessSupported;

typedef struct SENVVideoModel__storage_ {
  uint32_t _has_storage_[1];
  SENModelType modelType;
  SENTechnologyType technology;
  NSString *name;
  NSString *fixedObject;
  NSMutableArray *versionsArray;
} SENVVideoModel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVVideoModel_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENVVideoModel__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isEnrollable",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVVideoModel_FieldNumber_IsEnrollable,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "modelType",
        .dataTypeSpecific.enumDescFunc = SENModelType_EnumDescriptor,
        .number = SENVVideoModel_FieldNumber_ModelType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENVVideoModel__storage_, modelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fixedObject",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVVideoModel_FieldNumber_FixedObject,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENVVideoModel__storage_, fixedObject),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "versionsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVVideoModel_FieldNumber_VersionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENVVideoModel__storage_, versionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "technology",
        .dataTypeSpecific.enumDescFunc = SENTechnologyType_EnumDescriptor,
        .number = SENVVideoModel_FieldNumber_Technology,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENVVideoModel__storage_, technology),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isLivenessSupported",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVVideoModel_FieldNumber_IsLivenessSupported,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVVideoModel class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENVVideoModel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\014\000\003\t\000\004\013\000\007\023\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENVVideoModel_ModelType_RawValue(SENVVideoModel *message) {
  GPBDescriptor *descriptor = [SENVVideoModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENVVideoModel_FieldNumber_ModelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENVVideoModel_ModelType_RawValue(SENVVideoModel *message, int32_t value) {
  GPBDescriptor *descriptor = [SENVVideoModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENVVideoModel_FieldNumber_ModelType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SENVVideoModel_Technology_RawValue(SENVVideoModel *message) {
  GPBDescriptor *descriptor = [SENVVideoModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENVVideoModel_FieldNumber_Technology];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENVVideoModel_Technology_RawValue(SENVVideoModel *message, int32_t value) {
  GPBDescriptor *descriptor = [SENVVideoModel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENVVideoModel_FieldNumber_Technology];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENVGetModelsRequest

@implementation SENVGetModelsRequest


typedef struct SENVGetModelsRequest__storage_ {
  uint32_t _has_storage_[1];
} SENVGetModelsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVGetModelsRequest class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SENVGetModelsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENVGetModelsResponse

@implementation SENVGetModelsResponse

@dynamic modelsArray, modelsArray_Count;

typedef struct SENVGetModelsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *modelsArray;
} SENVGetModelsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SENVVideoModel),
        .number = SENVGetModelsResponse_FieldNumber_ModelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SENVGetModelsResponse__storage_, modelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVGetModelsResponse class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENVGetModelsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENVCreateEnrollmentRequest

@implementation SENVCreateEnrollmentRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic imageContent;

typedef struct SENVCreateEnrollmentRequest__storage_ {
  uint32_t _has_storage_[2];
  SENVCreateEnrollmentConfig *config;
  NSData *imageContent;
} SENVCreateEnrollmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENVCreateEnrollmentConfig),
        .number = SENVCreateEnrollmentRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imageContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentRequest_FieldNumber_ImageContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentRequest__storage_, imageContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVCreateEnrollmentRequest class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENVCreateEnrollmentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENVCreateEnrollmentRequest_ClearStreamingRequestOneOfCase(SENVCreateEnrollmentRequest *message) {
  GPBDescriptor *descriptor = [SENVCreateEnrollmentRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENVAuthenticateRequest

@implementation SENVAuthenticateRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic imageContent;

typedef struct SENVAuthenticateRequest__storage_ {
  uint32_t _has_storage_[2];
  SENVAuthenticateConfig *config;
  NSData *imageContent;
} SENVAuthenticateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENVAuthenticateConfig),
        .number = SENVAuthenticateRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENVAuthenticateRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imageContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVAuthenticateRequest_FieldNumber_ImageContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENVAuthenticateRequest__storage_, imageContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVAuthenticateRequest class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENVAuthenticateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENVAuthenticateRequest_ClearStreamingRequestOneOfCase(SENVAuthenticateRequest *message) {
  GPBDescriptor *descriptor = [SENVAuthenticateRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENVValidateRecognitionRequest

@implementation SENVValidateRecognitionRequest

@dynamic streamingRequestOneOfCase;
@dynamic config;
@dynamic imageContent;

typedef struct SENVValidateRecognitionRequest__storage_ {
  uint32_t _has_storage_[2];
  SENVValidateRecognitionConfig *config;
  NSData *imageContent;
} SENVValidateRecognitionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(SENVValidateRecognitionConfig),
        .number = SENVValidateRecognitionRequest_FieldNumber_Config,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENVValidateRecognitionRequest__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imageContent",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVValidateRecognitionRequest_FieldNumber_ImageContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENVValidateRecognitionRequest__storage_, imageContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVValidateRecognitionRequest class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENVValidateRecognitionRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "streamingRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SENVValidateRecognitionRequest_ClearStreamingRequestOneOfCase(SENVValidateRecognitionRequest *message) {
  GPBDescriptor *descriptor = [SENVValidateRecognitionRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENVCreateEnrollmentResponse

@implementation SENVCreateEnrollmentResponse

@dynamic percentComplete;
@dynamic isAlive;
@dynamic enrollmentId;
@dynamic modelName;
@dynamic modelVersion;
@dynamic score;
@dynamic hasEnrollmentToken, enrollmentToken;

typedef struct SENVCreateEnrollmentResponse__storage_ {
  uint32_t _has_storage_[1];
  float score;
  NSString *enrollmentId;
  NSString *modelName;
  NSString *modelVersion;
  SENEnrollmentToken *enrollmentToken;
  int64_t percentComplete;
} SENVCreateEnrollmentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "percentComplete",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentResponse_FieldNumber_PercentComplete,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentResponse__storage_, percentComplete),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isAlive",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentResponse_FieldNumber_IsAlive,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentResponse_FieldNumber_EnrollmentId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentResponse__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentResponse_FieldNumber_ModelName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentResponse__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentResponse_FieldNumber_ModelVersion,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentResponse__storage_, modelVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentResponse_FieldNumber_Score,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentResponse__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "enrollmentToken",
        .dataTypeSpecific.clazz = GPBObjCClass(SENEnrollmentToken),
        .number = SENVCreateEnrollmentResponse_FieldNumber_EnrollmentToken,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentResponse__storage_, enrollmentToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVCreateEnrollmentResponse class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENVCreateEnrollmentResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\017\000\002\007\000\003\014\000\004\t\000\005\014\000\007\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENVAuthenticateResponse

@implementation SENVAuthenticateResponse

@dynamic success;
@dynamic score;
@dynamic isAlive;
@dynamic hasToken, token;
@dynamic userId;
@dynamic enrollmentId;

typedef struct SENVAuthenticateResponse__storage_ {
  uint32_t _has_storage_[1];
  float score;
  SENTokenResponse *token;
  NSString *userId;
  NSString *enrollmentId;
} SENVAuthenticateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVAuthenticateResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "score",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVAuthenticateResponse_FieldNumber_Score,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENVAuthenticateResponse__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "isAlive",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVAuthenticateResponse_FieldNumber_IsAlive,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = GPBObjCClass(SENTokenResponse),
        .number = SENVAuthenticateResponse_FieldNumber_Token,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SENVAuthenticateResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVAuthenticateResponse_FieldNumber_UserId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENVAuthenticateResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVAuthenticateResponse_FieldNumber_EnrollmentId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENVAuthenticateResponse__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVAuthenticateResponse class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENVAuthenticateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\007\000\005\006\000\006\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENVLivenessRecognitionResponse

@implementation SENVLivenessRecognitionResponse

@dynamic isAlive;
@dynamic score;

typedef struct SENVLivenessRecognitionResponse__storage_ {
  uint32_t _has_storage_[1];
  float score;
} SENVLivenessRecognitionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isAlive",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVLivenessRecognitionResponse_FieldNumber_IsAlive,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "score",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVLivenessRecognitionResponse_FieldNumber_Score,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENVLivenessRecognitionResponse__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVLivenessRecognitionResponse class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENVLivenessRecognitionResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SENVCreateEnrollmentConfig

@implementation SENVCreateEnrollmentConfig

@dynamic userId;
@dynamic deviceId;
@dynamic modelName;
@dynamic description_p;
@dynamic isLivenessEnabled;
@dynamic livenessThreshold;
@dynamic hasCompression, compression;
@dynamic referenceId;
@dynamic numLivenessFramesRequired;
@dynamic disableServerEnrollmentTemplateStorage;

typedef struct SENVCreateEnrollmentConfig__storage_ {
  uint32_t _has_storage_[1];
  SENVRecognitionThreshold livenessThreshold;
  int32_t numLivenessFramesRequired;
  NSString *userId;
  NSString *deviceId;
  NSString *modelName;
  NSString *description_p;
  SENCompressionConfiguration *compression;
  NSString *referenceId;
} SENVCreateEnrollmentConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentConfig_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentConfig_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentConfig__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentConfig_FieldNumber_ModelName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentConfig_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentConfig__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isLivenessEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentConfig_FieldNumber_IsLivenessEnabled,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "livenessThreshold",
        .dataTypeSpecific.enumDescFunc = SENVRecognitionThreshold_EnumDescriptor,
        .number = SENVCreateEnrollmentConfig_FieldNumber_LivenessThreshold,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentConfig__storage_, livenessThreshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "compression",
        .dataTypeSpecific.clazz = GPBObjCClass(SENCompressionConfiguration),
        .number = SENVCreateEnrollmentConfig_FieldNumber_Compression,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentConfig__storage_, compression),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "referenceId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentConfig_FieldNumber_ReferenceId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentConfig__storage_, referenceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "numLivenessFramesRequired",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentConfig_FieldNumber_NumLivenessFramesRequired,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SENVCreateEnrollmentConfig__storage_, numLivenessFramesRequired),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "disableServerEnrollmentTemplateStorage",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVCreateEnrollmentConfig_FieldNumber_DisableServerEnrollmentTemplateStorage,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVCreateEnrollmentConfig class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENVCreateEnrollmentConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\006\000\002\010\000\003\t\000\005\021\000\006\021\000\010\013\000\t\031\000\n\037\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENVCreateEnrollmentConfig_LivenessThreshold_RawValue(SENVCreateEnrollmentConfig *message) {
  GPBDescriptor *descriptor = [SENVCreateEnrollmentConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENVCreateEnrollmentConfig_FieldNumber_LivenessThreshold];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENVCreateEnrollmentConfig_LivenessThreshold_RawValue(SENVCreateEnrollmentConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENVCreateEnrollmentConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENVCreateEnrollmentConfig_FieldNumber_LivenessThreshold];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SENVAuthenticateConfig

@implementation SENVAuthenticateConfig

@dynamic authIdOneOfCase;
@dynamic enrollmentId;
@dynamic enrollmentGroupId;
@dynamic isLivenessEnabled;
@dynamic livenessThreshold;
@dynamic hasCompression, compression;
@dynamic doIncludeToken;
@dynamic enrollmentToken;

typedef struct SENVAuthenticateConfig__storage_ {
  uint32_t _has_storage_[2];
  SENVRecognitionThreshold livenessThreshold;
  NSString *enrollmentId;
  NSString *enrollmentGroupId;
  SENCompressionConfiguration *compression;
  NSData *enrollmentToken;
} SENVAuthenticateConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enrollmentId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVAuthenticateConfig_FieldNumber_EnrollmentId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENVAuthenticateConfig__storage_, enrollmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enrollmentGroupId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVAuthenticateConfig_FieldNumber_EnrollmentGroupId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SENVAuthenticateConfig__storage_, enrollmentGroupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isLivenessEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVAuthenticateConfig_FieldNumber_IsLivenessEnabled,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "livenessThreshold",
        .dataTypeSpecific.enumDescFunc = SENVRecognitionThreshold_EnumDescriptor,
        .number = SENVAuthenticateConfig_FieldNumber_LivenessThreshold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENVAuthenticateConfig__storage_, livenessThreshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "compression",
        .dataTypeSpecific.clazz = GPBObjCClass(SENCompressionConfiguration),
        .number = SENVAuthenticateConfig_FieldNumber_Compression,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SENVAuthenticateConfig__storage_, compression),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "doIncludeToken",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVAuthenticateConfig_FieldNumber_DoIncludeToken,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enrollmentToken",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVAuthenticateConfig_FieldNumber_EnrollmentToken,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SENVAuthenticateConfig__storage_, enrollmentToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVAuthenticateConfig class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENVAuthenticateConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "authId",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\014\000\002\021\000\003\021\000\004\021\000\006\016\000\007\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENVAuthenticateConfig_LivenessThreshold_RawValue(SENVAuthenticateConfig *message) {
  GPBDescriptor *descriptor = [SENVAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENVAuthenticateConfig_FieldNumber_LivenessThreshold];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENVAuthenticateConfig_LivenessThreshold_RawValue(SENVAuthenticateConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENVAuthenticateConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENVAuthenticateConfig_FieldNumber_LivenessThreshold];
  GPBSetMessageRawEnumField(message, field, value);
}

void SENVAuthenticateConfig_ClearAuthIdOneOfCase(SENVAuthenticateConfig *message) {
  GPBDescriptor *descriptor = [SENVAuthenticateConfig descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SENVValidateRecognitionConfig

@implementation SENVValidateRecognitionConfig

@dynamic modelName;
@dynamic userId;
@dynamic threshold;

typedef struct SENVValidateRecognitionConfig__storage_ {
  uint32_t _has_storage_[1];
  SENVRecognitionThreshold threshold;
  NSString *modelName;
  NSString *userId;
} SENVValidateRecognitionConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelName",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVValidateRecognitionConfig_FieldNumber_ModelName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SENVValidateRecognitionConfig__storage_, modelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = SENVValidateRecognitionConfig_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SENVValidateRecognitionConfig__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "threshold",
        .dataTypeSpecific.enumDescFunc = SENVRecognitionThreshold_EnumDescriptor,
        .number = SENVValidateRecognitionConfig_FieldNumber_Threshold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SENVValidateRecognitionConfig__storage_, threshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SENVValidateRecognitionConfig class]
                                     rootClass:[SENVVideoRoot class]
                                          file:SENVVideoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SENVValidateRecognitionConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SENVValidateRecognitionConfig_Threshold_RawValue(SENVValidateRecognitionConfig *message) {
  GPBDescriptor *descriptor = [SENVValidateRecognitionConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENVValidateRecognitionConfig_FieldNumber_Threshold];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSENVValidateRecognitionConfig_Threshold_RawValue(SENVValidateRecognitionConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [SENVValidateRecognitionConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SENVValidateRecognitionConfig_FieldNumber_Threshold];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
