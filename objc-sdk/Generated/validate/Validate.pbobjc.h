// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validate/validate.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class SENAnyRules;
@class SENBoolRules;
@class SENBytesRules;
@class SENDoubleRules;
@class SENDurationRules;
@class SENEnumRules;
@class SENFieldRules;
@class SENFixed32Rules;
@class SENFixed64Rules;
@class SENFloatRules;
@class SENInt32Rules;
@class SENInt64Rules;
@class SENMapRules;
@class SENMessageRules;
@class SENRepeatedRules;
@class SENSFixed32Rules;
@class SENSFixed64Rules;
@class SENSInt32Rules;
@class SENSInt64Rules;
@class SENStringRules;
@class SENTimestampRules;
@class SENUInt32Rules;
@class SENUInt64Rules;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SENKnownRegex

/** WellKnownRegex contain some well-known patterns. */
typedef GPB_ENUM(SENKnownRegex) {
  SENKnownRegex_Unknown = 0,

  /** HTTP header name as defined by RFC 7230. */
  SENKnownRegex_HTTPHeaderName = 1,

  /** HTTP header value as defined by RFC 7230. */
  SENKnownRegex_HTTPHeaderValue = 2,
};

GPBEnumDescriptor *SENKnownRegex_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SENKnownRegex_IsValidValue(int32_t value);

#pragma mark - SENValidateRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface SENValidateRoot : GPBRootObject
@end

@interface SENValidateRoot (DynamicMethods)
/**
 * Disabled nullifies any validation rules for this message, including any
 * message fields associated with it that do support validation.
 **/
+ (GPBExtensionDescriptor *)disabled;
/**
 * Required ensures that exactly one the field options in a oneof is set;
 * validation fails if no fields in the oneof are set.
 **/
+ (GPBExtensionDescriptor *)required;
/**
 * Rules specify the validations to be performed on this field. By default,
 * no validation is performed against a field.
 **/
+ (GPBExtensionDescriptor *)rules;
@end

#pragma mark - SENFieldRules

typedef GPB_ENUM(SENFieldRules_FieldNumber) {
  SENFieldRules_FieldNumber_Float_p = 1,
  SENFieldRules_FieldNumber_Double_p = 2,
  SENFieldRules_FieldNumber_Int32 = 3,
  SENFieldRules_FieldNumber_Int64 = 4,
  SENFieldRules_FieldNumber_Uint32 = 5,
  SENFieldRules_FieldNumber_Uint64 = 6,
  SENFieldRules_FieldNumber_Sint32 = 7,
  SENFieldRules_FieldNumber_Sint64 = 8,
  SENFieldRules_FieldNumber_Fixed32 = 9,
  SENFieldRules_FieldNumber_Fixed64 = 10,
  SENFieldRules_FieldNumber_Sfixed32 = 11,
  SENFieldRules_FieldNumber_Sfixed64 = 12,
  SENFieldRules_FieldNumber_Bool_p = 13,
  SENFieldRules_FieldNumber_String = 14,
  SENFieldRules_FieldNumber_Bytes = 15,
  SENFieldRules_FieldNumber_Enum_p = 16,
  SENFieldRules_FieldNumber_Message = 17,
  SENFieldRules_FieldNumber_Repeated = 18,
  SENFieldRules_FieldNumber_Map = 19,
  SENFieldRules_FieldNumber_Any = 20,
  SENFieldRules_FieldNumber_Duration = 21,
  SENFieldRules_FieldNumber_Timestamp = 22,
};

typedef GPB_ENUM(SENFieldRules_Type_OneOfCase) {
  SENFieldRules_Type_OneOfCase_GPBUnsetOneOfCase = 0,
  SENFieldRules_Type_OneOfCase_Float_p = 1,
  SENFieldRules_Type_OneOfCase_Double_p = 2,
  SENFieldRules_Type_OneOfCase_Int32 = 3,
  SENFieldRules_Type_OneOfCase_Int64 = 4,
  SENFieldRules_Type_OneOfCase_Uint32 = 5,
  SENFieldRules_Type_OneOfCase_Uint64 = 6,
  SENFieldRules_Type_OneOfCase_Sint32 = 7,
  SENFieldRules_Type_OneOfCase_Sint64 = 8,
  SENFieldRules_Type_OneOfCase_Fixed32 = 9,
  SENFieldRules_Type_OneOfCase_Fixed64 = 10,
  SENFieldRules_Type_OneOfCase_Sfixed32 = 11,
  SENFieldRules_Type_OneOfCase_Sfixed64 = 12,
  SENFieldRules_Type_OneOfCase_Bool_p = 13,
  SENFieldRules_Type_OneOfCase_String = 14,
  SENFieldRules_Type_OneOfCase_Bytes = 15,
  SENFieldRules_Type_OneOfCase_Enum_p = 16,
  SENFieldRules_Type_OneOfCase_Repeated = 18,
  SENFieldRules_Type_OneOfCase_Map = 19,
  SENFieldRules_Type_OneOfCase_Any = 20,
  SENFieldRules_Type_OneOfCase_Duration = 21,
  SENFieldRules_Type_OneOfCase_Timestamp = 22,
};

/**
 * FieldRules encapsulates the rules for each type of field. Depending on the
 * field, the correct set should be used to ensure proper validations.
 **/
GPB_FINAL @interface SENFieldRules : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) SENMessageRules *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

@property(nonatomic, readonly) SENFieldRules_Type_OneOfCase typeOneOfCase;

/** Scalar Field Types */
@property(nonatomic, readwrite, strong, null_resettable) SENFloatRules *float_p;

@property(nonatomic, readwrite, strong, null_resettable) SENDoubleRules *double_p;

@property(nonatomic, readwrite, strong, null_resettable) SENInt32Rules *int32;

@property(nonatomic, readwrite, strong, null_resettable) SENInt64Rules *int64;

@property(nonatomic, readwrite, strong, null_resettable) SENUInt32Rules *uint32;

@property(nonatomic, readwrite, strong, null_resettable) SENUInt64Rules *uint64;

@property(nonatomic, readwrite, strong, null_resettable) SENSInt32Rules *sint32;

@property(nonatomic, readwrite, strong, null_resettable) SENSInt64Rules *sint64;

@property(nonatomic, readwrite, strong, null_resettable) SENFixed32Rules *fixed32;

@property(nonatomic, readwrite, strong, null_resettable) SENFixed64Rules *fixed64;

@property(nonatomic, readwrite, strong, null_resettable) SENSFixed32Rules *sfixed32;

@property(nonatomic, readwrite, strong, null_resettable) SENSFixed64Rules *sfixed64;

@property(nonatomic, readwrite, strong, null_resettable) SENBoolRules *bool_p;

@property(nonatomic, readwrite, strong, null_resettable) SENStringRules *string;

@property(nonatomic, readwrite, strong, null_resettable) SENBytesRules *bytes;

/** Complex Field Types */
@property(nonatomic, readwrite, strong, null_resettable) SENEnumRules *enum_p;

@property(nonatomic, readwrite, strong, null_resettable) SENRepeatedRules *repeated;

@property(nonatomic, readwrite, strong, null_resettable) SENMapRules *map;

/** Well-Known Field Types */
@property(nonatomic, readwrite, strong, null_resettable) SENAnyRules *any;

@property(nonatomic, readwrite, strong, null_resettable) SENDurationRules *duration;

@property(nonatomic, readwrite, strong, null_resettable) SENTimestampRules *timestamp;

@end

/**
 * Clears whatever value was set for the oneof 'type'.
 **/
void SENFieldRules_ClearTypeOneOfCase(SENFieldRules *message);

#pragma mark - SENFloatRules

typedef GPB_ENUM(SENFloatRules_FieldNumber) {
  SENFloatRules_FieldNumber_Const_p = 1,
  SENFloatRules_FieldNumber_Lt = 2,
  SENFloatRules_FieldNumber_Lte = 3,
  SENFloatRules_FieldNumber_Gt = 4,
  SENFloatRules_FieldNumber_Gte = 5,
  SENFloatRules_FieldNumber_InArray = 6,
  SENFloatRules_FieldNumber_NotInArray = 7,
};

/**
 * FloatRules describes the constraints applied to `float` values
 **/
GPB_FINAL @interface SENFloatRules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) float const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) float lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) float lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) float gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) float gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBFloatArray *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBFloatArray *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENDoubleRules

typedef GPB_ENUM(SENDoubleRules_FieldNumber) {
  SENDoubleRules_FieldNumber_Const_p = 1,
  SENDoubleRules_FieldNumber_Lt = 2,
  SENDoubleRules_FieldNumber_Lte = 3,
  SENDoubleRules_FieldNumber_Gt = 4,
  SENDoubleRules_FieldNumber_Gte = 5,
  SENDoubleRules_FieldNumber_InArray = 6,
  SENDoubleRules_FieldNumber_NotInArray = 7,
};

/**
 * DoubleRules describes the constraints applied to `double` values
 **/
GPB_FINAL @interface SENDoubleRules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) double const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) double lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) double lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) double gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) double gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENInt32Rules

typedef GPB_ENUM(SENInt32Rules_FieldNumber) {
  SENInt32Rules_FieldNumber_Const_p = 1,
  SENInt32Rules_FieldNumber_Lt = 2,
  SENInt32Rules_FieldNumber_Lte = 3,
  SENInt32Rules_FieldNumber_Gt = 4,
  SENInt32Rules_FieldNumber_Gte = 5,
  SENInt32Rules_FieldNumber_InArray = 6,
  SENInt32Rules_FieldNumber_NotInArray = 7,
};

/**
 * Int32Rules describes the constraints applied to `int32` values
 **/
GPB_FINAL @interface SENInt32Rules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) int32_t const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) int32_t lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) int32_t lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) int32_t gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) int32_t gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENInt64Rules

typedef GPB_ENUM(SENInt64Rules_FieldNumber) {
  SENInt64Rules_FieldNumber_Const_p = 1,
  SENInt64Rules_FieldNumber_Lt = 2,
  SENInt64Rules_FieldNumber_Lte = 3,
  SENInt64Rules_FieldNumber_Gt = 4,
  SENInt64Rules_FieldNumber_Gte = 5,
  SENInt64Rules_FieldNumber_InArray = 6,
  SENInt64Rules_FieldNumber_NotInArray = 7,
};

/**
 * Int64Rules describes the constraints applied to `int64` values
 **/
GPB_FINAL @interface SENInt64Rules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) int64_t const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) int64_t lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) int64_t lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) int64_t gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) int64_t gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENUInt32Rules

typedef GPB_ENUM(SENUInt32Rules_FieldNumber) {
  SENUInt32Rules_FieldNumber_Const_p = 1,
  SENUInt32Rules_FieldNumber_Lt = 2,
  SENUInt32Rules_FieldNumber_Lte = 3,
  SENUInt32Rules_FieldNumber_Gt = 4,
  SENUInt32Rules_FieldNumber_Gte = 5,
  SENUInt32Rules_FieldNumber_InArray = 6,
  SENUInt32Rules_FieldNumber_NotInArray = 7,
};

/**
 * UInt32Rules describes the constraints applied to `uint32` values
 **/
GPB_FINAL @interface SENUInt32Rules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) uint32_t const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) uint32_t lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) uint32_t lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) uint32_t gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) uint32_t gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENUInt64Rules

typedef GPB_ENUM(SENUInt64Rules_FieldNumber) {
  SENUInt64Rules_FieldNumber_Const_p = 1,
  SENUInt64Rules_FieldNumber_Lt = 2,
  SENUInt64Rules_FieldNumber_Lte = 3,
  SENUInt64Rules_FieldNumber_Gt = 4,
  SENUInt64Rules_FieldNumber_Gte = 5,
  SENUInt64Rules_FieldNumber_InArray = 6,
  SENUInt64Rules_FieldNumber_NotInArray = 7,
};

/**
 * UInt64Rules describes the constraints applied to `uint64` values
 **/
GPB_FINAL @interface SENUInt64Rules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) uint64_t const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) uint64_t lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) uint64_t lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) uint64_t gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) uint64_t gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENSInt32Rules

typedef GPB_ENUM(SENSInt32Rules_FieldNumber) {
  SENSInt32Rules_FieldNumber_Const_p = 1,
  SENSInt32Rules_FieldNumber_Lt = 2,
  SENSInt32Rules_FieldNumber_Lte = 3,
  SENSInt32Rules_FieldNumber_Gt = 4,
  SENSInt32Rules_FieldNumber_Gte = 5,
  SENSInt32Rules_FieldNumber_InArray = 6,
  SENSInt32Rules_FieldNumber_NotInArray = 7,
};

/**
 * SInt32Rules describes the constraints applied to `sint32` values
 **/
GPB_FINAL @interface SENSInt32Rules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) int32_t const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) int32_t lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) int32_t lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) int32_t gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) int32_t gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENSInt64Rules

typedef GPB_ENUM(SENSInt64Rules_FieldNumber) {
  SENSInt64Rules_FieldNumber_Const_p = 1,
  SENSInt64Rules_FieldNumber_Lt = 2,
  SENSInt64Rules_FieldNumber_Lte = 3,
  SENSInt64Rules_FieldNumber_Gt = 4,
  SENSInt64Rules_FieldNumber_Gte = 5,
  SENSInt64Rules_FieldNumber_InArray = 6,
  SENSInt64Rules_FieldNumber_NotInArray = 7,
};

/**
 * SInt64Rules describes the constraints applied to `sint64` values
 **/
GPB_FINAL @interface SENSInt64Rules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) int64_t const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) int64_t lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) int64_t lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) int64_t gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) int64_t gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENFixed32Rules

typedef GPB_ENUM(SENFixed32Rules_FieldNumber) {
  SENFixed32Rules_FieldNumber_Const_p = 1,
  SENFixed32Rules_FieldNumber_Lt = 2,
  SENFixed32Rules_FieldNumber_Lte = 3,
  SENFixed32Rules_FieldNumber_Gt = 4,
  SENFixed32Rules_FieldNumber_Gte = 5,
  SENFixed32Rules_FieldNumber_InArray = 6,
  SENFixed32Rules_FieldNumber_NotInArray = 7,
};

/**
 * Fixed32Rules describes the constraints applied to `fixed32` values
 **/
GPB_FINAL @interface SENFixed32Rules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) uint32_t const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) uint32_t lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) uint32_t lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) uint32_t gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) uint32_t gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENFixed64Rules

typedef GPB_ENUM(SENFixed64Rules_FieldNumber) {
  SENFixed64Rules_FieldNumber_Const_p = 1,
  SENFixed64Rules_FieldNumber_Lt = 2,
  SENFixed64Rules_FieldNumber_Lte = 3,
  SENFixed64Rules_FieldNumber_Gt = 4,
  SENFixed64Rules_FieldNumber_Gte = 5,
  SENFixed64Rules_FieldNumber_InArray = 6,
  SENFixed64Rules_FieldNumber_NotInArray = 7,
};

/**
 * Fixed64Rules describes the constraints applied to `fixed64` values
 **/
GPB_FINAL @interface SENFixed64Rules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) uint64_t const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) uint64_t lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) uint64_t lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) uint64_t gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) uint64_t gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENSFixed32Rules

typedef GPB_ENUM(SENSFixed32Rules_FieldNumber) {
  SENSFixed32Rules_FieldNumber_Const_p = 1,
  SENSFixed32Rules_FieldNumber_Lt = 2,
  SENSFixed32Rules_FieldNumber_Lte = 3,
  SENSFixed32Rules_FieldNumber_Gt = 4,
  SENSFixed32Rules_FieldNumber_Gte = 5,
  SENSFixed32Rules_FieldNumber_InArray = 6,
  SENSFixed32Rules_FieldNumber_NotInArray = 7,
};

/**
 * SFixed32Rules describes the constraints applied to `sfixed32` values
 **/
GPB_FINAL @interface SENSFixed32Rules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) int32_t const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) int32_t lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) int32_t lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) int32_t gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) int32_t gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENSFixed64Rules

typedef GPB_ENUM(SENSFixed64Rules_FieldNumber) {
  SENSFixed64Rules_FieldNumber_Const_p = 1,
  SENSFixed64Rules_FieldNumber_Lt = 2,
  SENSFixed64Rules_FieldNumber_Lte = 3,
  SENSFixed64Rules_FieldNumber_Gt = 4,
  SENSFixed64Rules_FieldNumber_Gte = 5,
  SENSFixed64Rules_FieldNumber_InArray = 6,
  SENSFixed64Rules_FieldNumber_NotInArray = 7,
};

/**
 * SFixed64Rules describes the constraints applied to `sfixed64` values
 **/
GPB_FINAL @interface SENSFixed64Rules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) int64_t const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite) int64_t lt;

@property(nonatomic, readwrite) BOOL hasLt;
/**
 * Lte specifies that this field must be less than or equal to the
 * specified value, inclusive
 **/
@property(nonatomic, readwrite) int64_t lte;

@property(nonatomic, readwrite) BOOL hasLte;
/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
 * range is reversed.
 **/
@property(nonatomic, readwrite) int64_t gt;

@property(nonatomic, readwrite) BOOL hasGt;
/**
 * Gte specifies that this field must be greater than or equal to the
 * specified value, inclusive. If the value of Gte is larger than a
 * specified Lt or Lte, the range is reversed.
 **/
@property(nonatomic, readwrite) int64_t gte;

@property(nonatomic, readwrite) BOOL hasGte;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENBoolRules

typedef GPB_ENUM(SENBoolRules_FieldNumber) {
  SENBoolRules_FieldNumber_Const_p = 1,
};

/**
 * BoolRules describes the constraints applied to `bool` values
 **/
GPB_FINAL @interface SENBoolRules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) BOOL const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
@end

#pragma mark - SENStringRules

typedef GPB_ENUM(SENStringRules_FieldNumber) {
  SENStringRules_FieldNumber_Const_p = 1,
  SENStringRules_FieldNumber_MinLen = 2,
  SENStringRules_FieldNumber_MaxLen = 3,
  SENStringRules_FieldNumber_MinBytes = 4,
  SENStringRules_FieldNumber_MaxBytes = 5,
  SENStringRules_FieldNumber_Pattern = 6,
  SENStringRules_FieldNumber_Prefix = 7,
  SENStringRules_FieldNumber_Suffix = 8,
  SENStringRules_FieldNumber_Contains = 9,
  SENStringRules_FieldNumber_InArray = 10,
  SENStringRules_FieldNumber_NotInArray = 11,
  SENStringRules_FieldNumber_Email = 12,
  SENStringRules_FieldNumber_Hostname = 13,
  SENStringRules_FieldNumber_Ip = 14,
  SENStringRules_FieldNumber_Ipv4 = 15,
  SENStringRules_FieldNumber_Ipv6 = 16,
  SENStringRules_FieldNumber_Uri = 17,
  SENStringRules_FieldNumber_UriRef = 18,
  SENStringRules_FieldNumber_Len = 19,
  SENStringRules_FieldNumber_LenBytes = 20,
  SENStringRules_FieldNumber_Address = 21,
  SENStringRules_FieldNumber_Uuid = 22,
  SENStringRules_FieldNumber_NotContains = 23,
  SENStringRules_FieldNumber_WellKnownRegex = 24,
  SENStringRules_FieldNumber_Strict = 25,
};

typedef GPB_ENUM(SENStringRules_WellKnown_OneOfCase) {
  SENStringRules_WellKnown_OneOfCase_GPBUnsetOneOfCase = 0,
  SENStringRules_WellKnown_OneOfCase_Email = 12,
  SENStringRules_WellKnown_OneOfCase_Hostname = 13,
  SENStringRules_WellKnown_OneOfCase_Ip = 14,
  SENStringRules_WellKnown_OneOfCase_Ipv4 = 15,
  SENStringRules_WellKnown_OneOfCase_Ipv6 = 16,
  SENStringRules_WellKnown_OneOfCase_Uri = 17,
  SENStringRules_WellKnown_OneOfCase_UriRef = 18,
  SENStringRules_WellKnown_OneOfCase_Address = 21,
  SENStringRules_WellKnown_OneOfCase_Uuid = 22,
  SENStringRules_WellKnown_OneOfCase_WellKnownRegex = 24,
};

/**
 * StringRules describe the constraints applied to `string` values
 **/
GPB_FINAL @interface SENStringRules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite, copy, null_resettable) NSString *const_p;
/** Test to see if @c const_p has been set. */
@property(nonatomic, readwrite) BOOL hasConst_p;

/**
 * Len specifies that this field must be the specified number of
 * characters (Unicode code points). Note that the number of
 * characters may differ from the number of bytes in the string.
 **/
@property(nonatomic, readwrite) uint64_t len;

@property(nonatomic, readwrite) BOOL hasLen;
/**
 * MinLen specifies that this field must be the specified number of
 * characters (Unicode code points) at a minimum. Note that the number of
 * characters may differ from the number of bytes in the string.
 **/
@property(nonatomic, readwrite) uint64_t minLen;

@property(nonatomic, readwrite) BOOL hasMinLen;
/**
 * MaxLen specifies that this field must be the specified number of
 * characters (Unicode code points) at a maximum. Note that the number of
 * characters may differ from the number of bytes in the string.
 **/
@property(nonatomic, readwrite) uint64_t maxLen;

@property(nonatomic, readwrite) BOOL hasMaxLen;
/**
 * LenBytes specifies that this field must be the specified number of bytes
 * at a minimum
 **/
@property(nonatomic, readwrite) uint64_t lenBytes;

@property(nonatomic, readwrite) BOOL hasLenBytes;
/**
 * MinBytes specifies that this field must be the specified number of bytes
 * at a minimum
 **/
@property(nonatomic, readwrite) uint64_t minBytes;

@property(nonatomic, readwrite) BOOL hasMinBytes;
/**
 * MaxBytes specifies that this field must be the specified number of bytes
 * at a maximum
 **/
@property(nonatomic, readwrite) uint64_t maxBytes;

@property(nonatomic, readwrite) BOOL hasMaxBytes;
/**
 * Pattern specifes that this field must match against the specified
 * regular expression (RE2 syntax). The included expression should elide
 * any delimiters.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *pattern;
/** Test to see if @c pattern has been set. */
@property(nonatomic, readwrite) BOOL hasPattern;

/**
 * Prefix specifies that this field must have the specified substring at
 * the beginning of the string.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *prefix;
/** Test to see if @c prefix has been set. */
@property(nonatomic, readwrite) BOOL hasPrefix;

/**
 * Suffix specifies that this field must have the specified substring at
 * the end of the string.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *suffix;
/** Test to see if @c suffix has been set. */
@property(nonatomic, readwrite) BOOL hasSuffix;

/**
 * Contains specifies that this field must have the specified substring
 * anywhere in the string.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *contains;
/** Test to see if @c contains has been set. */
@property(nonatomic, readwrite) BOOL hasContains;

/**
 * NotContains specifies that this field cannot have the specified substring
 * anywhere in the string.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *notContains;
/** Test to see if @c notContains has been set. */
@property(nonatomic, readwrite) BOOL hasNotContains;

/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

/**
 * WellKnown rules provide advanced constraints against common string
 * patterns
 **/
@property(nonatomic, readonly) SENStringRules_WellKnown_OneOfCase wellKnownOneOfCase;

/**
 * Email specifies that the field must be a valid email address as
 * defined by RFC 5322
 **/
@property(nonatomic, readwrite) BOOL email;

/**
 * Hostname specifies that the field must be a valid hostname as
 * defined by RFC 1034. This constraint does not support
 * internationalized domain names (IDNs).
 **/
@property(nonatomic, readwrite) BOOL hostname;

/**
 * Ip specifies that the field must be a valid IP (v4 or v6) address.
 * Valid IPv6 addresses should not include surrounding square brackets.
 **/
@property(nonatomic, readwrite) BOOL ip;

/** Ipv4 specifies that the field must be a valid IPv4 address. */
@property(nonatomic, readwrite) BOOL ipv4;

/**
 * Ipv6 specifies that the field must be a valid IPv6 address. Valid
 * IPv6 addresses should not include surrounding square brackets.
 **/
@property(nonatomic, readwrite) BOOL ipv6;

/**
 * Uri specifies that the field must be a valid, absolute URI as defined
 * by RFC 3986
 **/
@property(nonatomic, readwrite) BOOL uri;

/**
 * UriRef specifies that the field must be a valid URI as defined by RFC
 * 3986 and may be relative or absolute.
 **/
@property(nonatomic, readwrite) BOOL uriRef;

/**
 * Address specifies that the field must be either a valid hostname as
 * defined by RFC 1034 (which does not support internationalized domain
 * names or IDNs), or it can be a valid IP (v4 or v6).
 **/
@property(nonatomic, readwrite) BOOL address;

/**
 * Uuid specifies that the field must be a valid UUID as defined by
 * RFC 4122
 **/
@property(nonatomic, readwrite) BOOL uuid;

/** WellKnownRegex specifies a common well known pattern defined as a regex. */
@property(nonatomic, readwrite) SENKnownRegex wellKnownRegex;

/**
 * This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
 * strict header validation.
 * By default, this is true, and HTTP header validations are RFC-compliant.
 * Setting to false will enable a looser validations that only disallows
 * \\r\\n\\0 characters, which can be used to bypass header matching rules.
 **/
@property(nonatomic, readwrite) BOOL strict;

@property(nonatomic, readwrite) BOOL hasStrict;
@end

/**
 * Clears whatever value was set for the oneof 'wellKnown'.
 **/
void SENStringRules_ClearWellKnownOneOfCase(SENStringRules *message);

#pragma mark - SENBytesRules

typedef GPB_ENUM(SENBytesRules_FieldNumber) {
  SENBytesRules_FieldNumber_Const_p = 1,
  SENBytesRules_FieldNumber_MinLen = 2,
  SENBytesRules_FieldNumber_MaxLen = 3,
  SENBytesRules_FieldNumber_Pattern = 4,
  SENBytesRules_FieldNumber_Prefix = 5,
  SENBytesRules_FieldNumber_Suffix = 6,
  SENBytesRules_FieldNumber_Contains = 7,
  SENBytesRules_FieldNumber_InArray = 8,
  SENBytesRules_FieldNumber_NotInArray = 9,
  SENBytesRules_FieldNumber_Ip = 10,
  SENBytesRules_FieldNumber_Ipv4 = 11,
  SENBytesRules_FieldNumber_Ipv6 = 12,
  SENBytesRules_FieldNumber_Len = 13,
};

typedef GPB_ENUM(SENBytesRules_WellKnown_OneOfCase) {
  SENBytesRules_WellKnown_OneOfCase_GPBUnsetOneOfCase = 0,
  SENBytesRules_WellKnown_OneOfCase_Ip = 10,
  SENBytesRules_WellKnown_OneOfCase_Ipv4 = 11,
  SENBytesRules_WellKnown_OneOfCase_Ipv6 = 12,
};

/**
 * BytesRules describe the constraints applied to `bytes` values
 **/
GPB_FINAL @interface SENBytesRules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite, copy, null_resettable) NSData *const_p;
/** Test to see if @c const_p has been set. */
@property(nonatomic, readwrite) BOOL hasConst_p;

/** Len specifies that this field must be the specified number of bytes */
@property(nonatomic, readwrite) uint64_t len;

@property(nonatomic, readwrite) BOOL hasLen;
/**
 * MinLen specifies that this field must be the specified number of bytes
 * at a minimum
 **/
@property(nonatomic, readwrite) uint64_t minLen;

@property(nonatomic, readwrite) BOOL hasMinLen;
/**
 * MaxLen specifies that this field must be the specified number of bytes
 * at a maximum
 **/
@property(nonatomic, readwrite) uint64_t maxLen;

@property(nonatomic, readwrite) BOOL hasMaxLen;
/**
 * Pattern specifes that this field must match against the specified
 * regular expression (RE2 syntax). The included expression should elide
 * any delimiters.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *pattern;
/** Test to see if @c pattern has been set. */
@property(nonatomic, readwrite) BOOL hasPattern;

/**
 * Prefix specifies that this field must have the specified bytes at the
 * beginning of the string.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *prefix;
/** Test to see if @c prefix has been set. */
@property(nonatomic, readwrite) BOOL hasPrefix;

/**
 * Suffix specifies that this field must have the specified bytes at the
 * end of the string.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *suffix;
/** Test to see if @c suffix has been set. */
@property(nonatomic, readwrite) BOOL hasSuffix;

/**
 * Contains specifies that this field must have the specified bytes
 * anywhere in the string.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *contains;
/** Test to see if @c contains has been set. */
@property(nonatomic, readwrite) BOOL hasContains;

/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

/**
 * WellKnown rules provide advanced constraints against common byte
 * patterns
 **/
@property(nonatomic, readonly) SENBytesRules_WellKnown_OneOfCase wellKnownOneOfCase;

/**
 * Ip specifies that the field must be a valid IP (v4 or v6) address in
 * byte format
 **/
@property(nonatomic, readwrite) BOOL ip;

/**
 * Ipv4 specifies that the field must be a valid IPv4 address in byte
 * format
 **/
@property(nonatomic, readwrite) BOOL ipv4;

/**
 * Ipv6 specifies that the field must be a valid IPv6 address in byte
 * format
 **/
@property(nonatomic, readwrite) BOOL ipv6;

@end

/**
 * Clears whatever value was set for the oneof 'wellKnown'.
 **/
void SENBytesRules_ClearWellKnownOneOfCase(SENBytesRules *message);

#pragma mark - SENEnumRules

typedef GPB_ENUM(SENEnumRules_FieldNumber) {
  SENEnumRules_FieldNumber_Const_p = 1,
  SENEnumRules_FieldNumber_DefinedOnly = 2,
  SENEnumRules_FieldNumber_InArray = 3,
  SENEnumRules_FieldNumber_NotInArray = 4,
};

/**
 * EnumRules describe the constraints applied to enum values
 **/
GPB_FINAL @interface SENEnumRules : GPBMessage

/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite) int32_t const_p;

@property(nonatomic, readwrite) BOOL hasConst_p;
/**
 * DefinedOnly specifies that this field must be only one of the defined
 * values for this enum, failing on any undefined value.
 **/
@property(nonatomic, readwrite) BOOL definedOnly;

@property(nonatomic, readwrite) BOOL hasDefinedOnly;
/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENMessageRules

typedef GPB_ENUM(SENMessageRules_FieldNumber) {
  SENMessageRules_FieldNumber_Skip = 1,
  SENMessageRules_FieldNumber_Required = 2,
};

/**
 * MessageRules describe the constraints applied to embedded message values.
 * For message-type fields, validation is performed recursively.
 **/
GPB_FINAL @interface SENMessageRules : GPBMessage

/**
 * Skip specifies that the validation rules of this field should not be
 * evaluated
 **/
@property(nonatomic, readwrite) BOOL skip;

@property(nonatomic, readwrite) BOOL hasSkip;
/** Required specifies that this field must be set */
@property(nonatomic, readwrite) BOOL required;

@property(nonatomic, readwrite) BOOL hasRequired;
@end

#pragma mark - SENRepeatedRules

typedef GPB_ENUM(SENRepeatedRules_FieldNumber) {
  SENRepeatedRules_FieldNumber_MinItems = 1,
  SENRepeatedRules_FieldNumber_MaxItems = 2,
  SENRepeatedRules_FieldNumber_Unique = 3,
  SENRepeatedRules_FieldNumber_Items = 4,
};

/**
 * RepeatedRules describe the constraints applied to `repeated` values
 **/
GPB_FINAL @interface SENRepeatedRules : GPBMessage

/**
 * MinItems specifies that this field must have the specified number of
 * items at a minimum
 **/
@property(nonatomic, readwrite) uint64_t minItems;

@property(nonatomic, readwrite) BOOL hasMinItems;
/**
 * MaxItems specifies that this field must have the specified number of
 * items at a maximum
 **/
@property(nonatomic, readwrite) uint64_t maxItems;

@property(nonatomic, readwrite) BOOL hasMaxItems;
/**
 * Unique specifies that all elements in this field must be unique. This
 * contraint is only applicable to scalar and enum types (messages are not
 * supported).
 **/
@property(nonatomic, readwrite) BOOL unique;

@property(nonatomic, readwrite) BOOL hasUnique;
/**
 * Items specifies the contraints to be applied to each item in the field.
 * Repeated message fields will still execute validation against each item
 * unless skip is specified here.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENFieldRules *items;
/** Test to see if @c items has been set. */
@property(nonatomic, readwrite) BOOL hasItems;

@end

#pragma mark - SENMapRules

typedef GPB_ENUM(SENMapRules_FieldNumber) {
  SENMapRules_FieldNumber_MinPairs = 1,
  SENMapRules_FieldNumber_MaxPairs = 2,
  SENMapRules_FieldNumber_NoSparse = 3,
  SENMapRules_FieldNumber_Keys = 4,
  SENMapRules_FieldNumber_Values = 5,
};

/**
 * MapRules describe the constraints applied to `map` values
 **/
GPB_FINAL @interface SENMapRules : GPBMessage

/**
 * MinPairs specifies that this field must have the specified number of
 * KVs at a minimum
 **/
@property(nonatomic, readwrite) uint64_t minPairs;

@property(nonatomic, readwrite) BOOL hasMinPairs;
/**
 * MaxPairs specifies that this field must have the specified number of
 * KVs at a maximum
 **/
@property(nonatomic, readwrite) uint64_t maxPairs;

@property(nonatomic, readwrite) BOOL hasMaxPairs;
/**
 * NoSparse specifies values in this field cannot be unset. This only
 * applies to map's with message value types.
 **/
@property(nonatomic, readwrite) BOOL noSparse;

@property(nonatomic, readwrite) BOOL hasNoSparse;
/** Keys specifies the constraints to be applied to each key in the field. */
@property(nonatomic, readwrite, strong, null_resettable) SENFieldRules *keys;
/** Test to see if @c keys has been set. */
@property(nonatomic, readwrite) BOOL hasKeys;

/**
 * Values specifies the constraints to be applied to the value of each key
 * in the field. Message values will still have their validations evaluated
 * unless skip is specified here.
 **/
@property(nonatomic, readwrite, strong, null_resettable) SENFieldRules *values;
/** Test to see if @c values has been set. */
@property(nonatomic, readwrite) BOOL hasValues;

@end

#pragma mark - SENAnyRules

typedef GPB_ENUM(SENAnyRules_FieldNumber) {
  SENAnyRules_FieldNumber_Required = 1,
  SENAnyRules_FieldNumber_InArray = 2,
  SENAnyRules_FieldNumber_NotInArray = 3,
};

/**
 * AnyRules describe constraints applied exclusively to the
 * `google.protobuf.Any` well-known type
 **/
GPB_FINAL @interface SENAnyRules : GPBMessage

/** Required specifies that this field must be set */
@property(nonatomic, readwrite) BOOL required;

@property(nonatomic, readwrite) BOOL hasRequired;
/**
 * In specifies that this field's `type_url` must be equal to one of the
 * specified values.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field's `type_url` must not be equal to any of
 * the specified values.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENDurationRules

typedef GPB_ENUM(SENDurationRules_FieldNumber) {
  SENDurationRules_FieldNumber_Required = 1,
  SENDurationRules_FieldNumber_Const_p = 2,
  SENDurationRules_FieldNumber_Lt = 3,
  SENDurationRules_FieldNumber_Lte = 4,
  SENDurationRules_FieldNumber_Gt = 5,
  SENDurationRules_FieldNumber_Gte = 6,
  SENDurationRules_FieldNumber_InArray = 7,
  SENDurationRules_FieldNumber_NotInArray = 8,
};

/**
 * DurationRules describe the constraints applied exclusively to the
 * `google.protobuf.Duration` well-known type
 **/
GPB_FINAL @interface SENDurationRules : GPBMessage

/** Required specifies that this field must be set */
@property(nonatomic, readwrite) BOOL required;

@property(nonatomic, readwrite) BOOL hasRequired;
/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *const_p;
/** Test to see if @c const_p has been set. */
@property(nonatomic, readwrite) BOOL hasConst_p;

/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *lt;
/** Test to see if @c lt has been set. */
@property(nonatomic, readwrite) BOOL hasLt;

/**
 * Lt specifies that this field must be less than the specified value,
 * inclusive
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *lte;
/** Test to see if @c lte has been set. */
@property(nonatomic, readwrite) BOOL hasLte;

/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *gt;
/** Test to see if @c gt has been set. */
@property(nonatomic, readwrite) BOOL hasGt;

/**
 * Gte specifies that this field must be greater than the specified value,
 * inclusive
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *gte;
/** Test to see if @c gte has been set. */
@property(nonatomic, readwrite) BOOL hasGte;

/**
 * In specifies that this field must be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GPBDuration*> *inArray;
/** The number of items in @c inArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inArray_Count;

/**
 * NotIn specifies that this field cannot be equal to one of the specified
 * values
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GPBDuration*> *notInArray;
/** The number of items in @c notInArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger notInArray_Count;

@end

#pragma mark - SENTimestampRules

typedef GPB_ENUM(SENTimestampRules_FieldNumber) {
  SENTimestampRules_FieldNumber_Required = 1,
  SENTimestampRules_FieldNumber_Const_p = 2,
  SENTimestampRules_FieldNumber_Lt = 3,
  SENTimestampRules_FieldNumber_Lte = 4,
  SENTimestampRules_FieldNumber_Gt = 5,
  SENTimestampRules_FieldNumber_Gte = 6,
  SENTimestampRules_FieldNumber_LtNow = 7,
  SENTimestampRules_FieldNumber_GtNow = 8,
  SENTimestampRules_FieldNumber_Within = 9,
};

/**
 * TimestampRules describe the constraints applied exclusively to the
 * `google.protobuf.Timestamp` well-known type
 **/
GPB_FINAL @interface SENTimestampRules : GPBMessage

/** Required specifies that this field must be set */
@property(nonatomic, readwrite) BOOL required;

@property(nonatomic, readwrite) BOOL hasRequired;
/** Const specifies that this field must be exactly the specified value */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *const_p;
/** Test to see if @c const_p has been set. */
@property(nonatomic, readwrite) BOOL hasConst_p;

/**
 * Lt specifies that this field must be less than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *lt;
/** Test to see if @c lt has been set. */
@property(nonatomic, readwrite) BOOL hasLt;

/**
 * Lte specifies that this field must be less than the specified value,
 * inclusive
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *lte;
/** Test to see if @c lte has been set. */
@property(nonatomic, readwrite) BOOL hasLte;

/**
 * Gt specifies that this field must be greater than the specified value,
 * exclusive
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *gt;
/** Test to see if @c gt has been set. */
@property(nonatomic, readwrite) BOOL hasGt;

/**
 * Gte specifies that this field must be greater than the specified value,
 * inclusive
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *gte;
/** Test to see if @c gte has been set. */
@property(nonatomic, readwrite) BOOL hasGte;

/**
 * LtNow specifies that this must be less than the current time. LtNow
 * can only be used with the Within rule.
 **/
@property(nonatomic, readwrite) BOOL ltNow;

@property(nonatomic, readwrite) BOOL hasLtNow;
/**
 * GtNow specifies that this must be greater than the current time. GtNow
 * can only be used with the Within rule.
 **/
@property(nonatomic, readwrite) BOOL gtNow;

@property(nonatomic, readwrite) BOOL hasGtNow;
/**
 * Within specifies that this field must be within this duration of the
 * current time. This constraint can be used alone or with the LtNow and
 * GtNow rules.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *within;
/** Test to see if @c within has been set. */
@property(nonatomic, readwrite) BOOL hasWithin;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
